{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastEdgy","text":"<p>The opinionated FastAPI foundation for production applications</p> <p>FastEdgy combines the power of FastAPI with Edgy ORM to create a cohesive, battle-tested foundation for modern web applications. Born from real-world projects at Krafter, it provides the missing pieces that transform FastAPI from a great framework into a complete development platform.</p>"},{"location":"#why-fastedgy","title":"Why FastEdgy?","text":"<p>FastAPI is excellent, but production applications need more than just great APIs. FastEdgy fills the gaps with:</p> <ul> <li> <p> Skip the Boilerplate</p> <p>Auto-generated CRUD APIs, intelligent query builders, and metadata extraction. Build complex features in minutes, not hours.</p> <p>See what's possible \u2192</p> </li> <li> <p> No More Dependency Hell</p> <p>True application-wide dependency injection that just works. Share services between APIs, CLI commands, and background tasks effortlessly.</p> <p>Learn how \u2192</p> </li> <li> <p> Background Tasks That Scale</p> <p>Persistent task queues with retries, monitoring, and multi-worker support. Handle heavy workloads without breaking a sweat.</p> <p>Discover more \u2192</p> </li> <li> <p> Everything Included</p> <p>Rich CLI, multi-tenancy, email templating, i18n, file storage\u2014all integrated and ready to use. Stop hunting for libraries.</p> <p>Get started \u2192</p> </li> </ul> <p>And that's just the beginning. FastEdgy includes 16+ production-ready features covering everything from automatic CRUD generation to advanced query builders, multi-tenancy, email templating, and comprehensive i18n support.</p> <p>Explore all features </p>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's what a complete FastEdgy application looks like:</p> <pre><code>from fastedgy import FastEdgy\nfrom fastedgy.models import Model\nfrom fastedgy.orm import fields\nfrom fastedgy.dependencies import Inject, get_service\nfrom fastedgy.queued_tasks import QueuedTasks\n\n# Your model\nclass User(Model):\n    name = fields.CharField(max_length=100)\n    email = fields.EmailField()\n\n# Your service\nclass EmailService:\n    async def send_welcome(self, email: str):\n        # Send welcome email\n        pass\n\n# Your app with dependency injection and background tasks\napp = FastEdgy()\n\n@app.post(\"/users/\")\nasync def create_user(\n    user_data: dict,\n    email_service: EmailService = Inject(EmailService),\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    user = User(**user_data)\n    await user.save()\n\n    # Queue background task\n    await tasks.add_task(email_service.send_welcome, user.email)\n\n    return user\n</code></pre>"},{"location":"#our-philosophy","title":"Our Philosophy","text":"<p>FastEdgy isn't trying to replace or compete with existing tools. Instead, it complements the Python ecosystem by providing a thoughtful integration of proven technologies. We believe in:</p> <ul> <li>Convention over Configuration - Sensible defaults that just work</li> <li>Production First - Built for real applications, not just demos</li> <li>Developer Happiness - Tools that make your daily work enjoyable</li> <li>Ecosystem Respect - Building on giants, not reinventing wheels</li> </ul>"},{"location":"#ready-to-build","title":"Ready to Build?","text":"<p>Get Started \u2192</p>"},{"location":"about/","title":"About FastEdgy","text":""},{"location":"about/#our-philosophy","title":"Our Philosophy","text":"<p>FastEdgy was born from the need to streamline internal projects as well as those created for our clients into a common foundation. The goal was to have a base that we master perfectly, with a technical opinion that we love, while using excellent existing packages or creating our own in order to keep things simple.</p> <p>It was never designed to compete with or steal the market from anyone. In fact, the Krafter team designed FastEdgy as a complement to the current Python ecosystem, with an approach that seems common at first glance, but different in implementation.</p>"},{"location":"about/#the-vision","title":"The Vision","text":"<p>FastEdgy combines the power of FastAPI for modern API development with Edgy ORM for database management, creating a cohesive foundation that:</p> <ul> <li>Streamlines development with opinionated but flexible conventions</li> <li>Reduces boilerplate through intelligent code generation</li> <li>Maintains simplicity while providing advanced features</li> <li>Respects the ecosystem by building on proven technologies</li> </ul>"},{"location":"about/#core-principles","title":"Core Principles","text":"<ul> <li>Convention over Configuration: Sensible defaults that work out of the box</li> <li>Developer Experience First: Tools and patterns that make development enjoyable</li> <li>Production Ready: Built for real-world applications from day one</li> <li>Community Driven: Open source with community contributions welcome</li> </ul>"},{"location":"about/#the-team","title":"The Team","text":"<p>FastEdgy was originally created by Krafter, a team of passionate developers who believe in building tools that make developers' lives easier.</p>"},{"location":"about/#license","title":"License","text":"<p>FastEdgy is released under the MIT License.</p>"},{"location":"contributing/","title":"Contributing to FastEdgy","text":"<p>FastEdgy is an Open Source, community-driven project. We welcome contributions from everyone!</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Issues and feature requests are tracked in the Github issue tracker.</p> <p>Pull Requests are tracked in the Github pull request tracker.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li>Clone your fork locally</li> <li>Install dependencies with <code>uv sync</code></li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests and linting</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#commit-message-conventions","title":"Commit Message Conventions","text":"<p>This project uses the Conventional Commits naming convention.</p>"},{"location":"contributing/#basic-structure-of-a-conventional-commit","title":"Basic structure of a Conventional commit","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n</code></pre> <ul> <li>type: the type of modification made (required)</li> <li>scope: the scope (optional, but recommended)</li> <li>description: a short explanation (imperative, no capital letters, no period)</li> </ul>"},{"location":"contributing/#conventional-commits-types-used","title":"Conventional Commits Types used","text":"Type Description feat New feature fix Bug fix docs Change in documentation style Change of format (indentation, spaces, etc.) without functional impact refactor Refactoring the code without adding or correcting functionality revert Reverting a previous commit merge Merging branches test Adding or modifying tests chore Miscellaneous tasks without direct impact (build, dependencies, configs, etc.) perf Performance improvement ci Changes to CI/CD files (Github Actions, Gitlab CI, etc.) release Creating a new release"},{"location":"contributing/#conventional-commits-scopes-used","title":"Conventional Commits Scopes used","text":"Scope Description core Core backend logic and main platform features cli CLI commands and related functionality orm ORM models, migrations, and related logic auth Authentication and authorization mechanisms api REST API endpoints, routes, and controllers config Global configuration and environment settings project Project structure, global files, and overall management"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints for all function parameters and return values</li> <li>Write docstrings for all public functions and classes</li> <li>Keep functions small and focused</li> <li>Write meaningful variable and function names</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for all new features</li> <li>Ensure existing tests continue to pass</li> <li>Aim for high test coverage</li> <li>Use pytest for testing framework</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any new features</li> <li>Include code examples in docstrings</li> <li>Keep README.md up to date</li> <li>Use clear, concise language</li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ol> <li>Create descriptive PR titles following conventional commit format</li> <li>Provide detailed descriptions of changes made</li> <li>Reference related issues using <code>#issue_number</code></li> <li>Ensure tests pass before submitting</li> <li>Update documentation as needed</li> <li>Keep PRs focused - one feature or fix per PR</li> </ol>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue for any questions about contributing to FastEdgy!</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13+</li> <li>UV (Python Package Manager recommended, see the installation doc)</li> <li>PostgreSQL 15.0+</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#using-uv-recommended","title":"Using UV (Recommended)","text":"<pre><code>uv add git+ssh://git@github.com/krafterio/fastedgy.git\n</code></pre>"},{"location":"getting-started/#using-pip","title":"Using pip","text":"<pre><code>pip install git+ssh://git@github.com/krafterio/fastedgy.git\n</code></pre>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<p>FastEdgy follows a structured approach. Here's a minimal project layout:</p> <pre><code>my_project/\n\u251c\u2500\u2500 main.py          # App factory\n\u251c\u2500\u2500 models.py        # Database models\n\u251c\u2500\u2500 api/\n\u2502   \u2514\u2500\u2500 users.py     # API routes\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 email.py     # Business logic\n\u2514\u2500\u2500 settings.py      # Configuration\n</code></pre>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/#1-create-your-models","title":"1. Create your models","text":"<p><code>models.py</code>: <pre><code>from fastedgy.models import Model\nfrom fastedgy.orm import fields\n\nclass User(Model):\n    name = fields.CharField(max_length=100)\n    email = fields.EmailField()\n\n    class Meta:\n        tablename = \"users\"\n</code></pre></p>"},{"location":"getting-started/#2-create-your-services","title":"2. Create your services","text":"<p><code>services/email.py</code>: <pre><code>class EmailService:\n    async def send_welcome(self, email: str):\n        print(f\"Sending welcome email to {email}\")\n        # Your email logic here\n</code></pre></p>"},{"location":"getting-started/#3-create-your-api-routes","title":"3. Create your API routes","text":"<p><code>api/users.py</code>: <pre><code>from fastapi import APIRouter\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.queued_tasks import QueuedTasks\n\nfrom models import User\nfrom services.email import EmailService\n\nrouter = APIRouter()\n\n@router.post(\"/users/\")\nasync def create_user(\n    user_data: dict,\n    email_service: EmailService = Inject(EmailService),\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    user = User(**user_data)\n    await user.save()\n\n    # Queue background task\n    await tasks.add_task(email_service.send_welcome, user.email)\n\n    return user\n</code></pre></p>"},{"location":"getting-started/#4-create-your-app-factory","title":"4. Create your app factory","text":"<p><code>main.py</code>: <pre><code>from fastapi import APIRouter\n\nfrom fastedgy.app import FastEdgy\nfrom fastedgy.config import BaseSettings, init_settings\nfrom fastedgy.api_route_model.router import register_api_route_models\nfrom fastedgy.api_route_model.standard_actions import register_standard_api_route_model_actions\n\nfrom api import users\nimport models  # Import models to register them\n\nclass AppSettings(BaseSettings):\n    title: str = \"My FastEdgy App\"\n    debug: bool = True\n\ndef app():\n    settings = init_settings(AppSettings)\n\n    # FastEdgy handles DB connection and lifespan automatically\n    app = FastEdgy(\n        title=settings.title,\n        description=\"My awesome FastEdgy application\",\n        version=\"1.0.0\",\n    )\n\n    # Setup API routes\n    api_router = APIRouter(prefix=\"/api\")\n    api_router.include_router(users.router)\n\n    # Generate automatic CRUD routes for all models\n    register_standard_api_route_model_actions()\n    register_api_route_models(api_router)\n\n    app.include_router(api_router)\n\n    return app\n</code></pre></p> <p>Automatic lifespan</p> <p>FastEdgy automatically handles database connection and service cleanup with a native lifespan. The <code>lifespan</code> parameter is no required.</p>"},{"location":"getting-started/#custom-lifespan-optional","title":"Custom lifespan (optional)","text":"<p>If you need to add your own startup/shutdown logic, you can still provide a custom lifespan:</p> <pre><code>from contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def custom_lifespan(application: FastEdgy):\n    # Your startup logic\n    print(\"Application starting...\")\n    yield\n    # Your shutdown logic\n    print(\"Application shutting down...\")\n\napp = FastEdgy(\n    title=settings.title,\n    lifespan=custom_lifespan,  # Optional\n)\n</code></pre>"},{"location":"getting-started/#5-run-your-application","title":"5. Run your application","text":"<pre><code>fastedgy serve\n</code></pre> <p>Your API is now available at <code>http://localhost:8000</code> with automatic OpenAPI docs at <code>/docs</code>!</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Features - Discover all FastEdgy capabilities</li> <li>Container Service - Learn dependency injection</li> <li>Queued Tasks - Handle background processing</li> </ul>"},{"location":"mcp/","title":"Model Context Protocol (MCP)","text":"<p>FastEdgy is compatible with MCP (Model Context Protocol) through a local MCP server that connects to FastEdgy documentation. This section explains how to configure and use this MCP server to access FastEdgy documentation from your AI assistant.</p>"},{"location":"mcp/#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol (MCP) is a protocol developed by Anthropic that allows AI assistants to access external resources in a secure and structured way. For FastEdgy, this allows your AI assistant to:</p> <ul> <li>Search through FastEdgy documentation</li> <li>Provide accurate answers with links to sources</li> <li>Access the most up-to-date documentation information</li> </ul>"},{"location":"mcp/#configuration","title":"Configuration","text":""},{"location":"mcp/#claude-desktop","title":"Claude Desktop","text":"<p>To use FastEdgy with Claude Desktop, add the following configuration to your MCP configuration file:</p> <p>Configuration file location:</p> <ul> <li>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></li> <li>Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code></li> </ul> <p>Configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"fastedgy-docs\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@serverless-dna/mkdocs-mcp\",\n        \"https://fastedgy.krafter.io\",\n        \"Search FastEdgy documentation (MkDocs) and return concise, source-linked answers.\"\n      ]\n    }\n  }\n}\n</code></pre> <p>After adding this configuration:</p> <ol> <li>Restart Claude Desktop</li> <li>You should see a \ud83d\udd27 icon next to the MCP server name in the status bar</li> <li>Claude assistant will now have access to FastEdgy documentation</li> </ol>"},{"location":"mcp/#cursor-ide","title":"Cursor IDE","text":"<p>If you are using Cursor IDE, you can also configure MCP to access FastEdgy documentation directly from your editor.</p> <p>Configuration for Cursor:</p> <ol> <li>Open Cursor settings</li> <li>Navigate to the MCP section</li> <li>Add the following configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"fastedgy-docs\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@serverless-dna/mkdocs-mcp\",\n        \"https://fastedgy.krafter.io\",\n        \"Search FastEdgy documentation (MkDocs) and return concise, source-linked answers.\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/#other-ides-and-editors","title":"Other IDEs and Editors","text":"<p>The FastEdgy MCP server can be used with any editor or IDE that supports the MCP protocol. The basic configuration remains the same, only the configuration file location may vary.</p>"},{"location":"mcp/#usage","title":"Usage","text":"<p>Once configured, you can ask questions about FastEdgy to your AI assistant, for example:</p> <ul> <li>\"How to configure authentication in FastEdgy?\"</li> <li>\"Show me an example of using queued tasks\"</li> <li>\"How does the container service system work?\"</li> <li>\"What ORM features are available?\"</li> </ul> <p>The assistant will be able to provide detailed answers with direct links to the relevant sections of the documentation.</p>"},{"location":"mcp/#mcp-server-used","title":"MCP Server Used","text":"<p>FastEdgy documentation is accessible through the mkdocs-mcp server developed by Serverless DNA. This external MCP server connects to FastEdgy's published documentation and provides:</p> <ul> <li>Access to the MkDocs Lunr.js search index</li> <li>Efficient local search capabilities</li> <li>Structured results with links to sources</li> </ul>"},{"location":"mcp/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp/#mcp-server-doesnt-connect","title":"MCP server doesn't connect","text":"<ol> <li>Verify that Node.js is installed on your system</li> <li>Make sure the JSON configuration is valid</li> <li>Restart your IDE/assistant</li> <li>Check application logs for error messages</li> </ol>"},{"location":"mcp/#no-search-results","title":"No search results","text":"<ol> <li>Verify that the documentation URL is accessible: https://fastedgy.krafter.io</li> <li>Make sure your internet connection is working</li> <li>The MCP server downloads the search index at startup</li> </ol>"},{"location":"mcp/#performance-issues","title":"Performance issues","text":"<p>The MCP server caches the search index locally. If you encounter slowness:</p> <ol> <li>Restart the MCP server</li> <li>Check your internet connection</li> <li>The index updates automatically</li> </ol>"},{"location":"mcp/#support","title":"Support","text":"<p>If you encounter issues with the MCP integration:</p> <ol> <li>Check the mkdocs-mcp server documentation</li> <li>Open an issue on the FastEdgy repository</li> <li>Make sure you are using the latest version of the MCP server</li> </ol> <p>This MCP integration significantly improves the development experience by providing instant and contextual access to FastEdgy documentation from your development environment.</p>"},{"location":"ai-rules/fastedgy/","title":"FastEdgy Core Rules","text":"<p>AI rules for FastEdgy framework patterns and conventions</p> <p>This file contains core rules for AI coding assistants to better understand FastEdgy patterns, architecture, and conventions.</p>"},{"location":"ai-rules/fastedgy/#prerequisites","title":"Prerequisites","text":"<p>MCP Server Required: These rules work with the MCP server \"fastedgy-docs\" that provides access to FastEdgy documentation. Make sure you have configured the MCP integration before using these rules.</p>"},{"location":"ai-rules/fastedgy/#rule-file","title":"Rule File","text":"<p>Copy this content to your AI assistant configuration:</p> fastedgy.mdc<pre><code>---\ndescription: Make the Agent consult FastEdgy docs via MCP before generating or changing code that depends on framework semantics\nglobs:\n  - \"**/*.py\"\n  - \"**/*.js\"\n  - \"**/*.vue\"\nalwaysApply: true\n---\n\n# MCP usage rules for FastEdgy\n\n## Project Facts\n- The canonical product documentation is built with MkDocs and exposed via an MCP server registered in this workspace\n- The Agent can use MCP tools: `search(query)`, `read(uri)` from server \"fastedgy-docs\"\n- Documentation covers both **Python** (FastAPI/EdgyORM/FastEdgy backend) and **JavaScript/Vue** (vue-fastedgy frontend) aspects\n\n## Sources of truth (priority order)\n1) Local OpenAPI spec (running dev server): available at /openapi.json endpoint\n2) FastEdgy product docs via MCP server \"fastedgy-docs\" (MkDocs)\n3) Existing service code and tests in this repo\n\n## Mandatory preflight for any API change\n1. MUST fetch and read the OpenAPI spec from the development server before adding/changing a request\n2. MUST locate the **operation** by `operationId` or by (method + path)\n3. MUST verify: path params, query params, request body schema, expected status codes, and response schema\n4. If a mismatch is found between spec and current code:\n   - Prefer aligning to the spec; if backend is the source of truth, open a TODO with the spec delta\n5. PRs MUST include:\n   - `operationId` (or method+path), the spec `info.version` (or last-modified), and links to the MkDocs page consulted via MCP\n\n## Fallbacks\n- If the OpenAPI spec is not reachable:\n  - **stop** and request the spec export before coding endpoints\n\n## Rules\n1. WHEN a question concerns FastEdgy concepts (ORM Edgy, DI, API Routes Generator, Query Builder, Fields Selector, Metadata Generator, ORM Extensions, Database Migration, Queued Tasks, CLI, i18n, Multi Tenant, Email, Storage, Authentication, settings) OR vue-fastedgy features (fetcher, bus, composables):\n   - MUST first call MCP `search` with 3\u20136 keywords (use \"Vue.js [concept]\" for vue-fastedgy features)\n   - THEN call MCP `read` on the top-1 relevant doc to confirm API/constraints before coding\n\n2. MUST cite the doc section (file name or heading) you used to justify decisions in the code comment or PR message\n\n3. DO NOT invent framework APIs. If missing in docs, propose a thin wrapper with clear TODO and link to the doc gap\n\n4. When unsure between multiple patterns:\n   - Prefer the documented examples from the MCP doc page over past code in the repo\n</code></pre>"},{"location":"ai-rules/fastedgy/#what-this-covers","title":"What This Covers","text":"<ul> <li>Container Service: Dependency injection patterns and service registration</li> <li>API Route Models: Automatic CRUD generation and route patterns</li> <li>Queued Tasks: Background task patterns and queue management</li> <li>Configuration: Settings management and environment handling</li> <li>Database: ORM patterns with Edgy and migration conventions</li> <li>CLI: Click-based command patterns</li> <li>Project Structure: Recommended file organization</li> </ul>"},{"location":"ai-rules/fastedgy/#usage-with-different-ai-tools","title":"Usage with Different AI Tools","text":""},{"location":"ai-rules/fastedgy/#cursor","title":"Cursor","text":"<p>Create a <code>.cursor/rules/fastedgy.mdc</code> file in your project root and paste the content above.</p>"},{"location":"ai-rules/fastedgy/#github-copilot","title":"GitHub Copilot","text":"<p>Add to your workspace settings or use as context documentation.</p>"},{"location":"ai-rules/fastedgy/#other-ai-tools","title":"Other AI Tools","text":"<p>Adapt the format as needed for your specific AI coding assistant.</p>"},{"location":"ai-rules/fastedgy/#customization","title":"Customization","text":"<p>Feel free to modify these rules to match your project's specific requirements:</p> <ul> <li>Add project-specific patterns</li> <li>Modify naming conventions</li> <li>Include additional dependencies</li> <li>Adjust for your deployment environment</li> </ul> <p>Back to AI Rules Overview</p>"},{"location":"ai-rules/javascript/","title":"JavaScript Rules","text":"<p>AI rules for JavaScript/TypeScript frontend development with FastEdgy</p> <p>This file contains JavaScript and TypeScript rules for AI coding assistants when building frontends that consume FastEdgy APIs.</p>"},{"location":"ai-rules/javascript/#prerequisites","title":"Prerequisites","text":"<p>MCP Server Required: These rules work with the MCP server \"fastedgy-docs\" that provides access to FastEdgy documentation. Make sure you have configured the MCP integration before using these rules.</p>"},{"location":"ai-rules/javascript/#rule-file","title":"Rule File","text":"<p>Copy this content to your AI assistant configuration:</p> javascript.mdc<pre><code>---\ndescription: Standardize FastEdgy API access through the project's fetcher (errors, pagination, caching, tests)\nglobs:\n  - \"app/src/**/*.js\"\nalwaysApply: true\n---\n\n# JavaScript rules (Fastedgy API client via fetcher)\n\n## Project Facts\n- A shared **fetcher** module (from `vue-fastedgy`) wraps the Fetch API\n- Base URL is configured via env (e.g., `import.meta.env.VITE_API_BASE_URL`) or fetcher init\n- Auth: Bearer token provided by the auth store/injector read by the fetcher\n- Responses: JSON; pagination may be limit/offset or cursor-based\n- Canonical API shapes/semantics are in FastEdgy docs (via MCP server \"fastedgy-docs\")\n- **vue-fastedgy documentation** (fetcher, bus, etc.) is available in FastEdgy docs section \"Vue.js\" (accessible via MCP)\n\n## OpenAPI-driven service design\n1) BEFORE creating or editing any `src/api/*.js` service, MUST read the OpenAPI spec (from development server at /openapi.json) and locate the target operation.\n2) The service function name SHOULD reference the `operationId` (or include it in a JSDoc tag), e.g.:\n   /**\n    * operationId: orders_list\n    * GET /api/orders\n    */\n3) Parameters:\n   - Path params: enforce presence and shape as per spec.\n   - Query params: build with a `toQuery()` helper and only allow fields listed in the spec.\n   - Body: build a minimal payload that matches the documented schema (drop unknowns).\n\n## Error &amp; response handling (spec alignment)\n1) Map responses by status code as documented; handle documented error shapes first.\n2) If the API returns an undocumented shape/status:\n   - Treat as exceptional; surface a friendly message and log a TODO with the observed delta.\n3) For critical endpoints, prefer adding a lightweight runtime guard (optional) to assert top-level fields documented by the spec.\n\n## PR requirements (checklist)\n- [ ] Link to OpenAPI spec used and `info.version` (or last-modified).\n- [ ] Paste `operationId` and method+path.\n- [ ] Note any deviations (temporary workarounds) with a TODO and owner.\n\n## Rules\n1) Single client\n   1. All HTTP calls go through the **fetcher** (no raw `fetch()` and no third-party clients)\n   2. The fetcher MUST handle:\n      - Base URL joining + default headers (`Accept: application/json`)\n      - Token injection (`Authorization: Bearer &lt;token&gt;`) when present\n      - JSON auto-parse when `Content-Type` is JSON; handle 204 No Content\n      - Abort/timeout using `AbortController` (default ~15s)\n      - Consistent error mapping (see #3)\n\n2) Domain services\n   1. Place one service file per domain: `src/api/users.js`, `src/api/orders.js`, \u2026\n   2. Service functions call **fetcher** and return plain JS objects (never raw `Response`)\n   3. Use small helpers:\n      - `toQuery(params)` \u2192 builds query strings, drops empty/undefined\n      - `pick(fields, obj)` if you need to shape payloads safely\n   4. Example signatures (JS + JSDoc):\n      ```js\n      /** @typedef {{ items: any[], total: number, next?: string|null, prev?: string|null }} Page */\n\n      /**\n       * @param {{ q?: string, limit?: number, offset?: number }} params\n       * @returns {Promise&lt;Page&gt;}\n       */\n      export async function listOrders(params) { /* use fetcher */ }\n\n      /** @param {string} id @returns {Promise&lt;any&gt;} */\n      export async function getOrder(id) { /* ... */ }\n\n      /** @param {Record&lt;string, any&gt;} payload @returns {Promise&lt;any&gt;} */\n      export async function createOrder(payload) { /* ... */ }\n\n      /** @param {string} id @param {Record&lt;string, any&gt;} patch @returns {Promise&lt;any&gt;} */\n      export async function updateOrder(id, patch) { /* ... */ }\n\n      /** @param {string} id @returns {Promise&lt;void&gt;} */\n      export async function deleteOrder(id) { /* ... */ }\n      ```\n\n3) Errors &amp; resilience\n   1. The fetcher maps errors to:\n      ```js\n      /** @typedef {{ code: string, status: number, message: string, details?: any }} ApiError */\n      ```\n   2. Treat 4xx as non-retryable; 5xx and network errors may retry with exponential backoff (max 2)\n   3. If refresh tokens are supported, implement refresh **inside the fetcher** (single-flight lock), not in services\n   4. Do not surface server stack traces; expose `code` + user-friendly `message`\n\n4) Pagination / sorting / filtering\n   1. Prefer cursor pagination (`cursor`, `page_size`) if the API supports it; otherwise `limit/offset` with `limit=25` default\n   2. `list*` services should return `{ items, total, next?, prev? }` (or the canonical documented shape)\n   3. In the UI, always show a clear Empty State; display `total` if provided by the API\n\n5) Caching &amp; revalidation\n   1. Composables (`useX`) may provide an in-memory cache keyed by URL+params and a `refresh()` method to revalidate\n   2. After create/update/delete, invalidate only affected cache keys (don\u2019t nuke everything)\n   3. Do not persist cache beyond the session by default\n\n6) Security &amp; compliance\n   1. Never log tokens or sensitive data\n   2. Sanitize/allowlist user-provided filters before sending to the API\n   3. MUST consult MCP (`search` \u2192 `read`) to confirm exact payload shapes, status codes, and error envelopes **before** adding/changing a service\n   4. When working with FastEdgy concepts (API Routes Generator, Query Builder, Fields Selector, Metadata Generator, Queued Tasks, i18n, Multi Tenant, Email, Storage, Authentication, settings) or vue-fastedgy features (fetcher config, bus, composables), MUST consult MCP **fastedgy-docs** \u2192 `search(\"keywords\")` or `search(\"Vue.js [concept]\")` for official patterns\n\n7) Developer experience\n   1. Use **JSDoc** to document function params/returns and shared shapes in `src/api/types.js` (or alongside each service)\n   2. For critical endpoints, you may validate responses with a lightweight runtime check (e.g., custom guards) where appropriate\n   3. Keep service modules side-effect free (pure functions calling fetcher)\n\n8) Tests (services &amp; fetcher)\n   1. Use `vitest` + `msw` to mock HTTP at the network boundary\n   2. Test **fetcher** once (token injection, timeout/abort, error mapping, retry policy)\n   3. Each domain service includes happy-path and common failures (401, 404, 409, 429)\n</code></pre>"},{"location":"ai-rules/javascript/#what-this-covers","title":"What This Covers","text":"<ul> <li>API Integration: Patterns for consuming FastEdgy APIs</li> <li>Authentication: JWT handling and auth flows</li> <li>Error Handling: API error responses and validation</li> <li>TypeScript: Type definitions for FastEdgy responses</li> <li>HTTP Clients: Fetch patterns and request configuration</li> <li>State Management: Patterns for managing API state</li> <li>Form Handling: Validation and submission patterns</li> </ul>"},{"location":"ai-rules/javascript/#usage-with-different-ai-tools","title":"Usage with Different AI Tools","text":""},{"location":"ai-rules/javascript/#cursor","title":"Cursor","text":"<p>Create a <code>.cursor/rules/javascript.mdc</code> file or add to your main configuration.</p>"},{"location":"ai-rules/javascript/#github-copilot","title":"GitHub Copilot","text":"<p>Include in your JavaScript/TypeScript workspace settings.</p>"},{"location":"ai-rules/javascript/#other-ai-tools","title":"Other AI Tools","text":"<p>Adapt the format for your specific AI assistant.</p>"},{"location":"ai-rules/javascript/#javascript-patterns-covered","title":"JavaScript Patterns Covered","text":"<p>These rules help the AI understand:</p> <ul> <li>FastEdgy API response structures</li> <li>Authentication token management</li> <li>Error handling with validation messages</li> <li>Async/await patterns for API calls</li> <li>TypeScript interfaces for API data</li> </ul>"},{"location":"ai-rules/javascript/#framework-compatibility","title":"Framework Compatibility","text":"<p>These rules work with:</p> <ul> <li>Vanilla JavaScript/TypeScript</li> <li>Vue.js applications (complement with vue.mdc)</li> </ul>"},{"location":"ai-rules/javascript/#customization-options","title":"Customization Options","text":"<ul> <li>Add framework-specific patterns</li> <li>Include your preferred HTTP client</li> <li>Modify error handling approaches</li> <li>Add custom TypeScript types</li> </ul> <p>Back to AI Rules Overview</p>"},{"location":"ai-rules/overview/","title":"AI Rules for FastEdgy","text":"<p>Enhance your AI coding assistant with FastEdgy-specific rules</p> <p>AI Rules help your coding assistant (Cursor, GitHub Copilot, etc.) better understand FastEdgy patterns, conventions, and best practices. These rule files provide context about the framework's architecture, coding patterns, and common use cases.</p>"},{"location":"ai-rules/overview/#what-are-ai-rules","title":"What are AI Rules?","text":"<p>AI Rules are configuration files that provide context and guidelines to AI coding assistants. They help the AI:</p> <ul> <li>Understand FastEdgy's specific patterns and conventions</li> <li>Generate more accurate and consistent code</li> <li>Follow project-specific best practices</li> <li>Provide better suggestions for common tasks</li> </ul>"},{"location":"ai-rules/overview/#available-rule-files","title":"Available Rule Files","text":"<p>FastEdgy provides rules for different aspects of development:</p> <ul> <li> <p> FastEdgy Core Rules</p> <p>Core framework patterns, dependency injection, API routes, and FastEdgy-specific conventions.</p> <p>Learn more \u2192</p> </li> <li> <p> Python Rules</p> <p>Python-specific patterns when working with FastEdgy, including async/await, type hints, and Pydantic models.</p> <p>Learn more \u2192</p> </li> <li> <p> JavaScript Rules</p> <p>JavaScript/TypeScript patterns for frontend development with FastEdgy APIs.</p> <p>Learn more \u2192</p> </li> <li> <p> Vue.js Rules</p> <p>Vue.js-specific patterns when using vue-fastedgy, including composables, stores, and component patterns.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"ai-rules/overview/#prerequisites","title":"Prerequisites","text":"<p>MCP Server Configuration Required: These AI Rules are designed to work with the MCP server \"fastedgy-docs\" that provides access to FastEdgy documentation. You must configure the MCP integration first before using these rules effectively.</p>"},{"location":"ai-rules/overview/#how-to-use","title":"How to Use","text":"<ol> <li>Configure MCP: Set up the MCP server integration to enable documentation access</li> <li>Choose your AI tool: These rules work with Cursor, GitHub Copilot, and other AI coding assistants</li> <li>Select relevant rules: Pick the rule files that match your development stack</li> <li>Copy and configure: Copy the rules to your project's AI configuration</li> <li>Customize: Adapt the rules to your specific project needs</li> </ol>"},{"location":"ai-rules/overview/#supported-ai-tools","title":"Supported AI Tools","text":"<ul> <li>Cursor: Place rules in <code>.cursor/rules</code></li> <li>GitHub Copilot: Use in workspace configuration or as documentation</li> <li>Other AI assistants: Adapt format as needed for your tool</li> </ul>"},{"location":"ai-rules/overview/#benefits","title":"Benefits","text":"<ul> <li>Faster development: AI understands FastEdgy patterns immediately</li> <li>Consistent code: Generate code that follows FastEdgy conventions</li> <li>Better suggestions: More relevant completions and refactoring suggestions</li> <li>Reduced context switching: Less need to explain framework concepts</li> </ul> <p>Ready to enhance your AI coding experience with FastEdgy?</p> <p>Get Started with AI Rules</p>"},{"location":"ai-rules/python/","title":"Python Rules","text":"<p>AI rules for Python development with FastEdgy</p> <p>This file contains Python-specific rules for AI coding assistants when working with FastEdgy applications.</p>"},{"location":"ai-rules/python/#prerequisites","title":"Prerequisites","text":"<p>MCP Server Required: These rules work with the MCP server \"fastedgy-docs\" that provides access to FastEdgy documentation. Make sure you have configured the MCP integration before using these rules.</p>"},{"location":"ai-rules/python/#rule-file","title":"Rule File","text":"<p>Copy this content to your AI assistant configuration:</p> python.mdc<pre><code>---\ndescription: Python backend conventions for FastAPI and Edgy ORM: structure, errors, and testing\nglobs:\n  - \"server/**/*.py\"\nalwaysApply: true\n---\n\n# Python / FastAPI / Edgy conventions\n\n## Project Facts\n- FastEdgy product docs are exposed via an MCP server named \"fastedgy-docs\"\n- Documentation covers FastAPI patterns, EdgyORM usage, dependency injection, and FastEdgy framework features\n\n## Rules\n1. Python target: 3.13. Use type hints everywhere. Use Pydantic for validation\n2. Services: Single-responsibility functions; dependency injection via FastAPI Depends; no global state\n3. Edgy ORM: Use async session patterns; avoid N+1 by preloading relations; never perform writes in GET handlers\n4. Errors: Raise HTTPException with detail enums; validate inputs with pydantic; log at error boundary\n5. Tests: Pytest; async tests with anyio; one test module per feature; add regression test for every bugfix\n6. Formatting: Ruff/Black defaults; docstrings Google style for public funcs/classes\n7. FastEdgy integration (MCP-first):\n   - When working with FastEdgy concepts (ORM Edgy, DI, API Routes Generator, Query Builder, Fields Selector, Metadata Generator, ORM Extensions, Database Migration, Queued Tasks, CLI, i18n, Multi Tenant, Email, Storage, Authentication, settings), MUST first call MCP **fastedgy-docs** \u2192 `search(\"keywords\")`, then `read(uri)` for the top result **before coding**\n   - In PRs, reference the consulted doc section (file/heading or link)\n   - DO NOT invent framework APIs. If missing in docs, propose a thin wrapper with clear TODO and link to the doc gap\n</code></pre>"},{"location":"ai-rules/python/#what-this-covers","title":"What This Covers","text":"<ul> <li>Type Hints: Proper typing for FastEdgy components</li> <li>Async/Await: Asynchronous patterns and best practices</li> <li>Pydantic Models: Schema definition and validation patterns</li> <li>SQLAlchemy/Edgy: ORM patterns and query building</li> <li>FastAPI Integration: Endpoint definition and dependency injection</li> <li>Error Handling: Exception patterns and error responses</li> <li>Testing: Test patterns for FastEdgy applications</li> <li>Code Style: Python conventions and formatting</li> </ul>"},{"location":"ai-rules/python/#usage-with-different-ai-tools","title":"Usage with Different AI Tools","text":""},{"location":"ai-rules/python/#cursor","title":"Cursor","text":"<p>Create a <code>.cursor/rules/python.mdc</code> file.</p>"},{"location":"ai-rules/python/#github-copilot","title":"GitHub Copilot","text":"<p>Include in your Python workspace configuration.</p>"},{"location":"ai-rules/python/#other-ai-tools","title":"Other AI Tools","text":"<p>Adapt the format for your specific AI assistant.</p>"},{"location":"ai-rules/python/#python-specific-patterns","title":"Python-Specific Patterns","text":"<p>These rules help the AI understand:</p> <ul> <li>FastEdgy's async-first approach</li> <li>Proper dependency injection patterns</li> <li>Type-safe model definitions</li> <li>Error handling conventions</li> <li>Testing best practices</li> </ul>"},{"location":"ai-rules/python/#customization-tips","title":"Customization Tips","text":"<ul> <li>Adjust type hints based on your Python version</li> <li>Modify patterns for your testing framework preference</li> <li>Add project-specific imports and dependencies</li> <li>Include custom exception classes</li> </ul> <p>Back to AI Rules Overview</p>"},{"location":"ai-rules/vue/","title":"Vue.js Rules","text":"<p>AI rules for Vue.js development with vue-fastedgy</p> <p>This file contains Vue.js-specific rules for AI coding assistants when using vue-fastedgy to integrate with FastEdgy backends.</p>"},{"location":"ai-rules/vue/#prerequisites","title":"Prerequisites","text":"<p>MCP Server Required: These rules work with the MCP server \"fastedgy-docs\" that provides access to FastEdgy documentation. Make sure you have configured the MCP integration before using these rules.</p>"},{"location":"ai-rules/vue/#rule-file","title":"Rule File","text":"<p>Copy this content to your AI assistant configuration:</p> vue.mdc<pre><code>---\ndescription: Vue 3 (Composition API) frontend rules for components, stores, and UI integration with Fastedgy\nglobs:\n  - \"app/src/**/*.vue\"\n  - \"app/src/**/*.js\"\n  - !node_modules/**\n  - \"!dist/**\"\nalwaysApply: true\n---\n\n# Vue 3 rules (Fastedgy frontend, JavaScript)\n\n## Project Facts\n- Stack: Vue 3 + Vite, Composition API only (no Options API).\n- State: Pinia.\n- Router: Vue Router (SPA).\n- UI: prefer headless/lightweight libraries.\n- HTTP: use the project's **fetcher** module from `vue-fastedgy` (not Axios).\n- FastEdgy product docs are exposed via an MCP server named \"fastedgy-docs\".\n- **vue-fastedgy documentation** (fetcher, bus, composables) is available in FastEdgy docs section \"Vue.js\".\n\n## Rules\n1) Components\n   1. Use `&lt;script setup&gt;` in SFCs.\n   2. Keep components focused (one UI responsibility). Use `defineProps` / `defineEmits`.\n   3. Do NOT call the network in `.vue` files; put IO in composables (`src/composables/x.js`) or services (`src/api/x.js`) that use the **fetcher**.\n\n2) Stores (Pinia)\n   1. One store per domain (`useUserStore`, `useOrdersStore`, \u2026).\n   2. Stores do not call `fetch` directly\u2014always go through **fetcher** via services in `src/api/`.\n   3. Track `status` ('idle' | 'loading' | 'success' | 'error') and a serializable `error`.\n\n3) Async data\n   1. Prefer composables returning `{ data, status, error, refresh }`.\n   2. Deterministic loading states (skeletons/placeholders); avoid infinite spinners.\n   3. Use `Suspense` only for top-level views, not micro-interactions.\n\n4) Accessibility &amp; i18n\n   1. Add ARIA where relevant; manage focus for modals/menus.\n   2. All user-facing text goes through i18n\u2014no hardcoded strings in logic.\n\n5) Navigation &amp; security\n   1. Global guard: if route meta `auth.required === true`, validate token via the user store; redirect to `/login?next=\u2026`.\n   2. Never embed secrets; config comes from `import.meta.env`.\n\n6) FastEdgy integration (MCP-first)\n   1. If a task involves FastEdgy concepts (API Routes Generator, Query Builder, Fields Selector, Metadata Generator, Queued Tasks, i18n, Multi Tenant, Email, Storage, Authentication, settings) OR **vue-fastedgy features** (fetcher, bus, composables):\n      - MUST first call MCP **fastedgy-docs** \u2192 `search(\"keywords\")` or `search(\"Vue.js [concept]\")` for vue-fastedgy, then `read(uri)` for the top result **before coding**.\n      - In PRs, reference the consulted doc section (file/heading or link).\n   2. If docs don't cover the need, create a minimal wrapper and add a TODO with a link to the doc gap.\n\n7) UI tests\n   1. Use `@testing-library/vue`.\n   2. Mock **services** (which use fetcher), not Pinia stores, for unit tests.\n   3. Every bug fix adds a narrow regression test.\n\n8) Performance\n   1. Code-split heavy views (`defineAsyncComponent`).\n   2. Memoize expensive derived data with `computed`; avoid unnecessary watchers.\n   3. Lists with &gt; ~200 visible items must use pagination or virtualization.\n</code></pre>"},{"location":"ai-rules/vue/#what-this-covers","title":"What This Covers","text":"<ul> <li>vue-fastedgy Integration: Composables and store patterns</li> <li>Fetcher Usage: HTTP client patterns with Vue lifecycle</li> <li>Auth Store: Authentication state management</li> <li>Bus System: Event communication between components</li> <li>Metadata Service: Dynamic UI generation patterns</li> <li>Router Integration: Route protection and navigation</li> <li>Error Handling: Validation error formatting</li> <li>Component Patterns: Best practices for Vue components</li> </ul>"},{"location":"ai-rules/vue/#usage-with-different-ai-tools","title":"Usage with Different AI Tools","text":""},{"location":"ai-rules/vue/#cursor","title":"Cursor","text":"<p>Create a <code>.cursor/rules/vue.mdc</code> file.</p>"},{"location":"ai-rules/vue/#github-copilot","title":"GitHub Copilot","text":"<p>Include in your Vue.js workspace settings.</p>"},{"location":"ai-rules/vue/#other-ai-tools","title":"Other AI Tools","text":"<p>Adapt the format for your specific AI assistant.</p>"},{"location":"ai-rules/vue/#vuejs-patterns-covered","title":"Vue.js Patterns Covered","text":"<p>These rules help the AI understand:</p> <ul> <li>vue-fastedgy composables (<code>useFetcher</code>, <code>useAuthStore</code>, <code>useBus</code>)</li> <li>Automatic request cancellation patterns</li> <li>Authentication flow with Vue Router</li> <li>Event bus communication patterns</li> </ul>"},{"location":"ai-rules/vue/#vuejs-specific-features","title":"Vue.js Specific Features","text":"<ul> <li>Composition API: Proper composable usage</li> <li>Lifecycle Integration: Automatic cleanup patterns</li> <li>Pinia Stores: State management with vue-fastedgy</li> <li>Router Guards: Authentication-based route protection</li> <li>Component Communication: Bus-based event patterns</li> </ul>"},{"location":"ai-rules/vue/#complementary-rules","title":"Complementary Rules","text":"<p>For complete coverage, also use:</p> <ul> <li>FastEdgy Core Rules - Backend patterns</li> <li>JavaScript Rules - General frontend patterns</li> </ul>"},{"location":"ai-rules/vue/#customization-ideas","title":"Customization Ideas","text":"<ul> <li>Add your preferred UI component library patterns</li> <li>Include project-specific composables</li> <li>Modify authentication flow for your needs</li> <li>Add custom validation patterns</li> </ul> <p>Back to AI Rules Overview</p>"},{"location":"features/","title":"FastEdgy Features","text":"<p>FastEdgy provides a comprehensive suite of features to accelerate your web application development. Each feature is designed to solve real-world production challenges while maintaining simplicity and flexibility.</p>"},{"location":"features/#api-features","title":"API Features","text":"<p>Build powerful APIs with automatic CRUD generation and advanced data handling.</p> <ul> <li> <p> API Routes Generator</p> <p>Automatically create CRUD management and export routes for models with full customization support.</p> <p>Learn more \u2192</p> </li> <li> <p> Query Builder</p> <p>Create complex filters with nested rules and condition groupings validated by exposed metadata.</p> <p>Learn more \u2192</p> </li> <li> <p> Fields Selector</p> <p>Define the list of fields that the JSON API should return with support for nested relationships.</p> <p>Learn more \u2192</p> </li> <li> <p> Metadata Generator</p> <p>Automatically create metadata info for models and fields to power dynamic UIs.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"features/#orm-features","title":"ORM Features","text":"<p>Enhanced database capabilities with advanced field types and migration tools.</p> <ul> <li> <p> ORM Extensions</p> <p>Add additional field types for Edgy and PostgreSQL with enhanced validation and features.</p> <p>Learn more \u2192</p> </li> <li> <p> Database Migration</p> <p>Advanced Alembic extensions to handle Edgy ORM field migrations seamlessly.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"features/#core-features","title":"Core Features","text":"<p>Essential framework features that make FastEdgy a complete development platform.</p> <ul> <li> <p> Container Service</p> <p>Centralized dependency injection container with lazy loading and application-wide service management.</p> <p>Learn more \u2192</p> </li> <li> <p> Queued Tasks</p> <p>Production-ready asynchronous task management with failover, multi-workers, and monitoring.</p> <p>Learn more \u2192</p> </li> <li> <p> CLI</p> <p>Rich command-line interface with auto-registration, beautiful formatting, and powerful utilities.</p> <p>Learn more \u2192</p> </li> <li> <p> Internationalization</p> <p>Complete i18n solution using Babel with translation extraction and locale management.</p> <p>Learn more \u2192</p> </li> <li> <p> Multi Tenant</p> <p>Workspace-based multi-tenancy with context management and data isolation.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"features/#services","title":"Services","text":"<p>Infrastructure services for handling common application needs.</p> <ul> <li> <p> Email</p> <p>Template-based email management using Jinja2 with SMTP configuration and queue integration.</p> <p>Learn more \u2192</p> </li> <li> <p> Storage</p> <p>File upload and storage management service with workspace isolation and security.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"features/#miscellaneous-features","title":"Miscellaneous Features","text":"<p>Additional features that enhance security and application functionality.</p> <ul> <li> <p> Authentication</p> <p>JWT-based authentication system with user management and secure API endpoints.</p> <p>Learn more \u2192</p> </li> </ul>"},{"location":"features/api-routes/advanced/","title":"API Routes Generator - Advanced Usage","text":"<p>This guide covers advanced customization for complex use cases.</p>"},{"location":"features/api-routes/advanced/#custom-actions","title":"Custom Actions","text":"<p>Create custom endpoints beyond standard CRUD operations:</p> <pre><code>from fastedgy.api_route_model.actions import BaseApiRouteAction\nfrom fastapi import APIRouter, HTTPException\n\nclass ActivateApiRouteAction(BaseApiRouteAction):\n    name = \"activate\"\n\n    @classmethod\n    def register_route(cls, router, model_cls, options):\n        async def activate_item(item_id: int, active: bool = True):\n            item = await model_cls.objects.get(id=item_id)\n            if not item:\n                raise HTTPException(status_code=404, detail=\"Item not found\")\n\n            item.is_active = active\n            await item.update()\n            return item\n\n        router.add_api_route(\n            path=f\"/{item_id}/activate\",\n            endpoint=activate_item,\n            methods=[\"POST\"],\n            **options\n        )\n\n# Register and use\nfrom fastedgy.dependencies import get_service\nfrom fastedgy.api_route_model.actions import ApiRouteActionRegistry\n\narar = get_service(ApiRouteActionRegistry)\narar.register_action(ActivateApiRouteAction)\n\n@api_route_model(activate=True)\nclass Product(Model):\n    name = fields.CharField(max_length=200)\n    is_active = fields.BooleanField(default=True)\n</code></pre>"},{"location":"features/api-routes/advanced/#view-transformers","title":"View Transformers","text":"<p>FastEdgy provides a comprehensive View Transformers system for customizing data at different stages of the request lifecycle.</p> <p>For complete documentation including all transformer types, registration patterns, and advanced examples, see the dedicated View Transformers section.</p>"},{"location":"features/api-routes/advanced/#route-customization","title":"Route Customization","text":"<p>Customize generated endpoints:</p> <pre><code>@api_route_model(\n    list={\n        \"path\": \"/all-products\",\n        \"summary\": \"Get all products\",\n        \"dependencies\": [Depends(rate_limit)],\n    },\n    create={\n        \"dependencies\": [Depends(admin_required)],\n        \"status_code\": 201,\n    },\n    delete={\n        \"dependencies\": [Depends(super_admin_required)],\n    },\n    export=False  # Disable export endpoint\n)\nclass Product(Model):\n    name = fields.CharField(max_length=200)\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n</code></pre>"},{"location":"features/api-routes/advanced/#admin-routes","title":"Admin Routes","text":"<p>Separate admin endpoints with different permissions:</p> <pre><code>from fastedgy.api_route_model import admin_api_route_model\n\n@admin_api_route_model()\nclass AdminUser(Model):\n    username = fields.CharField(max_length=150)\n    is_staff = fields.BooleanField(default=False)\n\n# Register separately\nfrom fastedgy.api_route_model.router import register_admin_api_route_models\n\nadmin_router = APIRouter(prefix=\"/admin/api\", dependencies=[Depends(admin_required)])\nregister_admin_api_route_models(admin_router)\napp.include_router(admin_router)\n</code></pre> <p>Back to Overview</p>"},{"location":"features/api-routes/getting-started/","title":"API Routes Generator - Getting Started","text":"<p>Learn how to automatically generate CRUD endpoints for your Edgy models in just a few steps.</p>"},{"location":"features/api-routes/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>FastEdgy application set up</li> <li>Edgy models defined</li> <li>Basic understanding of FastAPI routers</li> </ul>"},{"location":"features/api-routes/getting-started/#basic-setup","title":"Basic Setup","text":""},{"location":"features/api-routes/getting-started/#1-register-standard-actions","title":"1. Register Standard Actions","text":"<p>First, register the standard CRUD actions in your application setup:</p> <pre><code># main.py\nfrom fastedgy.api_route_model.standard_actions import register_standard_api_route_model_actions\n\ndef app():\n    # Register standard actions (list, get, create, patch, delete, export)\n    register_standard_api_route_model_actions()\n\n    # ... rest of your app setup\n</code></pre>"},{"location":"features/api-routes/getting-started/#2-mark-your-models","title":"2. Mark Your Models","text":"<p>Add the <code>@api_route_model()</code> decorator to your Edgy models:</p> <pre><code># models.py\nfrom fastedgy.orm import Model, fields\nfrom fastedgy.api_route_model import api_route_model\n\n@api_route_model()\nclass Product(Model):\n    name = fields.CharField(max_length=200)\n    description = fields.TextField()\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n    is_active = fields.BooleanField(default=True)\n\n    class Meta:\n        tablename = \"products\"\n\n@api_route_model()\nclass Category(Model):\n    name = fields.CharField(max_length=100)\n    slug = fields.SlugField()\n\n    class Meta:\n        tablename = \"categories\"\n</code></pre>"},{"location":"features/api-routes/getting-started/#3-register-generated-routes","title":"3. Register Generated Routes","text":"<p>Include the generated routes in your FastAPI application:</p> <pre><code># main.py\nfrom fastapi import APIRouter\nfrom fastedgy.api_route_model.router import register_api_route_models\n\ndef app():\n    app = FastEdgy()\n\n    # Register standard actions\n    register_standard_api_route_model_actions()\n\n    # Create API router\n    api_router = APIRouter(prefix=\"/api\")\n\n    # Register all generated routes\n    register_api_route_models(api_router)\n\n    # Include the router in your app\n    app.include_router(api_router)\n\n    return app\n</code></pre>"},{"location":"features/api-routes/getting-started/#test-your-endpoints","title":"Test Your Endpoints","text":"<p>Once set up, your models automatically have full CRUD endpoints:</p>"},{"location":"features/api-routes/getting-started/#list-products","title":"List Products","text":"<pre><code>GET /api/products/\n\n# With pagination\nGET /api/products/?limit=10&amp;offset=20\n\n# With filtering\nGET /api/products/\nX-Filter: [\"price\", \"&gt;=\", 100]\n\n# With ordering\nGET /api/products/?order_by=name,-price\n</code></pre> <p>Advanced Features</p> <p>See Query Builder for complete X-Filter syntax and operators.</p>"},{"location":"features/api-routes/getting-started/#create-product","title":"Create Product","text":"<pre><code>POST /api/products/\nContent-Type: application/json\n\n{\n  \"name\": \"Laptop\",\n  \"description\": \"High-performance laptop\",\n  \"price\": \"999.99\",\n  \"is_active\": true\n}\n</code></pre>"},{"location":"features/api-routes/getting-started/#get-product","title":"Get Product","text":"<pre><code>GET /api/products/1/\n\n# With field selection\nGET /api/products/1/\nX-Fields: name,price\n</code></pre> <p>Field Selection</p> <p>See Fields Selector for nested field selection and advanced options.</p>"},{"location":"features/api-routes/getting-started/#update-product","title":"Update Product","text":"<pre><code>PATCH /api/products/1/\nContent-Type: application/json\n\n{\n  \"price\": \"899.99\",\n  \"is_active\": false\n}\n</code></pre>"},{"location":"features/api-routes/getting-started/#delete-product","title":"Delete Product","text":"<pre><code>DELETE /api/products/1/\n</code></pre>"},{"location":"features/api-routes/getting-started/#whats-generated","title":"What's Generated","text":"<p>The <code>@api_route_model()</code> decorator automatically creates:</p> <ul> <li>Pydantic schemas for request/response validation</li> <li>FastAPI routes with proper HTTP methods</li> <li>OpenAPI documentation with model schemas</li> <li>Error handling with proper HTTP status codes</li> <li>Pagination for list endpoints</li> <li>Ordering with nested relations support</li> <li>Filtering capabilities based on model fields</li> <li>Field selection for optimized responses</li> </ul>"},{"location":"features/api-routes/getting-started/#next-steps","title":"Next Steps","text":"<p>Your API Routes Generator is now set up! Learn more advanced features:</p> <ul> <li>User Guide - Pagination, ordering, filtering, field selection, and customization</li> <li>Advanced Usage - Custom actions and view transformers</li> </ul> <p>Continue to User Guide</p>"},{"location":"features/api-routes/guide/","title":"API Routes Generator - User Guide","text":"<p>This guide shows you how to use the API Routes Generator effectively with practical examples and common patterns.</p>"},{"location":"features/api-routes/guide/#customizing-generated-routes","title":"Customizing Generated Routes","text":"<p>You can control which endpoints are generated and customize their behavior:</p>"},{"location":"features/api-routes/guide/#selective-endpoint-generation","title":"Selective Endpoint Generation","text":"<pre><code>from fastedgy.api_route_model import api_route_model\n\n# Enable only list and get endpoints\n@api_route_model(list=True, get=True, create=False, patch=False, delete=False)\nclass ReadOnlyProduct(Model):\n    name = fields.CharField(max_length=200)\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        tablename = \"readonly_products\"\n\n# Custom endpoint configuration\n@api_route_model(\n    list=True,\n    get=True,\n    create={\"status_code\": 201, \"summary\": \"Create a new product\"},\n    patch={\"summary\": \"Update product details\"},\n    delete=False  # Disable delete endpoint\n)\nclass Product(Model):\n    name = fields.CharField(max_length=200)\n    description = fields.TextField()\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        tablename = \"products\"\n</code></pre>"},{"location":"features/api-routes/guide/#built-in-features","title":"Built-in Features","text":"<p>Generated endpoints automatically integrate with FastEdgy's advanced features:</p> <ul> <li>Pagination - Standard limit/offset pagination with metadata</li> <li>Ordering - Sort by any field including nested relations</li> <li>Query Builder - Advanced filtering with X-Filter header</li> <li>Fields Selector - Control response fields with X-Fields header</li> </ul> <pre><code># Example combining all features\nGET /api/products/?limit=25&amp;order_by=category.name,price:desc\nX-Filter: [\"&amp;\", [[\"is_active\", \"=\", true], [\"price\", \"&gt;=\", 100]]]\nX-Fields: name,price,category.name,description\n</code></pre>"},{"location":"features/api-routes/guide/#working-with-relationships","title":"Working with Relationships","text":"<p>Generated endpoints support Edgy model relationships:</p> <pre><code># Create with foreign key reference\nPOST /api/products/\n{\"name\": \"Smartphone\", \"category\": 1, \"price\": \"599.99\"}\n\n# Filter by related fields\nGET /api/products/\nX-Filter: [\"category.name\", \"=\", \"Electronics\"]\n\nGET /api/products/\nX-Filter: [\"category\", \"=\", 1]\n</code></pre>"},{"location":"features/api-routes/guide/#data-export","title":"Data Export","text":"<p>Every model gets automatic export functionality supporting CSV, XLSX, and ODS formats:</p> <pre><code># Export with all features support\nGET /api/products/export?format=csv&amp;limit=1000\nX-Filter: [\"is_active\", \"=\", true]\nX-Fields: name,price,category.name\n</code></pre>"},{"location":"features/api-routes/guide/#error-handling","title":"Error Handling","text":"<p>Generated endpoints provide consistent error responses:</p> <ul> <li>400 Bad Request: Validation errors with field details</li> <li>404 Not Found: Item not found</li> <li>403 Forbidden: Insufficient permissions</li> <li>422 Unprocessable Entity: Invalid request data</li> </ul>"},{"location":"features/api-routes/guide/#admin-routes","title":"Admin Routes","text":"<p>Create separate admin endpoints with different permissions:</p> <pre><code>from fastedgy.api_route_model import admin_api_route_model\n\n@admin_api_route_model()  # Separate from regular routes\nclass AdminUser(Model):\n    username = fields.CharField(max_length=150)\n    is_staff = fields.BooleanField(default=False)\n\n# Register on separate admin router\nadmin_router = APIRouter(prefix=\"/admin/api\", dependencies=[Depends(admin_required)])\nregister_admin_api_route_models(admin_router)\n</code></pre>"},{"location":"features/api-routes/guide/#performance-optimization","title":"Performance Optimization","text":"<p>Generated endpoints include automatic optimizations:</p> <ul> <li>Query Optimization: Automatic <code>select_related()</code> for filtered/selected relations</li> <li>Memory Management: Pagination prevents large dataset memory issues</li> <li>Data Transfer: Field selection reduces response size</li> </ul>"},{"location":"features/api-routes/guide/#next-steps","title":"Next Steps","text":"<p>Ready for more advanced customization? Check out:</p> <ul> <li>Advanced Usage - Custom actions and route customization</li> <li>View Transformers - Data transformation hooks</li> </ul> <p>Advanced Usage Guide</p>"},{"location":"features/api-routes/overview/","title":"API Routes Generator","text":"<p>Automatic CRUD endpoints generation for Edgy models</p> <p>The API Routes Generator automatically creates complete REST API endpoints for your Edgy models with just a decorator. It generates all standard CRUD operations (Create, Read, Update, Delete, List) with advanced features like filtering, field selection, and pagination.</p>"},{"location":"features/api-routes/overview/#key-features","title":"Key Features","text":"<ul> <li>Automatic CRUD Generation: Complete REST endpoints with a single decorator</li> <li>Standard Actions: List, Get, Create, Update, Delete, and Export endpoints</li> <li>Field Selection: Control response fields with HTTP headers (Fields Selector)</li> <li>Advanced Filtering: Query filtering with multiple operators (Query Builder)</li> <li>Pagination Support: Built-in pagination for list endpoints</li> <li>Ordering: Sort results by any field</li> <li>View Transformers: Custom data transformation pipeline</li> <li>Admin Routes: Separate endpoints for admin operations</li> <li>Full FastAPI Integration: Native FastAPI router generation</li> </ul>"},{"location":"features/api-routes/overview/#why-api-routes-generator-vs-manual-routes","title":"Why API Routes Generator vs Manual Routes?","text":""},{"location":"features/api-routes/overview/#manual-fastapi-routes-problems","title":"Manual FastAPI Routes Problems","text":"<ul> <li>Repetitive Code: Every model needs the same CRUD boilerplate</li> <li>Inconsistent APIs: Different developers implement different patterns</li> <li>Missing Features: Filtering, pagination, field selection require manual implementation</li> <li>Maintenance Overhead: Changes to models require updating multiple endpoints</li> </ul>"},{"location":"features/api-routes/overview/#api-routes-generator-advantages","title":"API Routes Generator Advantages","text":"<ul> <li>Zero Boilerplate: One decorator generates all endpoints</li> <li>Consistent APIs: All models follow the same REST patterns</li> <li>Built-in Features: Filtering, pagination, and field selection included</li> <li>Type Safety: Automatic Pydantic schema generation from Edgy models</li> <li>Extensible: Custom actions and transformers for specialized needs</li> </ul>"},{"location":"features/api-routes/overview/#quick-example","title":"Quick Example","text":"<pre><code>from fastedgy.orm import Model, fields\nfrom fastedgy.api_route_model import api_route_model\n\n@api_route_model()\nclass User(Model):\n    name = fields.CharField(max_length=100)\n    email = fields.EmailField()\n    age = fields.IntegerField()\n\n    class Meta:\n        tablename = \"users\"\n\n# Automatically generates these endpoints:\n# GET /users/          - List all users (with pagination, filtering, ordering)\n# POST /users/         - Create a new user\n# GET /users/{id}/     - Get a specific user\n# PATCH /users/{id}/   - Update a user\n# DELETE /users/{id}/  - Delete a user\n# GET /users/export    - Export users data\n</code></pre>"},{"location":"features/api-routes/overview/#generated-endpoints","title":"Generated Endpoints","text":"<p>For each registered model, the following endpoints are automatically created:</p> Method Endpoint Action Features GET <code>/models/</code> List items Pagination, filtering, ordering, field selection POST <code>/models/</code> Create item Validation, field selection GET <code>/models/{id}/</code> Get item Field selection PATCH <code>/models/{id}/</code> Update item Partial updates, field selection DELETE <code>/models/{id}/</code> Delete item Soft/hard delete GET <code>/models/export</code> Export data Multiple formats"},{"location":"features/api-routes/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>CRUD APIs: Quick REST API creation for data models</li> <li>Admin Interfaces: Separate admin endpoints with different permissions</li> <li>Mobile Apps: Consistent API endpoints with field selection</li> <li>Data Export: Built-in export functionality</li> <li>Prototyping: Rapid API development during development</li> </ul>"},{"location":"features/api-routes/overview/#get-started","title":"Get Started","text":"<p>Ready to generate your first API routes? Follow our quick start guide:</p> <p>Getting Started User Guide</p>"},{"location":"features/auth/guide/","title":"Authentication - Usage guide","text":"<p>This guide shows you how to implement authentication in your FastEdgy application.</p>"},{"location":"features/auth/guide/#configuration","title":"Configuration","text":"<p>Set authentication settings in your environment file (<code>.env</code>):</p> <pre><code>AUTH_SECRET_KEY=your-very-long-secret-key-here-at-least-32-chars\nAUTH_ALGORITHM=HS256\nAUTH_ACCESS_TOKEN_EXPIRE_MINUTES=15\nAUTH_REFRESH_TOKEN_EXPIRE_DAYS=30\n</code></pre>"},{"location":"features/auth/guide/#user-registration","title":"User registration","text":"<pre><code># User registration happens via the built-in endpoint\n# POST /auth/register\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"secure_password\"\n}\n</code></pre> <p>Or create users programmatically:</p> <pre><code>from fastedgy.depends.security import hash_password\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.orm import Registry\n\nasync def create_user(\n    name: str,\n    email: str,\n    password: str,\n    registry: Registry = Inject(Registry)\n):\n    User = registry.get_model(\"User\")\n\n    hashed_password = hash_password(password)\n    user = User(\n        name=name,\n        email=email,\n        password=hashed_password\n    )\n    await user.save()\n    return user\n</code></pre>"},{"location":"features/auth/guide/#user-login","title":"User login","text":"<pre><code># Login via built-in endpoint\n# POST /auth/token\n{\n    \"username\": \"john@example.com\",  # Email as username\n    \"password\": \"secure_password\"\n}\n\n# Returns:\n{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"features/auth/guide/#protecting-endpoints","title":"Protecting endpoints","text":"<pre><code>from fastedgy.depends.security import get_current_user\nfrom fastedgy.models.user import BaseUser\nfrom fastapi import Depends\n\n@app.get(\"/profile\")\nasync def get_profile(\n    current_user: BaseUser = Depends(get_current_user)\n):\n    return {\n        \"id\": current_user.id,\n        \"name\": current_user.name,\n        \"email\": current_user.email\n    }\n\n@app.post(\"/protected-action\")\nasync def protected_action(\n    data: dict,\n    current_user: BaseUser = Depends(get_current_user)\n):\n    # Only authenticated users can access this\n    return {\"message\": f\"Hello {current_user.name}\", \"data\": data}\n</code></pre>"},{"location":"features/auth/guide/#token-refresh","title":"Token refresh","text":"<pre><code># Refresh access token via built-in endpoint\n# POST /auth/refresh\n{\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}\n\n# Returns new access token\n{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"features/auth/guide/#using-tokens-in-requests","title":"Using tokens in requests","text":"<p>Include the access token in your API requests:</p> <pre><code># Authorization header\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\n\n# Example with curl\ncurl -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n     http://localhost:8000/api/profile\n</code></pre>"},{"location":"features/auth/guide/#password-reset","title":"Password reset","text":"<p>The built-in endpoints handle password reset flow:</p> <ol> <li>Request reset: <code>POST /auth/forgot-password</code></li> <li>Validate token: <code>POST /auth/forgot-password/validate</code></li> <li>Reset password: <code>POST /auth/reset-password</code></li> </ol> <pre><code># 1. Request password reset\n{\n    \"email\": \"john@example.com\"\n}\n\n# 2. User receives email with reset token\n# 3. Reset password with token\n{\n    \"token\": \"reset-token-from-email\",\n    \"password\": \"new_secure_password\"\n}\n</code></pre>"},{"location":"features/auth/guide/#custom-user-model","title":"Custom user model","text":"<p>Extend the base user model:</p> <pre><code>from fastedgy.models.user import BaseUser\nfrom fastedgy.orm import fields\nfrom fastedgy.api_route_model import api_route_model\n\n@api_route_model()\nclass User(BaseUser):\n    phone = fields.CharField(max_length=20, null=True)\n    is_verified = fields.BooleanField(default=False)\n    created_at = fields.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        tablename = \"users\"\n</code></pre>"},{"location":"features/auth/guide/#error-handling","title":"Error handling","text":"<p>Authentication endpoints return standard HTTP errors:</p> <ul> <li>400 Bad Request: Email already registered</li> <li>401 Unauthorized: Invalid credentials</li> <li>422 Unprocessable Entity: Invalid request data</li> </ul> <pre><code>try:\n    # Your authentication logic\n    pass\nexcept HTTPException as e:\n    if e.status_code == 401:\n        # Handle invalid credentials\n        pass\n</code></pre> <p>Back to Overview</p>"},{"location":"features/auth/overview/","title":"Authentication","text":"<p>FastEdgy provides a built-in JWT-based authentication system with user registration, login, password reset, and route protection.</p>"},{"location":"features/auth/overview/#key-features","title":"Key features","text":"<ul> <li>JWT tokens: Access and refresh token support</li> <li>Password hashing: Bcrypt for secure password storage</li> <li>Route protection: Dependency injection for protected endpoints</li> <li>User registration: Simple registration with email validation</li> <li>Password reset: Email-based password recovery</li> <li>Token refresh: Automatic token renewal</li> </ul>"},{"location":"features/auth/overview/#basic-usage","title":"Basic usage","text":"<pre><code>from fastedgy.depends.security import get_current_user\nfrom fastedgy.models.user import BaseUser\n\n@app.get(\"/protected\")\nasync def protected_route(\n    current_user: BaseUser = Depends(get_current_user)\n):\n    return {\"user\": current_user.email}\n</code></pre>"},{"location":"features/auth/overview/#configuration","title":"Configuration","text":"<p>Set these environment variables:</p> <pre><code>AUTH_SECRET_KEY=your-secret-key-here\nAUTH_ALGORITHM=HS256\nAUTH_ACCESS_TOKEN_EXPIRE_MINUTES=15\nAUTH_REFRESH_TOKEN_EXPIRE_DAYS=30\n</code></pre>"},{"location":"features/auth/overview/#built-in-endpoints","title":"Built-in endpoints","text":"<p>FastEdgy provides ready-to-use authentication endpoints:</p> <ul> <li><code>POST /auth/token</code> - Login with email/password</li> <li><code>POST /auth/refresh</code> - Refresh access token</li> <li><code>POST /auth/register</code> - Create new user account</li> <li><code>POST /auth/forgot-password</code> - Request password reset</li> <li><code>POST /auth/reset-password</code> - Reset password with token</li> </ul>"},{"location":"features/auth/overview/#user-model","title":"User model","text":"<p>Extend the base user model for your needs:</p> <pre><code>from fastedgy.models.user import BaseUser\nfrom fastedgy.orm import fields\n\nclass User(BaseUser):\n    # BaseUser provides: id, name, email, password\n    phone = fields.CharField(max_length=20, null=True)\n    is_active = fields.BooleanField(default=True)\n\n    class Meta:\n        tablename = \"users\"\n</code></pre>"},{"location":"features/auth/overview/#token-structure","title":"Token structure","text":"<ul> <li>Access token: Short-lived (15 min default), for API access</li> <li>Refresh token: Long-lived (30 days default), for token renewal</li> <li>JWT payload: Contains user email and token type</li> </ul>"},{"location":"features/auth/overview/#use-cases","title":"Use cases","text":"<ul> <li>API protection: Secure endpoints with user authentication</li> <li>User management: Registration, login, profile management</li> <li>Mobile apps: JWT tokens work perfectly with mobile clients</li> <li>Web apps: Session-based authentication with token refresh</li> </ul>"},{"location":"features/auth/overview/#get-started","title":"Get started","text":"<p>Ready to secure your application? Learn how to implement authentication:</p> <p>Usage Guide</p>"},{"location":"features/cli/guide/","title":"CLI - Usage guide","text":""},{"location":"features/cli/guide/#using-built-in-commands","title":"Using built-in commands","text":""},{"location":"features/cli/guide/#start-development-server","title":"Start development server","text":"<pre><code>fastedgy serve\nfastedgy serve --host 127.0.0.1 --port 3000 --no-reload\n</code></pre>"},{"location":"features/cli/guide/#database-operations","title":"Database operations","text":"<pre><code>fastedgy db createdb\nfastedgy db init --template fastedgy\n</code></pre>"},{"location":"features/cli/guide/#translation-management","title":"Translation management","text":"<pre><code>fastedgy trans extract\nfastedgy trans extract fr --package mypackage\n</code></pre>"},{"location":"features/cli/guide/#adding-custom-commands","title":"Adding custom commands","text":""},{"location":"features/cli/guide/#simple-command","title":"Simple command","text":"<p>Create a command in any module that gets imported:</p> <pre><code>from fastedgy.cli import command, option, pass_cli_context, CliContext\n\n@command()\n@option(\"--name\", default=\"World\", help=\"Name to greet\")\n@pass_cli_context\ndef hello(ctx: CliContext, name: str):\n    \"\"\"Say hello to someone.\"\"\"\n    from fastedgy.cli import console\n    console.print(f\"[green]Hello, {name}![/green]\")\n</code></pre>"},{"location":"features/cli/guide/#command-with-group","title":"Command with group","text":"<p>Create commands organized in groups:</p> <pre><code>from fastedgy.cli import group, command, option, pass_cli_context, CliContext\n\n@group()\ndef data():\n    \"\"\"Data management commands.\"\"\"\n    pass\n\n@data.command()\n@option(\"--format\", default=\"json\", help=\"Output format\")\n@pass_cli_context\ndef export(ctx: CliContext, format: str):\n    \"\"\"Export application data.\"\"\"\n    from fastedgy.cli import console\n    console.print(f\"[blue]Exporting data in {format} format...[/blue]\")\n</code></pre>"},{"location":"features/cli/guide/#rich-output","title":"Rich output","text":"<p>Use Rich components for beautiful terminal output:</p> <pre><code>from fastedgy.cli import command, pass_cli_context, CliContext, console, Table\n\n@command()\n@pass_cli_context\ndef status(ctx: CliContext):\n    \"\"\"Show application status.\"\"\"\n    table = Table(title=\"Application Status\")\n    table.add_column(\"Component\", style=\"cyan\")\n    table.add_column(\"Status\", style=\"green\")\n\n    table.add_row(\"Database\", \"Connected\")\n    table.add_row(\"Cache\", \"Active\")\n    table.add_row(\"Queue\", \"Running\")\n\n    console.print(table)\n</code></pre>"},{"location":"features/cli/guide/#command-discovery","title":"Command discovery","text":"<p>Commands are automatically discovered when:</p> <ol> <li>Module import: The module containing your command is imported</li> <li>Decorator usage: Commands use the <code>@command()</code> decorator</li> <li>Group registration: Commands are part of a <code>@group()</code></li> </ol>"},{"location":"features/cli/guide/#access-services","title":"Access services","text":"<p>Use the CLI context to access application services:</p> <pre><code>@command()\n@pass_cli_context\nasync def migrate(ctx: CliContext):\n    \"\"\"Run database migrations.\"\"\"\n    # Access settings\n    settings = ctx.get(BaseSettings)\n\n    # Access FastEdgy app and services\n    app = await ctx.get_app()\n    # Your migration logic here\n</code></pre>"},{"location":"features/cli/guide/#error-handling","title":"Error handling","text":"<pre><code>@command()\ndef risky_command():\n    \"\"\"Command that might fail.\"\"\"\n    try:\n        # Your command logic\n        pass\n    except Exception as e:\n        from fastedgy.cli import console\n        console.print(f\"[red]Error: {str(e)}[/red]\")\n        raise click.Abort()\n</code></pre> <p>Back to Overview</p>"},{"location":"features/cli/overview/","title":"CLI","text":"<p>FastEdgy provides a rich command-line interface built on Rich Click, offering beautiful terminal output and easy extensibility for adding custom commands.</p>"},{"location":"features/cli/overview/#key-features","title":"Key features","text":"<ul> <li>Rich terminal output: Beautiful tables, panels, and colored text using Rich</li> <li>Automatic discovery: Commands are automatically discovered and registered</li> <li>Group organization: Commands can be organized into logical groups</li> <li>Easy extension: Add new commands with simple decorators</li> <li>Context system: Share configuration and services across commands</li> <li>Built-in commands: Database management, server startup, translations, and queue monitoring</li> </ul>"},{"location":"features/cli/overview/#built-in-commands","title":"Built-in commands","text":"<p>FastEdgy includes several useful commands out of the box:</p> <ul> <li><code>serve</code>: Start the development server with hot reload</li> <li><code>db createdb</code>: Create the database</li> <li><code>db init</code>: Initialize Alembic for database migrations</li> <li><code>trans extract</code>: Extract translatable strings for internationalization</li> <li><code>queue status</code>: Monitor background task queue status</li> </ul>"},{"location":"features/cli/overview/#command-groups","title":"Command groups","text":"<p>Commands are organized into logical groups:</p> <ul> <li><code>db</code>: Database-related operations (create, migrate, etc.)</li> <li><code>trans</code>: Translation and internationalization commands</li> <li><code>queue</code>: Background task queue management</li> </ul>"},{"location":"features/cli/overview/#architecture","title":"Architecture","text":"<p>The CLI system uses automatic command discovery to find and register all commands in your application. Commands are defined using decorators and can access shared configuration through the CLI context.</p> <p>Usage Guide</p>"},{"location":"features/container-service/advanced/","title":"Advanced Container Service Usage","text":"<p>Advanced patterns for complex applications including testing, custom tokens, lifecycle management, and sophisticated dependency scenarios.</p>"},{"location":"features/container-service/advanced/#custom-token-keys","title":"Custom Token Keys","text":"<p>Use tokens when you need multiple implementations of the same service type or string-based service keys.</p>"},{"location":"features/container-service/advanced/#multiple-database-connections","title":"Multiple Database Connections","text":"<pre><code>from fastedgy.dependencies import Token, register_service, Inject\n\n# Define custom tokens\nPRIMARY_DB = Token[DatabaseService](\"primary_db\")\nANALYTICS_DB = Token[DatabaseService](\"analytics_db\")\nCACHE_DB = Token[DatabaseService](\"cache_db\")\n\n# Register different database instances\nregister_service(\n    DatabaseService(\"postgresql://primary-server/app\"),\n    PRIMARY_DB\n)\nregister_service(\n    DatabaseService(\"postgresql://analytics-server/warehouse\"),\n    ANALYTICS_DB\n)\nregister_service(\n    DatabaseService(\"redis://cache-server:6379\"),\n    CACHE_DB\n)\n\n# Use specific databases in endpoints\n@router.get(\"/analytics\")\nasync def get_analytics(\n    primary_db: DatabaseService = Inject(PRIMARY_DB),\n    analytics_db: DatabaseService = Inject(ANALYTICS_DB)\n):\n    users = primary_db.query(\"SELECT * FROM users\")\n    analytics_db.query(\"INSERT INTO user_analytics ...\")\n    return {\"user_count\": len(users)}\n</code></pre>"},{"location":"features/container-service/advanced/#environment-based-services","title":"Environment-Based Services","text":"<pre><code># Define environment-specific tokens\nDEV_EMAIL = Token[EmailService](\"dev_email\")\nPROD_EMAIL = Token[EmailService](\"prod_email\")\n\ndef setup_email_services():\n    if os.getenv(\"ENVIRONMENT\") == \"production\":\n        register_service(SMTPEmailService(\"smtp.mailgun.org\"), PROD_EMAIL)\n        register_service(SMTPEmailService(\"smtp.mailgun.org\"), EmailService)  # Default\n    else:\n        register_service(ConsoleEmailService(), DEV_EMAIL)\n        register_service(ConsoleEmailService(), EmailService)  # Default\n\n@router.post(\"/notify\")\nasync def notify_user(\n    email_service: EmailService = Inject(EmailService)  # Gets environment-appropriate service\n):\n    return email_service.send_email(\"user@example.com\", \"Hello\", \"World\")\n</code></pre>"},{"location":"features/container-service/advanced/#advanced-factory-patterns","title":"Advanced Factory Patterns","text":""},{"location":"features/container-service/advanced/#factory-functions-with-dependencies","title":"Factory Functions with Dependencies","text":"<p>Create factories that inject other services during construction:</p> <pre><code>def create_payment_processor(\n    config: AppConfig = Inject(AppConfig),\n    logger: LoggerService = Inject(LoggerService),\n    db: DatabaseService = Inject(DatabaseService)\n) -&gt; PaymentProcessor:\n    \"\"\"Factory that configures payment processor based on environment.\"\"\"\n\n    if config.environment == \"production\":\n        processor = StripePaymentProcessor(\n            api_key=config.stripe_api_key,\n            logger=logger\n        )\n    else:\n        processor = MockPaymentProcessor(logger=logger)\n\n    # Common initialization\n    processor.setup_webhooks()\n    processor.register_event_handlers(db)\n\n    return processor\n\n# Register the factory\nregister_service(create_payment_processor, PaymentProcessor)\n\n# Use in endpoints\n@router.post(\"/payments\")\nasync def process_payment(\n    amount: float,\n    processor: PaymentProcessor = Inject(PaymentProcessor)\n):\n    return processor.charge(amount)\n</code></pre>"},{"location":"features/container-service/advanced/#conditional-service-creation","title":"Conditional Service Creation","text":"<pre><code>def create_notification_service(\n    config: AppConfig = Inject(AppConfig)\n) -&gt; NotificationService:\n    \"\"\"Create notification service with multiple channels based on config.\"\"\"\n\n    channels = []\n\n    if config.email_enabled:\n        channels.append(EmailNotificationChannel(config.smtp_host))\n\n    if config.sms_enabled:\n        channels.append(SMSNotificationChannel(config.twilio_key))\n\n    if config.slack_enabled:\n        channels.append(SlackNotificationChannel(config.slack_webhook))\n\n    return NotificationService(channels)\n\nregister_service(create_notification_service, NotificationService)\n</code></pre>"},{"location":"features/container-service/advanced/#service-lifecycle-management","title":"Service Lifecycle Management","text":""},{"location":"features/container-service/advanced/#startup-and-shutdown-hooks","title":"Startup and Shutdown Hooks","text":"<p>Manage service initialization and cleanup using FastAPI's lifespan system:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastedgy import FastEdgy\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Startup: initialize services\n\n    # Register services with complex initialization\n    database = DatabaseService(DATABASE_URL)\n    await database.connect()\n    register_service(database)\n\n    # Initialize background services\n    task_processor = TaskProcessor()\n    await task_processor.start()\n    register_service(task_processor)\n\n    # Register dependent services\n    register_service(UserService)  # Will use registered DatabaseService\n    register_service(EmailService)\n\n    try:\n        yield  # Application runs here\n    finally:\n        # Shutdown: cleanup services\n        db = get_service(DatabaseService)\n        await db.disconnect()\n\n        processor = get_service(TaskProcessor)\n        await processor.shutdown()\n\napp = FastEdgy(lifespan=lifespan)\n</code></pre>"},{"location":"features/container-service/advanced/#health-checks-and-monitoring","title":"Health Checks and Monitoring","text":"<pre><code>class HealthCheckService:\n    def __init__(self,\n                 db: DatabaseService,\n                 cache: CacheService,\n                 external_api: ExternalAPIService):\n        self.db = db\n        self.cache = cache\n        self.external_api = external_api\n\n    async def check_health(self):\n        checks = {}\n\n        # Database check\n        try:\n            await self.db.ping()\n            checks[\"database\"] = {\"status\": \"healthy\"}\n        except Exception as e:\n            checks[\"database\"] = {\"status\": \"unhealthy\", \"error\": str(e)}\n\n        # Cache check\n        try:\n            await self.cache.ping()\n            checks[\"cache\"] = {\"status\": \"healthy\"}\n        except Exception as e:\n            checks[\"cache\"] = {\"status\": \"unhealthy\", \"error\": str(e)}\n\n        # External API check\n        try:\n            await self.external_api.ping()\n            checks[\"external_api\"] = {\"status\": \"healthy\"}\n        except Exception as e:\n            checks[\"external_api\"] = {\"status\": \"unhealthy\", \"error\": str(e)}\n\n        return checks\n\n# Auto-resolved with all dependencies\n@router.get(\"/health\")\nasync def health_check(health: HealthCheckService = Inject(HealthCheckService)):\n    return await health.check_health()\n</code></pre>"},{"location":"features/container-service/advanced/#testing-and-mocking","title":"Testing and Mocking","text":""},{"location":"features/container-service/advanced/#service-override-for-testing","title":"Service Override for Testing","text":"<p>Replace real services with mocks during testing:</p> <pre><code>import pytest\nfrom unittest.mock import Mock\nfrom fastedgy.dependencies import register_service, unregister_service\n\nclass MockEmailService:\n    def __init__(self):\n        self.sent_emails = []\n\n    def send_email(self, to: str, subject: str, body: str):\n        email = {\"to\": to, \"subject\": subject, \"body\": body}\n        self.sent_emails.append(email)\n        return {\"sent\": True, \"id\": f\"mock-{len(self.sent_emails)}\"}\n\nclass MockDatabaseService:\n    def __init__(self):\n        self.data = {}\n        self.queries = []\n\n    def query(self, sql: str):\n        self.queries.append(sql)\n        return {\"mock\": \"result\"}\n\n    def create_user(self, user_data: dict):\n        user_id = len(self.data) + 1\n        user = {\"id\": user_id, **user_data}\n        self.data[user_id] = user\n        return user\n\n@pytest.fixture\ndef mock_services():\n    \"\"\"Replace services with mocks for testing.\"\"\"\n\n    # Create mocks\n    mock_email = MockEmailService()\n    mock_db = MockDatabaseService()\n\n    # Override services\n    register_service(mock_email, EmailService, force=True)\n    register_service(mock_db, DatabaseService, force=True)\n\n    yield {\n        \"email\": mock_email,\n        \"database\": mock_db\n    }\n\n    # Cleanup\n    unregister_service(EmailService)\n    unregister_service(DatabaseService)\n\ndef test_user_registration(mock_services):\n    \"\"\"Test user registration with mocked services.\"\"\"\n\n    # Test the endpoint\n    response = client.post(\"/register\", json={\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\"\n    })\n\n    assert response.status_code == 200\n\n    # Verify email was sent\n    assert len(mock_services[\"email\"].sent_emails) == 1\n    assert mock_services[\"email\"].sent_emails[0][\"to\"] == \"test@example.com\"\n\n    # Verify user was created\n    assert len(mock_services[\"database\"].data) == 1\n    assert mock_services[\"database\"].data[1][\"email\"] == \"test@example.com\"\n</code></pre>"},{"location":"features/container-service/advanced/#integration-testing-with-real-services","title":"Integration Testing with Real Services","text":"<pre><code>@pytest.fixture(scope=\"session\")\ndef test_database():\n    \"\"\"Create a test database for integration tests.\"\"\"\n\n    # Setup test database\n    test_db_url = \"postgresql://test:test@localhost/test_db\"\n    test_db = DatabaseService(test_db_url)\n\n    # Initialize schema\n    test_db.create_tables()\n\n    # Override the service\n    register_service(test_db, DatabaseService, force=True)\n\n    yield test_db\n\n    # Cleanup\n    test_db.drop_tables()\n    unregister_service(DatabaseService)\n\ndef test_user_service_integration(test_database):\n    \"\"\"Test UserService with real database.\"\"\"\n\n    user_service = get_service(UserService)  # Uses test database\n\n    # Test user creation\n    user = user_service.create_user({\n        \"email\": \"integration@test.com\",\n        \"name\": \"Integration Test\"\n    })\n\n    assert user[\"id\"] is not None\n    assert user[\"email\"] == \"integration@test.com\"\n\n    # Test user retrieval\n    retrieved_user = user_service.get_user(user[\"id\"])\n    assert retrieved_user[\"email\"] == \"integration@test.com\"\n</code></pre>"},{"location":"features/container-service/advanced/#testing-factory-services","title":"Testing Factory Services","text":"<pre><code>def test_payment_processor_factory():\n    \"\"\"Test that payment processor factory creates correct implementation.\"\"\"\n\n    # Test production configuration\n    prod_config = AppConfig()\n    prod_config.environment = \"production\"\n    prod_config.stripe_api_key = \"test_key\"\n\n    register_service(prod_config, AppConfig, force=True)\n\n    processor = get_service(PaymentProcessor)\n    assert isinstance(processor, StripePaymentProcessor)\n    assert processor.api_key == \"test_key\"\n\n    # Test development configuration\n    dev_config = AppConfig()\n    dev_config.environment = \"development\"\n\n    register_service(dev_config, AppConfig, force=True)\n\n    # Force recreation of payment processor\n    unregister_service(PaymentProcessor)\n\n    processor = get_service(PaymentProcessor)\n    assert isinstance(processor, MockPaymentProcessor)\n</code></pre>"},{"location":"features/container-service/advanced/#complex-dependency-scenarios","title":"Complex Dependency Scenarios","text":""},{"location":"features/container-service/advanced/#circular-dependencies-advanced-resolution","title":"Circular Dependencies (Advanced Resolution)","text":"<p>Handle circular dependencies with lazy loading:</p> <pre><code>from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from services.order_service import OrderService\n\nclass UserService:\n    def __init__(self, db: DatabaseService):\n        self.db = db\n        self._order_service = None\n\n    @property\n    def order_service(self) -&gt; 'OrderService':\n        if self._order_service is None:\n            from fastedgy.dependencies import get_service\n            from services.order_service import OrderService\n            self._order_service = get_service(OrderService)\n        return self._order_service\n\n    def get_user_orders(self, user_id: str):\n        return self.order_service.get_orders_for_user(user_id)\n\nclass OrderService:\n    def __init__(self, db: DatabaseService, user_service: UserService):\n        self.db = db\n        self.user_service = user_service\n\n    def create_order(self, order_data: dict):\n        user = self.user_service.get_user(order_data[\"user_id\"])\n        # Create order logic...\n</code></pre>"},{"location":"features/container-service/advanced/#dynamic-service-resolution","title":"Dynamic Service Resolution","text":"<pre><code>class ServiceRegistry:\n    \"\"\"Dynamic service locator for plugin-like architecture.\"\"\"\n\n    def __init__(self):\n        self.handlers = {}\n\n    def register_handler(self, event_type: str, handler_class: type):\n        self.handlers[event_type] = handler_class\n\n    def get_handler(self, event_type: str):\n        handler_class = self.handlers.get(event_type)\n        if not handler_class:\n            raise ValueError(f\"No handler registered for {event_type}\")\n\n        # Use Container Service to resolve handler dependencies\n        from fastedgy.dependencies import get_service\n        return get_service(handler_class)\n\n# Register dynamic service\nregister_service(ServiceRegistry())\n\n# Register event handlers\ndef setup_event_handlers():\n    registry = get_service(ServiceRegistry)\n\n    registry.register_handler(\"user.created\", UserCreatedHandler)\n    registry.register_handler(\"order.completed\", OrderCompletedHandler)\n    registry.register_handler(\"payment.failed\", PaymentFailedHandler)\n\nclass EventProcessor:\n    def __init__(self, registry: ServiceRegistry):\n        self.registry = registry\n\n    async def process_event(self, event_type: str, event_data: dict):\n        handler = self.registry.get_handler(event_type)  # Auto-resolved with dependencies\n        return await handler.handle(event_data)\n</code></pre>"},{"location":"features/container-service/advanced/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/container-service/advanced/#lazy-loading-services","title":"Lazy Loading Services","text":"<pre><code>class ExpensiveService:\n    \"\"\"Service with expensive initialization.\"\"\"\n\n    def __init__(self, config: AppConfig):\n        print(\"Initializing expensive service...\")\n        # Expensive initialization here\n        self.expensive_resource = self._load_expensive_resource()\n\n    def _load_expensive_resource(self):\n        # Simulate expensive operation\n        time.sleep(2)\n        return \"expensive resource\"\n\n# Don't register directly - use factory for lazy loading\ndef create_expensive_service(config: AppConfig = Inject(AppConfig)):\n    return ExpensiveService(config)\n\nregister_service(create_expensive_service, ExpensiveService)\n\n# Service is only created when first accessed\n@router.get(\"/expensive-operation\")\nasync def expensive_operation(\n    service: ExpensiveService = Inject(ExpensiveService)  # Created here if first time\n):\n    return service.expensive_resource\n</code></pre>"},{"location":"features/container-service/advanced/#caching-and-memoization","title":"Caching and Memoization","text":"<pre><code>from functools import lru_cache\n\nclass CacheService:\n    def __init__(self):\n        self._cache = {}\n\n    @lru_cache(maxsize=128)\n    def get_expensive_data(self, key: str):\n        # Expensive computation\n        return f\"expensive_result_for_{key}\"\n\n    def clear_cache(self):\n        self.get_expensive_data.cache_clear()\n\n# Singleton ensures cache is shared across requests\ncached_service: CacheService = Inject(CacheService)\n</code></pre>"},{"location":"features/container-service/advanced/#error-handling-and-debugging","title":"Error Handling and Debugging","text":""},{"location":"features/container-service/advanced/#service-registration-validation","title":"Service Registration Validation","text":"<pre><code>from contextlib import asynccontextmanager\nfrom fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import get_service\n\ndef validate_services():\n    \"\"\"Validate that all required services are properly registered.\"\"\"\n\n    required_services = [\n        DatabaseService,\n        EmailService,\n        CacheService,\n        PaymentProcessor\n    ]\n\n    missing_services = []\n\n    for service_class in required_services:\n        try:\n            get_service(service_class)\n        except LookupError:\n            missing_services.append(service_class.__name__)\n\n    if missing_services:\n        raise RuntimeError(f\"Missing required services: {missing_services}\")\n\n# Optional custom lifespan for service validation\n@asynccontextmanager\nasync def lifespan(app: FastEdgy):\n    setup_services()\n    validate_services()  # Ensure all services are available\n    yield\n\n# FastEdgy handles DB and core services automatically\napp = FastEdgy(\n    title=\"My App\",\n    lifespan=lifespan,  # Optional - only for custom validation logic\n)\n</code></pre>"},{"location":"features/container-service/advanced/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>class ServiceError(Exception):\n    \"\"\"Base exception for service-related errors.\"\"\"\n    pass\n\nclass ServiceConfigurationError(ServiceError):\n    \"\"\"Raised when a service is misconfigured.\"\"\"\n    pass\n\ndef create_database_service(config: AppConfig = Inject(AppConfig)):\n    \"\"\"Factory with error handling.\"\"\"\n\n    if not config.database_url:\n        raise ServiceConfigurationError(\n            \"DATABASE_URL is required but not configured\"\n        )\n\n    try:\n        return DatabaseService(config.database_url)\n    except Exception as e:\n        raise ServiceConfigurationError(f\"Failed to create database service: {e}\")\n\nregister_service(create_database_service, DatabaseService)\n</code></pre>"},{"location":"features/container-service/advanced/#next-steps","title":"Next Steps","text":"<p>This covers the advanced usage patterns. For implementation details and architectural information:</p> <p>Technical Details \u2192</p> <p>Or return to simpler guides:</p> <ul> <li>Getting Started \u2190</li> <li>User Guide \u2190</li> </ul>"},{"location":"features/container-service/advanced/#advanced-quick-reference","title":"Advanced Quick Reference","text":"<pre><code># Custom tokens\nPRIMARY_DB = Token[DatabaseService](\"primary\")\nregister_service(db_instance, PRIMARY_DB)\ndb: DatabaseService = Inject(PRIMARY_DB)\n\n# Factories with dependencies\ndef create_service(dep: DepService = Inject(DepService)):\n    return MyService(dep, custom_config)\nregister_service(create_service, MyService)\n\n# Testing overrides\nregister_service(mock_service, RealService, force=True)\n# ... run tests ...\nunregister_service(RealService)\n\n# Service validation\ntry:\n    service = get_service(MyService)\nexcept LookupError:\n    print(\"Service not registered\")\n</code></pre>"},{"location":"features/container-service/getting-started/","title":"Getting Started with Container Service","text":"<p>Get up and running with Container Service in 5 minutes. This guide covers the essentials you need to start using dependency injection in your FastAPI application.</p>"},{"location":"features/container-service/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>FastAPI application with FastEdgy</li> <li>Basic understanding of Python classes and FastAPI endpoints</li> </ul>"},{"location":"features/container-service/getting-started/#step-1-your-first-service","title":"Step 1: Your First Service","text":"<p>Let's create a simple email service:</p> <pre><code># services/email.py\nclass EmailService:\n    def __init__(self, smtp_host: str = \"localhost\"):\n        self.smtp_host = smtp_host\n\n    def send_email(self, to: str, subject: str, body: str):\n        print(f\"Sending email via {self.smtp_host} to {to}: {subject}\")\n        return {\"sent\": True, \"to\": to}\n</code></pre>"},{"location":"features/container-service/getting-started/#step-2-use-it-in-your-api","title":"Step 2: Use It in Your API","text":"<p>No registration needed - just inject it directly:</p> <pre><code># main.py\nfrom fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import Inject\nfrom services.email import EmailService\n\napp = FastEdgy()\n\n@app.post(\"/send-email\")\nasync def send_email(\n    recipient: str,\n    subject: str,\n    body: str,\n    email_service: EmailService = Inject(EmailService)  # Magic happens here!\n):\n    result = email_service.send_email(recipient, subject, body)\n    return result\n</code></pre> <p>That's it! The <code>EmailService</code> is automatically created with default parameters when first requested.</p>"},{"location":"features/container-service/getting-started/#step-3-custom-configuration-optional","title":"Step 3: Custom Configuration (Optional)","text":"<p>Need specific configuration? Register your service explicitly:</p> <pre><code># main.py\nfrom fastedgy.dependencies import register_service\n\n# Register with custom configuration\nemail_service = EmailService(\"smtp.company.com\")\nregister_service(email_service)\n\n# Now Inject(EmailService) returns your configured instance\n</code></pre>"},{"location":"features/container-service/getting-started/#step-4-services-with-dependencies","title":"Step 4: Services with Dependencies","text":"<p>Container Service automatically resolves dependency chains:</p> <pre><code># services/notification.py\nclass DatabaseService:\n    def __init__(self, connection_string: str = \"sqlite:///app.db\"):\n        self.connection_string = connection_string\n\n    def get_user_email(self, user_id: str):\n        return f\"user{user_id}@example.com\"\n\nclass NotificationService:\n    def __init__(self, email: EmailService, db: DatabaseService):\n        self.email = email\n        self.db = db\n\n    def notify_user(self, user_id: str, message: str):\n        user_email = self.db.get_user_email(user_id)\n        return self.email.send_email(user_email, \"Notification\", message)\n</code></pre> <p>Use it directly - no manual wiring needed:</p> <pre><code>@app.post(\"/notify/{user_id}\")\nasync def notify_user(\n    user_id: str,\n    message: str,\n    notifications: NotificationService = Inject(NotificationService)\n):\n    # NotificationService automatically gets EmailService and DatabaseService\n    result = notifications.notify_user(user_id, message)\n    return result\n</code></pre>"},{"location":"features/container-service/getting-started/#what-just-happened","title":"What Just Happened?","text":"<p>When you use <code>Inject(NotificationService)</code>, the Container Service:</p> <ol> <li>Analyzes the constructor: sees it needs <code>EmailService</code> and <code>DatabaseService</code></li> <li>Resolves <code>EmailService</code>: creates it with default parameters (or uses registered instance)</li> <li>Resolves <code>DatabaseService</code>: creates it with default parameters</li> <li>Creates <code>NotificationService</code> with both resolved dependencies</li> <li>Caches all instances as singletons for future use</li> </ol>"},{"location":"features/container-service/getting-started/#key-concepts","title":"Key Concepts","text":""},{"location":"features/container-service/getting-started/#automatic-resolution","title":"Automatic Resolution","text":"<p>Services with simple constructors (default parameters or dependencies) are created automatically on first use.</p>"},{"location":"features/container-service/getting-started/#explicit-registration","title":"Explicit Registration","text":"<p>Use <code>register_service()</code> when you need:</p> <ul> <li>Custom configuration (database URLs, API keys, etc.)</li> <li>Complex initialization logic</li> <li>Startup validation</li> </ul>"},{"location":"features/container-service/getting-started/#singleton-behavior","title":"Singleton Behavior","text":"<p>Services are created once and reused across all requests, perfect for database connections, caches, and configuration.</p>"},{"location":"features/container-service/getting-started/#common-patterns","title":"Common Patterns","text":""},{"location":"features/container-service/getting-started/#pattern-1-configuration-service","title":"Pattern 1: Configuration Service","text":"<pre><code>class AppConfig:\n    def __init__(self):\n        self.database_url = os.getenv(\"DATABASE_URL\", \"sqlite:///app.db\")\n        self.api_key = os.getenv(\"API_KEY\", \"dev-key\")\n\n# Auto-resolved - no registration needed\nconfig: AppConfig = Inject(AppConfig)\n</code></pre>"},{"location":"features/container-service/getting-started/#pattern-2-database-service","title":"Pattern 2: Database Service","text":"<pre><code>class DatabaseService:\n    def __init__(self, config: AppConfig):  # Depends on AppConfig\n        self.connection_string = config.database_url\n        # Connection logic here\n\n# Auto-resolved with AppConfig dependency\ndb: DatabaseService = Inject(DatabaseService)\n</code></pre>"},{"location":"features/container-service/getting-started/#pattern-3-explicit-registration","title":"Pattern 3: Explicit Registration","text":"<pre><code># For services needing specific setup\nredis_cache = CacheService(\"redis://production-cache:6379\")\nregister_service(redis_cache)\n\n# Now available everywhere\ncache: CacheService = Inject(CacheService)\n</code></pre>"},{"location":"features/container-service/getting-started/#next-steps","title":"Next Steps","text":"<p>You now know the basics! For more advanced usage:</p> <ul> <li>User Guide \u2192 Complete patterns and best practices</li> <li>Advanced Usage \u2192 Complex scenarios and testing</li> <li>Technical Details \u2192 How it works under the hood</li> </ul>"},{"location":"features/container-service/getting-started/#quick-reference","title":"Quick Reference","text":"<pre><code># Import essentials\nfrom fastedgy.dependencies import Inject, register_service, get_service\n\n# Auto-resolution (most common)\nservice: MyService = Inject(MyService)\n\n# Explicit registration\nregister_service(MyService(\"custom config\"))\n\n# Direct access (outside FastAPI context)\nservice = get_service(MyService)\n</code></pre> <p>Ready for more? Continue to User Guide \u2192</p>"},{"location":"features/container-service/guide/","title":"Container Service User Guide","text":"<p>Complete guide to using Container Service effectively in your FastAPI applications. This covers the patterns you'll use in everyday development.</p>"},{"location":"features/container-service/guide/#service-registration-patterns","title":"Service Registration Patterns","text":""},{"location":"features/container-service/guide/#pattern-1-auto-resolution-recommended","title":"Pattern 1: Auto-Resolution (Recommended)","text":"<p>For services with default constructors or simple dependencies:</p> <pre><code>class ConfigService:\n    def __init__(self):\n        self.database_url = os.getenv(\"DATABASE_URL\", \"postgresql://localhost/myapp\")\n        self.debug = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n\nclass DatabaseService:\n    def __init__(self, config: ConfigService):  # Auto-resolved dependency\n        self.connection_string = config.database_url\n\n# No registration needed - use directly\n@router.get(\"/health\")\nasync def health_check(db: DatabaseService = Inject(DatabaseService)):\n    return {\"status\": \"healthy\", \"database\": db.connection_string}\n</code></pre> <p>When to use: Services with environment variables, default configurations, or simple dependencies.</p>"},{"location":"features/container-service/guide/#pattern-2-explicit-instance-registration","title":"Pattern 2: Explicit Instance Registration","text":"<p>For services requiring specific configuration:</p> <pre><code># Register configured instances during app startup\nemail_service = EmailService(\n    smtp_host=\"smtp.company.com\",\n    username=\"noreply@company.com\",\n    password=os.getenv(\"EMAIL_PASSWORD\")\n)\nregister_service(email_service)\n\n# Use anywhere in your application\n@router.post(\"/welcome\")\nasync def send_welcome_email(\n    user_email: str,\n    email: EmailService = Inject(EmailService)\n):\n    return email.send_email(user_email, \"Welcome!\", \"Thanks for joining!\")\n</code></pre> <p>When to use: Database connections, external APIs, services with secrets/credentials.</p>"},{"location":"features/container-service/guide/#pattern-3-factory-functions","title":"Pattern 3: Factory Functions","text":"<p>For expensive or conditional service creation:</p> <pre><code>def create_cache_service():\n    if os.getenv(\"ENVIRONMENT\") == \"production\":\n        return RedisCache(\"redis://production-cache:6379\")\n    else:\n        return InMemoryCache()\n\n# Register the factory\nregister_service(create_cache_service, CacheService)\n\n# Service is created on first access\n@router.get(\"/cached-data\")\nasync def get_cached_data(cache: CacheService = Inject(CacheService)):\n    return cache.get(\"key\")  # Factory called here if first time\n</code></pre> <p>When to use: Environment-specific services, expensive initialization, conditional logic.</p>"},{"location":"features/container-service/guide/#working-with-fastapi","title":"Working with FastAPI","text":""},{"location":"features/container-service/guide/#standard-endpoint-usage","title":"Standard Endpoint Usage","text":"<p>Container Service integrates seamlessly with FastAPI's dependency system:</p> <pre><code>@router.post(\"/orders\")\nasync def create_order(\n    order_data: dict,\n    db: DatabaseService = Inject(DatabaseService),\n    email: EmailService = Inject(EmailService),\n    notifications: NotificationService = Inject(NotificationService)\n):\n    # All services automatically resolved and injected\n    order = db.create_order(order_data)\n    email.send_confirmation(order.user_email)\n    notifications.notify_user(order.user_id, \"Order created!\")\n    return order\n</code></pre>"},{"location":"features/container-service/guide/#mixing-with-fastapi-depends","title":"Mixing with FastAPI Depends()","text":"<p>You can mix Container Service with regular FastAPI dependencies:</p> <pre><code>from fastapi.security import HTTPBearer\n\nsecurity = HTTPBearer()\n\n@router.get(\"/protected\")\nasync def protected_endpoint(\n    token: str = Depends(security),  # Standard FastAPI dependency\n    user_service: UserService = Inject(UserService)  # Container Service\n):\n    user = user_service.get_user_from_token(token.credentials)\n    return {\"user\": user.username}\n</code></pre>"},{"location":"features/container-service/guide/#request-vs-application-scope","title":"Request vs Application Scope","text":"<p>Understanding when to use each:</p> <pre><code># Application-scoped (Container Service) - singletons\nclass DatabaseService:  # One instance for entire app\n    def __init__(self):\n        self.connection_pool = create_pool()\n\nclass ConfigService:  # Configuration doesn't change per request\n    def __init__(self):\n        self.settings = load_settings()\n\n# Request-scoped (FastAPI Depends) - created per request\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    return decode_token(token)  # Different user per request\n\ndef get_request_id():\n    return str(uuid.uuid4())  # Unique per request\n\n@router.get(\"/user-data\")\nasync def get_user_data(\n    current_user: User = Depends(get_current_user),  # Request-scoped\n    request_id: str = Depends(get_request_id),       # Request-scoped\n    db: DatabaseService = Inject(DatabaseService),   # App-scoped\n    config: ConfigService = Inject(ConfigService)    # App-scoped\n):\n    # Mix both patterns as needed\n</code></pre>"},{"location":"features/container-service/guide/#complex-dependency-chains","title":"Complex Dependency Chains","text":""},{"location":"features/container-service/guide/#shared-dependencies","title":"Shared Dependencies","text":"<p>When multiple services need the same dependency:</p> <pre><code>class ConfigService:\n    def __init__(self):\n        self.email_host = os.getenv(\"EMAIL_HOST\")\n        self.cache_url = os.getenv(\"CACHE_URL\")\n\nclass EmailService:\n    def __init__(self, config: ConfigService):\n        self.host = config.email_host\n\nclass CacheService:\n    def __init__(self, config: ConfigService):  # Same ConfigService instance\n        self.url = config.cache_url\n\nclass NotificationService:\n    def __init__(self, email: EmailService, cache: CacheService):\n        self.email = email\n        self.cache = cache\n\n# Auto-resolution creates this tree:\n# ConfigService (singleton)\n# \u251c\u2500\u2500 EmailService(config)\n# \u251c\u2500\u2500 CacheService(config)\n# \u2514\u2500\u2500 NotificationService(email, cache)\n</code></pre>"},{"location":"features/container-service/guide/#deep-dependency-trees","title":"Deep Dependency Trees","text":"<p>Container Service handles complex dependency graphs automatically:</p> <pre><code>class LoggerService:\n    def __init__(self, config: ConfigService):\n        self.level = config.log_level\n\nclass DatabaseService:\n    def __init__(self, config: ConfigService, logger: LoggerService):\n        self.connection = create_connection(config.database_url)\n        self.logger = logger\n\nclass UserService:\n    def __init__(self, db: DatabaseService, cache: CacheService):\n        self.db = db\n        self.cache = cache\n\nclass OrderService:\n    def __init__(self,\n                 user_service: UserService,\n                 email: EmailService,\n                 logger: LoggerService):\n        self.users = user_service\n        self.email = email\n        self.logger = logger\n\n# Just inject the top-level service - everything else resolves automatically\n@router.post(\"/orders\")\nasync def create_order(\n    order_data: dict,\n    orders: OrderService = Inject(OrderService)  # Entire tree resolved!\n):\n    return orders.create_order(order_data)\n</code></pre>"},{"location":"features/container-service/guide/#cross-context-usage","title":"Cross-Context Usage","text":""},{"location":"features/container-service/guide/#using-services-in-cli-commands","title":"Using Services in CLI Commands","text":"<p>Services work identically in CLI commands:</p> <pre><code>from fastedgy.cli import command\nfrom fastedgy.dependencies import get_service\n\n@command()\ndef send_bulk_emails():\n    \"\"\"CLI command to send bulk emails.\"\"\"\n    email_service = get_service(EmailService)  # Same instance as API\n    user_service = get_service(UserService)\n\n    users = user_service.get_all_users()\n    for user in users:\n        email_service.send_email(user.email, \"Newsletter\", \"Content...\")\n        print(f\"Sent to {user.email}\")\n</code></pre>"},{"location":"features/container-service/guide/#background-tasks","title":"Background Tasks","text":"<p>Same services available in background tasks:</p> <pre><code>from fastapi import BackgroundTasks\n\ndef send_welcome_email_task(user_email: str):\n    # Access services directly\n    email_service = get_service(EmailService)\n    template_service = get_service(TemplateService)\n\n    template = template_service.get_template(\"welcome\")\n    email_service.send_email(user_email, \"Welcome!\", template)\n\n@router.post(\"/register\")\nasync def register_user(\n    user_data: dict,\n    background_tasks: BackgroundTasks,\n    user_service: UserService = Inject(UserService)\n):\n    user = user_service.create_user(user_data)\n\n    # Schedule background task\n    background_tasks.add_task(send_welcome_email_task, user.email)\n\n    return {\"user_id\": user.id}\n</code></pre>"},{"location":"features/container-service/guide/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"features/container-service/guide/#development-vs-production-services","title":"Development vs Production Services","text":"<pre><code>import os\nfrom contextlib import asynccontextmanager\nfrom fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import register_service\n\ndef setup_services():\n    \"\"\"Configure services based on environment during startup.\"\"\"\n    env = os.getenv(\"ENVIRONMENT\", \"development\")\n\n    if env == \"production\":\n        # Production services\n        register_service(\n            DatabaseService(\"postgresql://prod-db:5432/app\"),\n            DatabaseService\n        )\n        register_service(\n            CacheService(\"redis://prod-cache:6379\"),\n            CacheService\n        )\n        register_service(\n            EmailService(smtp_host=\"smtp.mailgun.org\"),\n            EmailService\n        )\n    else:\n        # Development services\n        register_service(\n            DatabaseService(\"sqlite:///dev.db\"),\n            DatabaseService\n        )\n        register_service(InMemoryCache(), CacheService)\n        register_service(ConsoleEmailService(), EmailService)\n\n# Setup services during app startup (optional custom lifespan)\n@asynccontextmanager\nasync def lifespan(app: FastEdgy):\n    setup_services()\n    yield\n\n# FastEdgy handles DB and service lifecycle automatically\napp = FastEdgy(\n    title=\"My App\",\n    lifespan=lifespan,  # Optional - only needed for custom service setup\n)\n</code></pre>"},{"location":"features/container-service/guide/#configuration-classes","title":"Configuration Classes","text":"<pre><code>class DatabaseConfig:\n    def __init__(self):\n        self.url = os.getenv(\"DATABASE_URL\", \"sqlite:///app.db\")\n        self.pool_size = int(os.getenv(\"DB_POOL_SIZE\", \"5\"))\n        self.echo = os.getenv(\"DB_ECHO\", \"false\").lower() == \"true\"\n\nclass EmailConfig:\n    def __init__(self):\n        self.smtp_host = os.getenv(\"SMTP_HOST\", \"localhost\")\n        self.username = os.getenv(\"SMTP_USER\", \"\")\n        self.password = os.getenv(\"SMTP_PASSWORD\", \"\")\n\n# Use configuration classes in services\nclass DatabaseService:\n    def __init__(self, config: DatabaseConfig):  # Auto-injected\n        self.engine = create_engine(\n            config.url,\n            pool_size=config.pool_size,\n            echo=config.echo\n        )\n</code></pre>"},{"location":"features/container-service/guide/#error-handling-and-debugging","title":"Error Handling and Debugging","text":""},{"location":"features/container-service/guide/#common-issues","title":"Common Issues","text":"<p>Service Not Found Error: <pre><code># Error: No instance registered for &lt;class 'MyService'&gt;\n\n# Solution 1: Ensure service has default constructor or dependencies are registered\nclass MyService:\n    def __init__(self, config: ConfigService = None):  # Default parameter\n        self.config = config or ConfigService()\n\n# Solution 2: Register explicitly\nregister_service(MyService(\"custom config\"))\n</code></pre></p> <p>Circular Dependencies: <pre><code># Problem: ServiceA needs ServiceB, ServiceB needs ServiceA\nclass ServiceA:\n    def __init__(self, service_b: ServiceB):  # Circular!\n        self.service_b = service_b\n\nclass ServiceB:\n    def __init__(self, service_a: ServiceA):  # Circular!\n        self.service_a = service_a\n\n# Solution: Use factory pattern to break the cycle\ndef create_service_a(service_b: ServiceB = Inject(ServiceB)):\n    return ServiceA(service_b)\n\nregister_service(ServiceB())  # Register first\nregister_service(create_service_a, ServiceA)  # Register factory\n</code></pre></p>"},{"location":"features/container-service/guide/#debug-mode","title":"Debug Mode","text":"<p>Enable logging to see what's happening:</p> <pre><code>import logging\n\n# Enable debug logging\nlogging.getLogger('fastedgy.dependencies').setLevel(logging.DEBUG)\n\n# Now you'll see service creation and resolution steps\n</code></pre>"},{"location":"features/container-service/guide/#best-practices","title":"Best Practices","text":""},{"location":"features/container-service/guide/#1-keep-services-focused","title":"1. Keep Services Focused","text":"<pre><code># Good: Single responsibility\nclass EmailService:\n    def send_email(self, to: str, subject: str, body: str):\n        pass\n\nclass UserService:\n    def create_user(self, user_data: dict):\n        pass\n\n# Avoid: Swiss Army knife services\nclass MegaService:\n    def send_email(self, ...): pass\n    def create_user(self, ...): pass\n    def process_payment(self, ...): pass  # Too much!\n</code></pre>"},{"location":"features/container-service/guide/#2-use-type-hints","title":"2. Use Type Hints","text":"<pre><code># Good: Clear type hints help auto-resolution\nclass NotificationService:\n    def __init__(self, email: EmailService, logger: LoggerService):\n        self.email = email\n        self.logger = logger\n\n# Avoid: No type hints make resolution impossible\nclass NotificationService:\n    def __init__(self, email, logger):  # Can't auto-resolve\n        self.email = email\n        self.logger = logger\n</code></pre>"},{"location":"features/container-service/guide/#3-explicit-registration-for-complex-services","title":"3. Explicit Registration for Complex Services","text":"<pre><code># Good: Register complex services explicitly\ndatabase_service = DatabaseService(\n    connection_string=DATABASE_URL,\n    pool_size=20,\n    echo=DEBUG_MODE\n)\nregister_service(database_service)\n\n# Avoid: Complex constructors without defaults\nclass DatabaseService:\n    def __init__(self, connection_string, pool_size, echo):  # No defaults!\n        pass\n</code></pre>"},{"location":"features/container-service/guide/#performance-considerations","title":"Performance Considerations","text":""},{"location":"features/container-service/guide/#singleton-benefits","title":"Singleton Benefits","text":"<ul> <li>Services created once and reused</li> <li>Database connections pooled efficiently</li> <li>Configuration loaded once at startup</li> <li>Memory efficient for stateless services</li> </ul>"},{"location":"features/container-service/guide/#when-to-avoid-singletons","title":"When to Avoid Singletons","text":"<ul> <li>Services holding request-specific data</li> <li>Services that need to be reset between operations</li> <li>Testing scenarios requiring fresh instances</li> </ul>"},{"location":"features/container-service/guide/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage \u2192 - Testing, tokens, and complex patterns</li> <li>Technical Details \u2192 - Architecture and comparisons</li> <li>Getting Started \u2190 - Back to basics</li> </ul>"},{"location":"features/container-service/guide/#quick-reference-card","title":"Quick Reference Card","text":"<pre><code># Most common patterns\nfrom fastedgy.dependencies import Inject, register_service, get_service\n\n# 1. Auto-resolution (simplest)\nservice: MyService = Inject(MyService)\n\n# 2. Explicit registration (custom config)\nregister_service(MyService(\"config\"))\nservice: MyService = Inject(MyService)\n\n# 3. Factory registration (conditional)\nregister_service(create_my_service, MyService)\nservice: MyService = Inject(MyService)\n\n# 4. Direct access (outside FastAPI)\nservice = get_service(MyService)\n</code></pre>"},{"location":"features/container-service/overview/","title":"Container Service","text":"<p>A centralized dependency injection system that makes FastAPI development simpler by automatically managing service dependencies.</p>"},{"location":"features/container-service/overview/#why-container-service","title":"Why Container Service?","text":"<p>FastAPI's <code>Depends()</code> system is excellent for request-scoped dependencies. FastEdgy's Container Service builds on this foundation to simplify application-level services that live beyond individual requests.</p> <p>While FastAPI handles request-specific data beautifully, managing application services (databases, caches, email services) often requires repetitive provider functions:</p> <pre><code># FastAPI approach - works great but requires setup\ndef get_database():\n    return DatabaseService(\"postgresql://...\")\n\ndef get_email_service(db: DatabaseService = Depends(get_database)):\n    return EmailService(db)\n\n@app.post(\"/users\")\nasync def create_user(\n    user_data: dict,\n    db: DatabaseService = Depends(get_database),\n    email: EmailService = Depends(get_email_service)\n):\n    # Each service needs its provider function\n</code></pre> <p>Container Service adds a layer of convenience for these application services, automatically resolving their dependencies:</p> <pre><code># Container Service - built on FastAPI's foundation\nfrom fastedgy.dependencies import Inject\n\n@app.post(\"/users\")\nasync def create_user(\n    user_data: dict,\n    email: EmailService = Inject(EmailService)  # Auto-resolved!\n):\n    # Dependencies resolved automatically, no provider functions needed\n</code></pre>"},{"location":"features/container-service/overview/#key-benefits","title":"Key Benefits","text":"<ul> <li>Zero boilerplate - No provider functions needed</li> <li>Automatic resolution - Dependencies resolved recursively</li> <li>Application singletons - Services persist across requests</li> <li>Unified access - Same services in API, CLI, and background tasks</li> <li>Full FastAPI compatibility - Built on native dependency system</li> </ul>"},{"location":"features/container-service/overview/#quick-start","title":"Quick Start","text":"<p>New to Container Service? Start here:</p> <p>Get Started \u2192</p>"},{"location":"features/container-service/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p> Getting Started</p> <p>5-minute guide to your first Container Service setup</p> <p> Start here</p> </li> <li> <p> User Guide</p> <p>Complete guide for everyday usage patterns</p> <p> Learn more</p> </li> <li> <p> Advanced Usage</p> <p>Complex patterns, testing, and lifecycle management</p> <p> Advanced topics</p> </li> <li> <p> Technical Details</p> <p>Architecture, comparisons, and implementation details</p> <p> Technical info</p> </li> </ul>"},{"location":"features/container-service/overview/#when-to-use-container-service","title":"When to Use Container Service","text":"<p>Perfect for:</p> <ul> <li>Database connections and configurations</li> <li>Email services, caches, external APIs</li> <li>Services shared across endpoints</li> <li>Application-level singletons</li> </ul> <p>Not needed for:</p> <ul> <li>Simple request-scoped data</li> <li>FastAPI's built-in features (authentication, etc.)</li> <li>One-off utilities</li> </ul> <p>Get Started</p>"},{"location":"features/container-service/technical/","title":"Container Service Technical Details","text":"<p>Deep dive into the Container Service architecture, implementation details, and comparisons with other dependency injection systems.</p>"},{"location":"features/container-service/technical/#why-build-on-fastapi-instead-of-external-di-libraries","title":"Why Build on FastAPI Instead of External DI Libraries?","text":"<p>Popular Python dependency injection libraries like Dependency Injector and Injector offer powerful features, but FastEdgy's Container Service provides several advantages specifically for FastAPI applications.</p>"},{"location":"features/container-service/technical/#vs-dependency-injector","title":"vs Dependency Injector","text":"<p>Dependency Injector is feature-rich but introduces additional complexity and learning curve:</p> <p>FastEdgy Advantages: - Native FastAPI Integration: No conflicts between FastAPI's <code>Depends()</code> and external DI systems - Zero Additional Dependencies: Built on FastAPI's existing infrastructure - Simplified Learning Curve: Same patterns and syntax as FastAPI - Type Safety: Leverages FastAPI's existing type resolution without additional configuration - Automatic Resolution: Works out-of-the-box without complex container configuration files</p> <p>Dependency Injector Comparison: <pre><code># Dependency Injector approach - requires configuration\nfrom dependency_injector import containers, providers\n\nclass Container(containers.DeclarativeContainer):\n    config = providers.Configuration()\n\n    database = providers.Singleton(\n        DatabaseService,\n        connection_string=config.database_url\n    )\n\n    email_service = providers.Factory(\n        EmailService,\n        smtp_host=config.smtp_host\n    )\n\n# FastEdgy approach - zero configuration\nclass DatabaseService:\n    def __init__(self, config: AppConfig):  # Auto-resolved\n        self.connection_string = config.database_url\n\n# Just use it - no container setup needed\ndb: DatabaseService = Inject(DatabaseService)\n</code></pre></p>"},{"location":"features/container-service/technical/#vs-injector-google-guice-style","title":"vs Injector (Google Guice Style)","text":"<p>Injector provides clean dependency injection but requires a different mental model:</p> <p>FastEdgy Advantages: - Consistent API: Uses familiar FastAPI patterns rather than decorators like <code>@inject</code> - Request Context Compatibility: Seamlessly handles both application-level and request-scoped dependencies - No Learning Overhead: Developers already familiar with FastAPI can use it immediately - Unified Ecosystem: Everything works together - CLI, API endpoints, background tasks</p> <p>Injector Comparison: <pre><code># Injector approach - different patterns\nfrom injector import inject, Injector\n\nclass UserService:\n    @inject\n    def __init__(self, db: DatabaseService, email: EmailService):\n        self.db = db\n        self.email = email\n\ninjector = Injector()\nuser_service = injector.get(UserService)\n\n# FastEdgy approach - FastAPI-native\nclass UserService:\n    def __init__(self, db: DatabaseService, email: EmailService):\n        self.db = db\n        self.email = email\n\n# Works in FastAPI endpoints naturally\n@router.post(\"/users\")\nasync def create_user(service: UserService = Inject(UserService)):\n    return service.create_user(data)\n</code></pre></p>"},{"location":"features/container-service/technical/#the-fastedgy-philosophy","title":"The FastEdgy Philosophy","text":"<p>By building on FastAPI's native dependency system, FastEdgy ensures:</p> <ul> <li>One System: No conflicts or confusion between different DI approaches</li> <li>Full Compatibility: Works with all FastAPI features, middleware, and extensions</li> <li>Progressive Enhancement: Adds convenience without changing fundamental FastAPI patterns</li> <li>Maintenance: No external dependencies to maintain or version conflicts to resolve</li> </ul>"},{"location":"features/container-service/technical/#architecture-overview","title":"Architecture Overview","text":"<p>The Container Service is built around several core components that work together to provide dependency injection capabilities. At its heart is the <code>ContainerService</code> class which maintains a service registry, handles lazy loading, manages dependency resolution, and integrates with FastAPI's existing dependency system.</p>"},{"location":"features/container-service/technical/#key-concepts","title":"Key Concepts","text":"<ol> <li>Service Registry: A centralized store that maintains all registered services and their factory functions</li> <li>Lazy Loading: Services are instantiated only when first requested, not during registration</li> <li>Dependency Cache: Previously resolved dependencies are cached to improve performance on subsequent requests</li> <li>FastAPI Integration: Seamless compatibility with FastAPI's native dependency injection system</li> </ol>"},{"location":"features/container-service/technical/#registration-process","title":"Registration Process","text":"<p>The registration process intelligently adapts to different input types and handles each appropriately. When registering a direct instance, it's stored immediately in the service registry. For factory functions, the callable is stored and will be invoked on first access. For class registration, a wrapper function is created that automatically resolves the class's constructor dependencies using FastAPI's dependency resolution system, then instantiates the class with those resolved dependencies.</p>"},{"location":"features/container-service/technical/#dependency-resolution-process","title":"Dependency Resolution Process","text":"<p>The automatic dependency resolution follows these steps:</p> <ol> <li>Inspect Class: Analyze class constructor parameters using Python's type hints</li> <li>Resolve Dependencies: Use FastAPI's dependency system to resolve each parameter recursively</li> <li>Create Instance: Instantiate the class with resolved dependencies</li> <li>Cache Result: Store the instance as a singleton for future access</li> </ol>"},{"location":"features/container-service/technical/#integration-with-fastapi","title":"Integration with FastAPI","text":"<p>The <code>Inject()</code> function creates FastAPI-compatible dependencies that integrate seamlessly with the existing dependency system. When you use <code>Inject(MyService)</code> in an endpoint, it creates a standard FastAPI dependency that retrieves the container service and then gets the requested service from it.</p> <p>What makes this integration particularly powerful is that dependencies are shared between both systems rather than duplicated. Application-level services (like database connections, configuration, or caches) registered in the Container Service are the same instances accessed through FastAPI's native <code>Depends()</code> system. This ensures consistency, avoids resource duplication, and maintains proper singleton behavior across your entire application.</p>"},{"location":"features/container-service/technical/#implementation-details","title":"Implementation Details","text":""},{"location":"features/container-service/technical/#type-system-integration","title":"Type System Integration","text":"<p>The Container Service leverages Python's type system for automatic dependency resolution:</p> <pre><code># The Container Service analyzes this constructor\nclass NotificationService:\n    def __init__(self, email: EmailService, cache: CacheService, config: AppConfig):\n        #           ^^^^^^^^^^^^    ^^^^^^^^^^^^    ^^^^^^^^^^\n        #           |               |               |\n        #           These type hints drive automatic resolution\n</code></pre> <p>When resolving <code>NotificationService</code>, the system:</p> <ol> <li>Extracts parameter types: <code>EmailService</code>, <code>CacheService</code>, <code>AppConfig</code></li> <li>Recursively resolves each dependency</li> <li>Handles nested dependencies (e.g., if <code>EmailService</code> needs <code>AppConfig</code>)</li> <li>Creates instances in the correct order</li> <li>Caches all instances for reuse</li> </ol>"},{"location":"features/container-service/technical/#singleton-management","title":"Singleton Management","text":"<p>Services follow singleton behavior by default:</p> <ul> <li>First Access: Service is created and stored in the registry</li> <li>Subsequent Access: Same instance is returned from cache</li> <li>Thread Safety: Service creation is thread-safe for concurrent requests</li> <li>Memory Management: Services live for the application lifetime</li> </ul>"},{"location":"features/container-service/technical/#error-handling","title":"Error Handling","text":"<p>The Container Service provides clear error messages for common issues:</p> <pre><code># Missing dependency\ntry:\n    service = get_service(UnconfiguredService)\nexcept LookupError as e:\n    # Error: No instance registered for &lt;class 'UnconfiguredService'&gt;\n\n# Circular dependency detection\ntry:\n    service = get_service(CircularService)\nexcept Exception as e:\n    # Error: Circular dependency detected in ServiceA -&gt; ServiceB -&gt; ServiceA\n</code></pre>"},{"location":"features/container-service/technical/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"features/container-service/technical/#service-creation-overhead","title":"Service Creation Overhead","text":"<ul> <li>Registration: O(1) - services stored in dictionary</li> <li>First Resolution: O(n) where n = dependency depth</li> <li>Subsequent Access: O(1) - cached instances returned</li> <li>Memory: Minimal overhead, services created only when needed</li> </ul>"},{"location":"features/container-service/technical/#comparison-with-fastapi-native","title":"Comparison with FastAPI Native","text":"<pre><code># FastAPI native - function called on every request\ndef get_database():\n    return DatabaseService(\"postgresql://...\")  # Created each time\n\n@router.get(\"/users\")\nasync def get_users(db: DatabaseService = Depends(get_database)):\n    pass  # db is recreated for each request\n\n# Container Service - singleton created once\n@router.get(\"/users\")\nasync def get_users(db: DatabaseService = Inject(DatabaseService)):\n    pass  # db is reused across all requests\n</code></pre> <p>Performance Benefits: - Reduced Memory: No duplicate service instances - Faster Response Times: No service recreation per request - Connection Pooling: Database connections properly shared - Stateful Services: Can maintain caches and state efficiently</p>"},{"location":"features/container-service/technical/#advanced-internals","title":"Advanced Internals","text":""},{"location":"features/container-service/technical/#dependency-graph-resolution","title":"Dependency Graph Resolution","text":"<p>The Container Service builds a dependency graph and resolves it in topological order:</p> <pre><code>AppConfig (leaf)\n\u251c\u2500\u2500 DatabaseService(config)\n\u251c\u2500\u2500 EmailService(config)\n\u2514\u2500\u2500 NotificationService(email, database)\n</code></pre> <p>Resolution order: <code>AppConfig</code> \u2192 <code>DatabaseService</code> + <code>EmailService</code> \u2192 <code>NotificationService</code></p>"},{"location":"features/container-service/technical/#lazy-evaluation-strategy","title":"Lazy Evaluation Strategy","text":"<p>Services use lazy evaluation for optimal performance:</p> <ol> <li>Registration Phase: Only metadata is stored</li> <li>First Access: Dependency graph is built and resolved</li> <li>Instance Creation: Services created in dependency order</li> <li>Caching: Instances cached for future access</li> </ol>"},{"location":"features/container-service/technical/#memory-management","title":"Memory Management","text":"<p>The Container Service is designed for long-running applications:</p> <ul> <li>Service Instances: Held as strong references (singletons)</li> <li>Dependency Cache: Cleared on application shutdown</li> <li>Factory Functions: Garbage collected after first execution</li> <li>Type Metadata: Minimal memory footprint</li> </ul>"},{"location":"features/container-service/technical/#testing-integration","title":"Testing Integration","text":""},{"location":"features/container-service/technical/#service-isolation","title":"Service Isolation","text":"<p>The Container Service supports test isolation through service override:</p> <pre><code># Production code\nregister_service(ProductionEmailService())\n\n# Test code\nregister_service(MockEmailService(), EmailService, force=True)\n# All subsequent Inject(EmailService) returns mock\n\n# Test cleanup\nunregister_service(EmailService)\n</code></pre>"},{"location":"features/container-service/technical/#dependency-mocking","title":"Dependency Mocking","text":"<p>Complex services can be partially mocked:</p> <pre><code># Mock only the database, keep other services real\nclass TestDatabaseService:\n    def __init__(self):\n        self.data = {}  # In-memory storage for tests\n\n    def query(self, sql: str):\n        # Test-specific implementation\n        pass\n\nregister_service(TestDatabaseService(), DatabaseService, force=True)\n\n# UserService automatically gets the test database\nuser_service = get_service(UserService)  # Uses TestDatabaseService\n</code></pre>"},{"location":"features/container-service/technical/#debugging-and-introspection","title":"Debugging and Introspection","text":""},{"location":"features/container-service/technical/#service-registry-inspection","title":"Service Registry Inspection","text":"<pre><code>from fastedgy.dependencies import get_container_service\n\ncontainer = get_container_service()\n\n# Check if service is registered\nif container.has(DatabaseService):\n    print(\"DatabaseService is registered\")\n\n# List all registered services (for debugging)\nfor key in container._map:  # Internal access for debugging only\n    print(f\"Registered: {key}\")\n</code></pre>"},{"location":"features/container-service/technical/#dependency-tracing","title":"Dependency Tracing","text":"<p>Enable debug logging to trace dependency resolution:</p> <pre><code>import logging\n\n# Enable detailed logging\nlogging.getLogger('fastedgy.dependencies').setLevel(logging.DEBUG)\n\n# Now see resolution steps\nservice = get_service(ComplexService)\n# DEBUG: Resolving ComplexService\n# DEBUG: Resolving dependency EmailService\n# DEBUG: Resolving dependency DatabaseService\n# DEBUG: Creating ComplexService instance\n# DEBUG: Caching ComplexService\n</code></pre>"},{"location":"features/container-service/technical/#best-practices-for-large-applications","title":"Best Practices for Large Applications","text":""},{"location":"features/container-service/technical/#service-organization","title":"Service Organization","text":"<pre><code># services/\n#   core/\n#     database.py      # DatabaseService\n#     config.py        # AppConfig\n#     logging.py       # LoggerService\n#   business/\n#     users.py         # UserService\n#     orders.py        # OrderService\n#     payments.py      # PaymentService\n#   external/\n#     email.py         # EmailService\n#     notifications.py # NotificationService\n</code></pre>"},{"location":"features/container-service/technical/#service-registration-strategy","title":"Service Registration Strategy","text":"<pre><code># config/services.py\ndef register_core_services():\n    \"\"\"Register foundational services first.\"\"\"\n    register_service(AppConfig())\n    register_service(LoggerService)\n    register_service(DatabaseService)\n\ndef register_business_services():\n    \"\"\"Register business logic services.\"\"\"\n    register_service(UserService)\n    register_service(OrderService)\n    register_service(PaymentService)\n\ndef register_external_services():\n    \"\"\"Register external integrations.\"\"\"\n    register_service(create_email_service, EmailService)\n    register_service(create_notification_service, NotificationService)\n\n# app/main.py\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Register in dependency order\n    register_core_services()\n    register_business_services()\n    register_external_services()\n    yield\n</code></pre>"},{"location":"features/container-service/technical/#monitoring-and-health-checks","title":"Monitoring and Health Checks","text":"<pre><code>class ServiceHealthCheck:\n    \"\"\"Monitor service health and dependencies.\"\"\"\n\n    def __init__(self):\n        self.container = get_container_service()\n\n    def check_service_health(self):\n        health_status = {}\n\n        critical_services = [\n            DatabaseService,\n            CacheService,\n            EmailService\n        ]\n\n        for service_type in critical_services:\n            try:\n                service = get_service(service_type)\n                if hasattr(service, 'ping'):\n                    await service.ping()\n                health_status[service_type.__name__] = \"healthy\"\n            except Exception as e:\n                health_status[service_type.__name__] = f\"unhealthy: {e}\"\n\n        return health_status\n</code></pre>"},{"location":"features/container-service/technical/#migration-from-other-di-systems","title":"Migration from Other DI Systems","text":""},{"location":"features/container-service/technical/#from-manual-dependencies","title":"From Manual Dependencies","text":"<pre><code># Before: Manual dependency management\nclass UserService:\n    def __init__(self):\n        self.db = DatabaseService(DATABASE_URL)\n        self.email = EmailService(SMTP_HOST)\n        self.logger = LoggerService(LOG_LEVEL)\n\n# After: Automatic dependency injection\nclass UserService:\n    def __init__(self,\n                 db: DatabaseService,\n                 email: EmailService,\n                 logger: LoggerService):\n        self.db = db\n        self.email = email\n        self.logger = logger\n</code></pre>"},{"location":"features/container-service/technical/#from-fastapi-depends","title":"From FastAPI Depends()","text":"<pre><code># Before: Verbose FastAPI dependencies\ndef get_database():\n    return DatabaseService(DATABASE_URL)\n\ndef get_user_service(db: DatabaseService = Depends(get_database)):\n    return UserService(db)\n\n@router.get(\"/users\")\nasync def get_users(service: UserService = Depends(get_user_service)):\n    pass\n\n# After: Clean Container Service\n@router.get(\"/users\")\nasync def get_users(service: UserService = Inject(UserService)):\n    pass  # UserService and DatabaseService auto-resolved\n</code></pre>"},{"location":"features/container-service/technical/#performance-tuning","title":"Performance Tuning","text":""},{"location":"features/container-service/technical/#service-creation-optimization","title":"Service Creation Optimization","text":"<pre><code># Expensive service initialization\nclass MLModelService:\n    def __init__(self, config: AppConfig):\n        # Load large ML model - expensive!\n        self.model = load_model(config.model_path)\n\n# Optimize with factory and caching\n@lru_cache(maxsize=1)\ndef create_ml_model(config: AppConfig = Inject(AppConfig)):\n    return MLModelService(config)\n\nregister_service(create_ml_model, MLModelService)\n</code></pre>"},{"location":"features/container-service/technical/#memory-usage-monitoring","title":"Memory Usage Monitoring","text":"<pre><code>import sys\nimport gc\n\ndef monitor_service_memory():\n    \"\"\"Monitor memory usage of registered services.\"\"\"\n    container = get_container_service()\n\n    total_size = 0\n    service_sizes = {}\n\n    for key, instance in container._map.items():\n        if not callable(instance):  # Skip factories\n            size = sys.getsizeof(instance)\n            service_sizes[key] = size\n            total_size += size\n\n    print(f\"Total service memory: {total_size} bytes\")\n    for service, size in service_sizes.items():\n        print(f\"  {service}: {size} bytes\")\n</code></pre>"},{"location":"features/container-service/technical/#conclusion","title":"Conclusion","text":"<p>The Container Service provides a powerful, FastAPI-native approach to dependency injection that maintains simplicity while offering advanced features. By building on FastAPI's existing infrastructure rather than introducing external dependencies, it ensures seamless integration and optimal performance for FastAPI applications.</p>"},{"location":"features/container-service/technical/#quick-reference","title":"Quick Reference","text":""},{"location":"features/container-service/technical/#core-functions","title":"Core Functions","text":"<pre><code># Service registration\nregister_service(instance)                    # Auto-key from type\nregister_service(instance, CustomKey)         # Custom key\nregister_service(factory_fn, ServiceType)     # Factory registration\n\n# Service access\nservice = get_service(ServiceType)            # Direct access\nservice: ServiceType = Inject(ServiceType)    # FastAPI injection\n\n# Service management\nunregister_service(ServiceType)              # Remove service\nhas_service(ServiceType)                     # Check existence\n</code></pre>"},{"location":"features/container-service/technical/#advanced-features","title":"Advanced Features","text":"<pre><code># Custom tokens\nTOKEN = Token[ServiceType](\"name\")\nregister_service(instance, TOKEN)\nservice = Inject(TOKEN)\n\n# Service override (testing)\nregister_service(mock, RealService, force=True)\n\n# Container access (debugging)\ncontainer = get_container_service()\ncontainer.clear_cache()\n</code></pre>"},{"location":"features/email/guide/","title":"Email - Usage guide","text":"<p>This guide provides practical examples for sending emails in your FastEdgy application.</p>"},{"location":"features/email/guide/#configuration","title":"Configuration","text":"<p>First, configure your SMTP settings in your environment file (<code>.env</code>):</p> <pre><code>SMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your-email@gmail.com\nSMTP_PASSWORD=your-app-password\nSMTP_DEFAULT_FROM=no-reply@yourapp.com\nSMTP_USE_TLS=true\n</code></pre>"},{"location":"features/email/guide/#basic-email-sending","title":"Basic email sending","text":""},{"location":"features/email/guide/#using-the-mail-service","title":"Using the Mail service","text":"<pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.mail import Mail\nfrom email.message import EmailMessage\n\nasync def send_simple_email(mail: Mail = Inject(Mail)):\n\n    # Create email message\n    email = EmailMessage()\n    email[\"To\"] = \"user@example.com\"\n    email[\"Subject\"] = \"Hello from FastEdgy\"\n    email.set_content(\"This is a plain text email.\")\n\n    # Send it\n    await mail.send(email)\n</code></pre>"},{"location":"features/email/guide/#using-in-api-endpoints","title":"Using in API endpoints","text":"<pre><code>from fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.mail import Mail\nfrom fastapi import BackgroundTasks\n\napp = FastEdgy()\n\nasync def send_email_background(\n    recipient: str,\n    subject: str,\n    message: str,\n    mail: Mail = Inject(Mail)\n):\n    \"\"\"Background task to send email.\"\"\"\n    from email.message import EmailMessage\n\n    email_msg = EmailMessage()\n    email_msg[\"To\"] = recipient\n    email_msg[\"Subject\"] = subject\n    email_msg.set_content(message)\n\n    await mail.send(email_msg)\n\n@app.post(\"/send-notification\")\nasync def send_notification(\n    email: str,\n    message: str,\n    background_tasks: BackgroundTasks\n):\n    # Add email sending to background tasks\n    background_tasks.add_task(\n        send_email_background,\n        email,\n        \"Notification\",\n        message\n    )\n\n    # Return immediately without waiting for email\n    return {\"status\": \"queued\", \"message\": \"Notification will be sent shortly\"}\n</code></pre>"},{"location":"features/email/guide/#template-based-emails","title":"Template-based emails","text":""},{"location":"features/email/guide/#create-your-template","title":"Create your template","text":"<p>Create a template file in <code>templates/en/welcome.html</code>:</p> <pre><code>{% block subject %}Welcome to {{ app_name }}, {{ user_name }}!{% endblock %}\n\n{% block body_html %}\n&lt;div style=\"font-family: Arial, sans-serif;\"&gt;\n    &lt;h1&gt;Welcome {{ user_name }}!&lt;/h1&gt;\n    &lt;p&gt;Thank you for joining &lt;strong&gt;{{ app_name }}&lt;/strong&gt;.&lt;/p&gt;\n    &lt;p&gt;Your account is now active and ready to use.&lt;/p&gt;\n    &lt;a href=\"{{ login_url }}\" style=\"background-color: #007cba; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\"&gt;\n        Login Now\n    &lt;/a&gt;\n&lt;/div&gt;\n{% endblock %}\n\n{% block body_text %}\nWelcome {{ user_name }}!\n\nThank you for joining {{ app_name }}.\nYour account is now active and ready to use.\n\nLogin: {{ login_url }}\n{% endblock %}\n</code></pre>"},{"location":"features/email/guide/#send-templated-email","title":"Send templated email","text":"<pre><code>async def send_welcome_email(\n    user_email: str,\n    user_name: str,\n    mail: Mail = Inject(Mail)\n):\n    await mail.send_template(\n        template_name=\"welcome\",\n        tpl_vals={\n            \"user_name\": user_name,\n            \"app_name\": \"My Awesome App\",\n            \"login_url\": \"https://myapp.com/login\"\n        },\n        email_parts={\"To\": user_email}\n    )\n</code></pre>"},{"location":"features/email/guide/#background-templated-emails","title":"Background templated emails","text":"<p>Perfect for user registration workflows:</p> <pre><code>from fastapi import BackgroundTasks\nfrom pydantic import BaseModel\n\nclass UserRegistration(BaseModel):\n    email: str\n    username: str\n    full_name: str\n\nasync def send_welcome_email_background(\n    user_email: str,\n    user_name: str,\n    mail: Mail = Inject(Mail)\n):\n    \"\"\"Send welcome email in background.\"\"\"\n    await mail.send_template(\n        template_name=\"auth/welcome\",\n        tpl_vals={\n            \"user_name\": user_name,\n            \"app_name\": \"My Awesome App\",\n            \"login_url\": \"https://myapp.com/login\"\n        },\n        email_parts={\"To\": user_email}\n    )\n\n@app.post(\"/register\")\nasync def register_user(\n    user_data: UserRegistration,\n    background_tasks: BackgroundTasks\n):\n    # 1. Create user in database (fast)\n    # user = await create_user(user_data)\n\n    # 2. Send welcome email in background (slow)\n    background_tasks.add_task(\n        send_welcome_email_background,\n        user_data.email,\n        user_data.full_name\n    )\n\n    # 3. Return immediately\n    return {\n        \"message\": \"User registered successfully\",\n        \"status\": \"welcome_email_queued\"\n    }\n</code></pre> <p>Back to Overview</p>"},{"location":"features/email/overview/","title":"Email","text":"<p>FastEdgy provides a built-in Email service for sending templated emails via SMTP. It handles both HTML and plain text formats with automatic conversion and Jinja2 template rendering.</p>"},{"location":"features/email/overview/#key-features","title":"Key features","text":"<ul> <li>SMTP support: Send emails via any SMTP server (Gmail, SendGrid, etc.)</li> <li>Jinja2 templates: Create dynamic email templates with variables</li> <li>Multi-format: Automatic HTML to plain text conversion</li> <li>Async delivery: Non-blocking email sending</li> <li>Template structure: Organized templates with subject, HTML, and text parts</li> <li>Configuration-driven: Environment-based SMTP settings</li> </ul>"},{"location":"features/email/overview/#how-it-works","title":"How it works","text":"<p>The Email service loads templates from your <code>templates/</code> directory and renders them with provided variables. Each template can have three parts:</p> <ul> <li>Subject: <code>{% block subject %}Your subject here{% endblock %}</code></li> <li>HTML body: <code>{% block body_html %}HTML content{% endblock %}</code></li> <li>Text body: <code>{% block body_text %}Plain text content{% endblock %}</code></li> </ul> <p>If you only provide HTML, the text version is automatically generated.</p>"},{"location":"features/email/overview/#basic-example","title":"Basic example","text":"<pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.mail import Mail\n\nasync def send_welcome_email(\n    user_email: str,\n    user_name: str,\n    mail: Mail = Inject(Mail)\n):\n    await mail.send_template(\n        template_name=\"welcome\",\n        tpl_vals={\"name\": user_name},\n        email_parts={\"To\": user_email}\n    )\n</code></pre>"},{"location":"features/email/overview/#template-structure","title":"Template structure","text":"<pre><code>templates/\n\u2514\u2500\u2500 en/\n    \u2514\u2500\u2500 welcome.html\n</code></pre> <pre><code>&lt;!-- templates/en/welcome.html --&gt;\n{% block subject %}Welcome, {{ name }}!{% endblock %}\n\n{% block body_html %}\n&lt;h1&gt;Welcome {{ name }}!&lt;/h1&gt;\n&lt;p&gt;Thank you for joining our platform.&lt;/p&gt;\n{% endblock %}\n\n{% block body_text %}\nWelcome {{ name }}!\nThank you for joining our platform.\n{% endblock %}\n</code></pre>"},{"location":"features/email/overview/#configuration","title":"Configuration","text":"<p>Set these environment variables:</p> <ul> <li><code>SMTP_HOST</code>: Your SMTP server (e.g., smtp.gmail.com)</li> <li><code>SMTP_PORT</code>: SMTP port (default: 587)</li> <li><code>SMTP_USERNAME</code>: SMTP username</li> <li><code>SMTP_PASSWORD</code>: SMTP password</li> <li><code>SMTP_DEFAULT_FROM</code>: Default sender email</li> <li><code>SMTP_USE_TLS</code>: Enable TLS (default: true)</li> </ul>"},{"location":"features/email/overview/#use-cases","title":"Use cases","text":"<ul> <li>User registration: Welcome emails and account confirmations</li> <li>Password reset: Secure password reset links</li> <li>Notifications: Order confirmations, status updates</li> <li>Marketing: Newsletters and promotional emails</li> </ul>"},{"location":"features/email/overview/#get-started","title":"Get started","text":"<p>Ready to send your first email? Learn how to set up and use the Email service:</p> <p>Usage Guide</p>"},{"location":"features/fields-selector/guide/","title":"Fields Selector - Usage guide","text":""},{"location":"features/fields-selector/guide/#basic-syntax","title":"Basic syntax","text":"<pre><code># Comma-separated field list\nGET /api/products/\nX-Fields: name,price,description,is_active\n</code></pre>"},{"location":"features/fields-selector/guide/#special-operators","title":"Special operators","text":"Operator Description Example <code>+</code> Include all fields <code>+</code> <code>field.nested</code> Access nested relation <code>category.name</code>"},{"location":"features/fields-selector/guide/#selection-patterns","title":"Selection patterns","text":""},{"location":"features/fields-selector/guide/#simple-fields","title":"Simple fields","text":"<pre><code>GET /api/users/\nX-Fields: username,email,created_at\n</code></pre>"},{"location":"features/fields-selector/guide/#nested-relations","title":"Nested relations","text":"<pre><code>GET /api/products/\nX-Fields: name,price,category.name,category.parent.name\n</code></pre>"},{"location":"features/fields-selector/guide/#all-fields","title":"All fields","text":"<pre><code>GET /api/products/\nX-Fields: +\n</code></pre>"},{"location":"features/fields-selector/guide/#mixed-selection","title":"Mixed selection","text":"<pre><code>GET /api/products/\nX-Fields: +,category.name,category.description\n</code></pre>"},{"location":"features/fields-selector/guide/#query-optimization","title":"Query optimization","text":"<p>Fields Selector automatically optimizes database queries:</p> <ul> <li>Relations: Adds <code>select_related()</code> for dot notation fields</li> <li>Joins: Prevents N+1 query problems</li> <li>Columns: Reduces selected columns when possible</li> </ul>"},{"location":"features/fields-selector/guide/#response-format","title":"Response format","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Laptop\",\n  \"price\": 999.99,\n  \"category\": {\n    \"id\": 5,\n    \"name\": \"Electronics\"\n  }\n}\n</code></pre>"},{"location":"features/fields-selector/guide/#error-handling","title":"Error handling","text":"<ul> <li>Invalid fields: Silently ignored</li> <li>Missing relations: Returns null</li> <li>Malformed syntax: Falls back to all fields</li> </ul> <p>Back to Overview</p>"},{"location":"features/fields-selector/overview/","title":"Fields Selector","text":"<p>Control which fields are included in API responses using the <code>X-Fields</code> header. Reduces bandwidth and improves performance by returning only requested data.</p>"},{"location":"features/fields-selector/overview/#key-features","title":"Key features","text":"<ul> <li>Bandwidth reduction: Only return requested fields</li> <li>Dot notation: Access nested relationships (<code>category.name</code>)</li> <li>Query optimization: Automatically adds <code>select_related()</code> for relations</li> <li>Always includes ID: Primary key always returned for consistency</li> </ul>"},{"location":"features/fields-selector/overview/#use-cases","title":"Use cases","text":"<ul> <li>Mobile APIs: Reduce payload size for slower connections</li> <li>Dashboard views: Select only display-relevant fields</li> <li>Data export: Choose specific columns for reports</li> <li>Performance optimization: Minimize database column selection</li> </ul>"},{"location":"features/fields-selector/overview/#behavior","title":"Behavior","text":"<ul> <li>Missing fields: Silently ignored (no errors)</li> <li>Invalid syntax: Returns all fields as fallback</li> <li>Relations: Automatically optimized with database JOINs</li> <li>Arrays: Supports filtering nested collections</li> </ul> <p>Usage Guide</p>"},{"location":"features/i18n/guide/","title":"Internationalization - Usage guide","text":""},{"location":"features/i18n/guide/#basic-usage","title":"Basic usage","text":""},{"location":"features/i18n/guide/#mark-strings-for-translation","title":"Mark strings for translation","text":"<pre><code>from fastedgy import _t, _\n\n# Simple translation\nmessage = _t(\"Hello world\")\n\n# With parameters\ngreeting = _t(\"Hello {name}\", name=\"John\")\n\n# Using shorthand\nerror = _(\"User not found\")\n</code></pre>"},{"location":"features/i18n/guide/#in-pydantic-models","title":"In Pydantic models","text":"<pre><code>from pydantic import BaseModel\nfrom fastedgy import _t\n\nclass ErrorResponse(BaseModel):\n    message: str = _t(\"An error occurred\")\n    details: str = _t(\"Please try again later\")\n</code></pre>"},{"location":"features/i18n/guide/#in-fastapi-endpoints","title":"In FastAPI endpoints","text":"<pre><code>from fastapi import HTTPException\nfrom fastedgy import _t\n\nasync def get_user(user_id: int):\n    if not user:\n        raise HTTPException(\n            status_code=404,\n            detail=str(_t(\"User {id} not found\", id=user_id))\n        )\n</code></pre>"},{"location":"features/i18n/guide/#cli-commands","title":"CLI commands","text":""},{"location":"features/i18n/guide/#extract-translatable-strings","title":"Extract translatable strings","text":"<pre><code># Extract for all locales\nfastedgy trans extract\n\n# Extract for specific locale\nfastedgy trans extract fr\n\n# Extract for specific package\nfastedgy trans extract --package mypackage\n</code></pre>"},{"location":"features/i18n/guide/#initialize-new-locale","title":"Initialize new locale","text":"<pre><code># Create new translation file\nfastedgy trans init en\nfastedgy trans init fr --package mypackage\n</code></pre>"},{"location":"features/i18n/guide/#translation-workflow","title":"Translation workflow","text":""},{"location":"features/i18n/guide/#1-mark-strings-in-code","title":"1. Mark strings in code","text":"<p>Add <code>_t()</code> calls around user-facing strings throughout your application.</p>"},{"location":"features/i18n/guide/#2-extract-strings","title":"2. Extract strings","text":"<p>Run the extract command to scan your code and create/update .po files with found strings.</p>"},{"location":"features/i18n/guide/#3-translate-strings","title":"3. Translate strings","text":"<p>Edit the .po files to add translations for each language.</p>"},{"location":"features/i18n/guide/#4-test-translations","title":"4. Test translations","text":"<p>Start your application and test with different Accept-Language headers or locale settings.</p>"},{"location":"features/i18n/guide/#configuration","title":"Configuration","text":""},{"location":"features/i18n/guide/#available-locales","title":"Available locales","text":"<p>Configure supported languages in your settings:</p> <pre><code>class Settings(BaseSettings):\n    available_locales: list[str] = [\"en\", \"fr\", \"es\"]\n    fallback_locale: str = \"en\"\n</code></pre>"},{"location":"features/i18n/guide/#translation-directories","title":"Translation directories","text":"<p>Specify where translation files are located:</p> <pre><code>class Settings(BaseSettings):\n    translations_paths: list[str] = [\"translations/\"]\n</code></pre>"},{"location":"features/i18n/guide/#advanced-patterns","title":"Advanced patterns","text":""},{"location":"features/i18n/guide/#lazy-translation-in-models","title":"Lazy translation in models","text":"<pre><code>from fastedgy.orm import Model, fields\nfrom fastedgy import _t\n\nclass Category(Model):\n    name = fields.CharField(max_length=100)\n\n    @property\n    def display_name(self):\n        return str(_t(\"category.{slug}\", slug=self.slug))\n</code></pre>"},{"location":"features/i18n/guide/#context-aware-translations","title":"Context-aware translations","text":"<pre><code>def get_status_message(status: str, count: int):\n    if count == 1:\n        return _t(\"status.{status}.singular\", status=status)\n    else:\n        return _t(\"status.{status}.plural\", status=status, count=count)\n</code></pre>"},{"location":"features/i18n/guide/#template-translations","title":"Template translations","text":"<pre><code>from fastedgy import _t\n\n# Email template\nsubject = _t(\"Welcome {name}!\", name=user.name)\nbody = _t(\"Thanks for joining {site_name}.\", site_name=\"MyApp\")\n</code></pre>"},{"location":"features/i18n/guide/#file-format","title":"File format","text":"<p>Translation files use standard .po format:</p> <pre><code># translations/fr.po\nmsgid \"Hello world\"\nmsgstr \"Bonjour le monde\"\n\nmsgid \"Hello {name}\"\nmsgstr \"Bonjour {name}\"\n\nmsgid \"User not found\"\nmsgstr \"Utilisateur introuvable\"\n</code></pre>"},{"location":"features/i18n/guide/#testing-translations","title":"Testing translations","text":""},{"location":"features/i18n/guide/#set-locale-for-testing","title":"Set locale for testing","text":"<pre><code>from fastedgy.context import set_locale\n\n# In tests\nset_locale(\"fr\")\nassert str(_t(\"Hello world\")) == \"Bonjour le monde\"\n</code></pre>"},{"location":"features/i18n/guide/#http-headers","title":"HTTP headers","text":"<pre><code>curl -H \"Accept-Language: fr-FR,fr;q=0.9\" http://localhost:8000/api/users\n</code></pre> <p>Back to Overview</p>"},{"location":"features/i18n/overview/","title":"Internationalization","text":"<p>FastEdgy provides a complete internationalization system based on Babel, supporting multiple languages with automatic locale detection and translation management.</p>"},{"location":"features/i18n/overview/#key-features","title":"Key features","text":"<ul> <li>Babel-based: Uses industry-standard .po files for translations</li> <li>Automatic locale detection: Detects user language from Accept-Language header</li> <li>Multi-source support: Load translations from multiple packages and directories</li> <li>Lazy translation: Strings are translated at render time, not definition time</li> <li>CLI integration: Extract and manage translatable strings via CLI</li> <li>Parameter substitution: Support for dynamic values in translations</li> <li>Fallback system: Graceful degradation to fallback locale or original text</li> </ul>"},{"location":"features/i18n/overview/#how-it-works","title":"How it works","text":"<p>The system automatically detects the user's preferred language from HTTP headers, loads the appropriate translation catalog, and translates strings on-demand using the <code>_t()</code> function.</p>"},{"location":"features/i18n/overview/#translation-functions","title":"Translation functions","text":"<ul> <li><code>_t(message, **kwargs)</code>: Main translation function with parameter support</li> <li><code>_(message, **kwargs)</code>: Shorthand alias for <code>_t()</code></li> <li><code>TranslatableString</code>: Lazy translation object that renders when converted to string</li> </ul>"},{"location":"features/i18n/overview/#locale-detection","title":"Locale detection","text":"<p>FastEdgy automatically determines the user's locale by:</p> <ol> <li>Parsing the Accept-Language HTTP header</li> <li>Matching against available locales</li> <li>Falling back to configured default locale</li> </ol>"},{"location":"features/i18n/overview/#file-structure","title":"File structure","text":"<pre><code>project/\n\u251c\u2500\u2500 translations/\n\u2502   \u251c\u2500\u2500 en.po       # English translations\n\u2502   \u251c\u2500\u2500 fr.po       # French translations\n\u2502   \u2514\u2500\u2500 es.po       # Spanish translations\n\u2514\u2500\u2500 app/\n    \u2514\u2500\u2500 models.py   # Code with _t() calls\n</code></pre>"},{"location":"features/i18n/overview/#use-cases","title":"Use cases","text":"<ul> <li>Multi-language web applications: Serve content in user's preferred language</li> <li>API internationalization: Translate error messages and responses</li> <li>Admin interfaces: Localize backend interfaces for global teams</li> <li>Email templates: Send emails in recipient's language</li> </ul> <p>Usage Guide</p>"},{"location":"features/metadata-generator/guide/","title":"Metadata Generator - Usage guide","text":""},{"location":"features/metadata-generator/guide/#model-registration","title":"Model registration","text":""},{"location":"features/metadata-generator/guide/#automatic-registration","title":"Automatic registration","text":"<p>Models with <code>@api_route_model()</code> decorator are automatically registered for metadata generation.</p>"},{"location":"features/metadata-generator/guide/#manual-registration","title":"Manual registration","text":"<p>Use <code>@metadata_model()</code> decorator to register models without API routes.</p>"},{"location":"features/metadata-generator/guide/#registry-control","title":"Registry control","text":"<p>The MetadataModelRegistry manages which models expose their metadata and when they're processed.</p>"},{"location":"features/metadata-generator/guide/#metadata-structure","title":"Metadata structure","text":""},{"location":"features/metadata-generator/guide/#model-metadata","title":"Model metadata","text":"<p>Each registered model generates metadata containing:</p> <ul> <li>name: Snake_case model identifier</li> <li>label: Human-readable singular name</li> <li>label_plural: Human-readable plural name</li> <li>searchable: Whether model has searchable fields</li> <li>fields: Dictionary of field metadata</li> </ul>"},{"location":"features/metadata-generator/guide/#field-metadata","title":"Field metadata","text":"<p>Each model field produces metadata with:</p> <ul> <li>name: Field name</li> <li>label: Human-readable label</li> <li>type: Metadata field type (string, integer, boolean, etc.)</li> <li>readonly: Whether field can be modified</li> <li>required: Whether field is mandatory</li> <li>searchable: Whether field can be filtered</li> <li>filter_operators: Available query operators</li> <li>target: Related model name for relationships</li> </ul>"},{"location":"features/metadata-generator/guide/#field-type-mapping","title":"Field type mapping","text":"<p>The generator maps ORM field types to standardized metadata types:</p> <ul> <li>CharField/TextField \u2192 <code>string</code></li> <li>IntegerField \u2192 <code>integer</code></li> <li>BooleanField \u2192 <code>boolean</code></li> <li>DateTimeField \u2192 <code>datetime</code></li> <li>ForeignKey \u2192 <code>many2one</code> and <code>one2many</code> if <code>related_name</code> is defined</li> <li>ManyToMany \u2192 <code>many2many</code></li> <li>JSONField \u2192 <code>json</code></li> </ul>"},{"location":"features/metadata-generator/guide/#label-generation","title":"Label generation","text":""},{"location":"features/metadata-generator/guide/#model-labels","title":"Model labels","text":"<ul> <li>Class name: <code>ProductCategory</code> \u2192 <code>Product Category</code></li> <li>Custom labels: Override via <code>Meta.label</code> and <code>Meta.label_plural</code></li> </ul>"},{"location":"features/metadata-generator/guide/#field-labels","title":"Field labels","text":"<ul> <li>Field name: <code>created_at</code> \u2192 <code>Created at</code></li> <li>Custom labels: Override via field <code>label</code> parameter</li> </ul>"},{"location":"features/metadata-generator/guide/#api-endpoints","title":"API endpoints","text":""},{"location":"features/metadata-generator/guide/#list-all-metadata","title":"List all metadata","text":"<p><code>GET /api/dataset/metadatas</code> - Returns metadata for all registered models</p>"},{"location":"features/metadata-generator/guide/#metadata-format","title":"Metadata format","text":"<p>Responses follow the <code>MetadataModel</code> schema with consistent structure across all models.</p>"},{"location":"features/metadata-generator/guide/#integration-patterns","title":"Integration patterns","text":""},{"location":"features/metadata-generator/guide/#frontend-integration","title":"Frontend integration","text":"<p>Metadata enables dynamic frontend applications that adapt to model changes without code updates.</p>"},{"location":"features/metadata-generator/guide/#validation-integration","title":"Validation integration","text":"<p>Field metadata provides validation rules for both frontend and backend validation.</p>"},{"location":"features/metadata-generator/guide/#query-builder-integration","title":"Query builder integration","text":"<p>Filter operators metadata powers dynamic query interfaces.</p>"},{"location":"features/metadata-generator/guide/#form-generation-integration","title":"Form generation integration","text":"<p>Field metadata contains all information needed for automatic form generation.</p> <p>Back to Overview</p>"},{"location":"features/metadata-generator/overview/","title":"Metadata Generator","text":"<p>Automatically generates structured metadata for your Edgy ORM models, providing complete field information, validation rules, and relationship data for dynamic frontend applications.</p>"},{"location":"features/metadata-generator/overview/#what-it-generates","title":"What it generates","text":"<p>The Metadata Generator analyzes your models and produces comprehensive metadata including:</p> <ul> <li>Field information: Name, type, label, validation rules</li> <li>Data constraints: Required, readonly, default values</li> <li>Filter operators: Available query operators per field type</li> <li>Relationships: Foreign keys and related model references</li> <li>Labels: Human-readable field and model names</li> </ul>"},{"location":"features/metadata-generator/overview/#key-features","title":"Key features","text":"<ul> <li>Automatic discovery: Scans model fields and relationships</li> <li>Type mapping: Converts ORM field types to metadata types</li> <li>Label generation: Creates readable labels from field names</li> <li>Registry system: Control which models expose metadata</li> <li>API integration: Serves metadata via <code>/api/dataset/metadatas</code> endpoints</li> <li>Frontend ready: Structured for dynamic form/UI generation</li> </ul>"},{"location":"features/metadata-generator/overview/#use-cases","title":"Use cases","text":"<ul> <li>Dynamic forms: Generate forms automatically from model metadata</li> <li>Admin interfaces: Build generic CRUD interfaces</li> <li>API documentation: Self-documenting API schemas</li> <li>Frontend validation: Client-side validation rules</li> <li>Query builders: Dynamic filter interfaces</li> <li>Data catalogs: Explore available models and fields</li> </ul>"},{"location":"features/metadata-generator/overview/#architecture","title":"Architecture","text":"<p>Models are registered with the Metadata Generator registry, which analyzes their structure and generates standardized metadata objects. This metadata is then exposed through API endpoints for frontend consumption.</p> <p>Usage Guide</p>"},{"location":"features/multi-tenant/guide/","title":"Multi Tenant - Usage guide","text":""},{"location":"features/multi-tenant/guide/#using-workspaceablemixin","title":"Using WorkspaceableMixin","text":""},{"location":"features/multi-tenant/guide/#add-workspace-support-to-models","title":"Add workspace support to models","text":"<p>The simplest way to make a model workspace-aware is to use the <code>WorkspaceableMixin</code>:</p> <pre><code>from fastedgy.orm import Model, fields\nfrom fastedgy.models.mixins import WorkspaceableMixin\nfrom fastedgy.models.base import BaseModel\n\nclass Product(BaseModel, WorkspaceableMixin):\n    name = fields.CharField(max_length=100)\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        tablename = \"products\"\n</code></pre>"},{"location":"features/multi-tenant/guide/#automatic-workspace-assignment","title":"Automatic workspace assignment","text":"<p>Models with <code>WorkspaceableMixin</code> automatically get assigned to the current workspace:</p> <ul> <li>Workspace field: Foreign key relationship added automatically</li> <li>Context-aware saves: Records saved to the current workspace context</li> <li>Filtered queries: Default queries only return workspace-specific records</li> </ul>"},{"location":"features/multi-tenant/guide/#workspace-managers","title":"Workspace managers","text":"<p>FastEdgy provides specialized managers for workspace-aware queries:</p> <ul> <li><code>query</code>: Returns only records from the current workspace</li> <li><code>global_query</code>: Returns records from all workspaces (admin use)</li> </ul>"},{"location":"features/multi-tenant/guide/#basic-workspace-operations","title":"Basic workspace operations","text":""},{"location":"features/multi-tenant/guide/#create-workspace-scoped-records","title":"Create workspace-scoped records","text":"<pre><code># Within workspace context, records are automatically scoped\nproduct = await Product.query.create(\n    name=\"Laptop\",\n    price=999.99\n)\n</code></pre>"},{"location":"features/multi-tenant/guide/#query-workspace-specific-data","title":"Query workspace-specific data","text":"<pre><code># Only returns products from the current workspace\nproducts = await Product.query.all()\n\n# Access all products across workspaces (admin)\nall_products = await Product.global_query.all()\n</code></pre>"},{"location":"features/multi-tenant/guide/#advanced-multi-tenancy","title":"Advanced multi-tenancy","text":"<p>For advanced multi-tenancy patterns including schema-based and database-based tenancy, refer to the comprehensive Edgy ORM Tenancy documentation.</p> <p>Key Edgy ORM features available in FastEdgy:</p> <ul> <li><code>using(schema=...)</code>: Query specific database schemas</li> <li><code>using_with_db(...)</code>: Query different databases</li> <li><code>with_tenant(...)</code>: Set global tenant context</li> <li>Schema management: Automatic schema creation and management</li> </ul>"},{"location":"features/multi-tenant/guide/#configuration","title":"Configuration","text":"<p>Workspace multi-tenancy works with FastEdgy's context system. The workspace context is typically set by:</p> <ul> <li>Authentication middleware: Set workspace based on user credentials</li> <li>API headers: Extract workspace from request headers</li> <li>URL routing: Determine workspace from URL patterns</li> </ul> <p>Back to Overview</p>"},{"location":"features/multi-tenant/overview/","title":"Multi Tenant","text":"<p>FastEdgy is fully compatible with Edgy ORM's multi-tenancy system, supporting all three multi-tenant architectures: shared schemas, separate schemas, and separate databases.</p>"},{"location":"features/multi-tenant/overview/#compatibility-with-edgy-orm","title":"Compatibility with Edgy ORM","text":"<p>FastEdgy leverages Edgy ORM's comprehensive multi-tenancy features:</p> <ul> <li>Schema-based tenancy: Use different database schemas per tenant</li> <li>Database-based tenancy: Separate databases for complete isolation</li> <li>Shared schema tenancy: Single schema with tenant-specific data filtering</li> <li>Context management: Automatic tenant context handling with <code>with_tenant()</code></li> <li>Dynamic queries: Tenant-aware queries using <code>using()</code> and <code>using_with_db()</code></li> </ul> <p>For complete details on implementation, see the Edgy ORM Tenancy documentation.</p>"},{"location":"features/multi-tenant/overview/#fastedgy-workspace-helpers","title":"FastEdgy workspace helpers","text":"<p>FastEdgy provides additional helpers for shared schema multi-tenancy through the workspace system:</p>"},{"location":"features/multi-tenant/overview/#workspaceablemixin","title":"WorkspaceableMixin","text":"<p>A convenient mixin that automatically adds workspace isolation to your models:</p> <ul> <li>Automatic workspace field: Adds a foreign key to the current workspace</li> <li>Context-aware saves: Automatically assigns records to the current workspace</li> <li>Workspace managers: Built-in query managers that filter by workspace context</li> </ul>"},{"location":"features/multi-tenant/overview/#workspace-system","title":"Workspace system","text":"<p>FastEdgy includes a built-in workspace system for tenant management:</p> <ul> <li>BaseWorkspace model: Ready-to-use workspace model with name, slug, and image</li> <li>WorkspaceableMixin: Easy multi-tenant model inheritance</li> <li>Context integration: Seamless integration with FastEdgy's context system</li> </ul>"},{"location":"features/multi-tenant/overview/#use-cases","title":"Use cases","text":"<ul> <li>SaaS applications: Isolate customer data by workspace/organization</li> <li>Enterprise applications: Department or team-based data segregation</li> <li>Multi-client APIs: Serve different clients from the same application</li> <li>Development environments: Separate staging/production data</li> </ul> <p>Usage Guide</p>"},{"location":"features/ordering/guide/","title":"Ordering - Usage Guide","text":""},{"location":"features/ordering/guide/#syntax-reference","title":"Syntax Reference","text":"Format Example Description <code>field</code> <code>name</code> Ascending by field (default) <code>field:asc</code> <code>name:asc</code> Explicit ascending <code>field:desc</code> <code>price:desc</code> Descending <code>field1,field2</code> <code>name,price:desc</code> Multiple fields <code>relation.field</code> <code>user.name</code> Nested relation field"},{"location":"features/ordering/guide/#direction-options","title":"Direction Options","text":"<ul> <li><code>asc</code> or omitted: Ascending order (A\u2192Z, 1\u21929, oldest\u2192newest)</li> <li><code>desc</code>: Descending order (Z\u2192A, 9\u21921, newest\u2192oldest)</li> </ul>"},{"location":"features/ordering/guide/#common-examples","title":"Common Examples","text":""},{"location":"features/ordering/guide/#basic-sorting","title":"Basic Sorting","text":"<pre><code># Alphabetical by name\nGET /api/products/?order_by=name\n\n# Most expensive first\nGET /api/products/?order_by=price:desc\n\n# Newest first\nGET /api/products/?order_by=created_at:desc\n\n# Boolean fields (active items first)\nGET /api/products/?order_by=is_active:desc\n</code></pre>"},{"location":"features/ordering/guide/#multiple-fields","title":"Multiple Fields","text":"<pre><code># Category first, then price descending\nGET /api/products/?order_by=category,price:desc\n\n# Active first, then newest, then alphabetical\nGET /api/products/?order_by=is_active:desc,created_at:desc,name\n</code></pre>"},{"location":"features/ordering/guide/#nested-relations","title":"Nested Relations","text":"<pre><code># Sort by user's full name\nGET /api/orders/?order_by=user.name\n\n# Sort by category name, then product price\nGET /api/products/?order_by=category.name,price:desc\n\n# Sort by user's company name\nGET /api/orders/?order_by=user.profile.company.name\n\n# Mixed local and relation fields\nGET /api/orders/?order_by=status,user.name,created_at:desc\n</code></pre>"},{"location":"features/ordering/guide/#model-default-ordering","title":"Model Default Ordering","text":"<p>Configure default sort order in your model:</p> <pre><code>from fastedgy.api_route_model.params import OrderByList\nfrom fastedgy.orm import Model, fields\n\nclass Product(Model):\n    name = fields.CharField(max_length=100)\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n    created_at = fields.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        tablename = \"products\"\n        # String format\n        default_order_by: str = \"name:asc\"\n\n        # Or typed list format\n        default_order_by: OrderByList = [(\"name\", \"asc\")]\n\n        # Multiple fields\n        default_order_by: OrderByList = [(\"category\", \"asc\"), (\"price\", \"desc\")]\n</code></pre>"},{"location":"features/ordering/guide/#performance-tips","title":"Performance Tips","text":"<ul> <li>Index Fields: Add database indexes for frequently sorted fields</li> <li>Relation Sorting: Uses SQL JOINs, ensure foreign keys are indexed</li> <li>Limit Results: Combine with pagination for better performance</li> </ul> <p>Back to Overview</p>"},{"location":"features/ordering/overview/","title":"Ordering","text":"<p>Sort API results by any field including nested relationships using simple query parameters.</p>"},{"location":"features/ordering/overview/#key-features","title":"Key Features","text":"<ul> <li>Simple Syntax: <code>field:direction</code> format with comma separation</li> <li>Nested Relations: Sort by related model fields (e.g., <code>user.name</code>, <code>category.slug</code>)</li> <li>Multiple Fields: Combine multiple sort criteria</li> <li>Direction Control: Ascending (<code>asc</code>) and descending (<code>desc</code>) support</li> <li>Default Ordering: Configure default sort order per model</li> <li>Field Validation: Only valid model fields are accepted</li> </ul>"},{"location":"features/ordering/overview/#basic-syntax","title":"Basic Syntax","text":"<pre><code># Single field ascending (default)\nGET /api/products/?order_by=name\n\n# Single field descending\nGET /api/products/?order_by=price:desc\n\n# Multiple fields\nGET /api/products/?order_by=category:asc,price:desc,name:asc\n</code></pre>"},{"location":"features/ordering/overview/#nested-relations-support","title":"Nested Relations Support","text":"<p>Sort by fields from related models:</p> <pre><code># Sort by related user name\nGET /api/orders/?order_by=user.name\n\n# Sort by category name, then product price\nGET /api/products/?order_by=category.name,price:desc\n\n# Deep nested relations\nGET /api/orders/?order_by=user.profile.company.name\n</code></pre>"},{"location":"features/ordering/overview/#works-with-all-features","title":"Works With All Features","text":"<pre><code># Ordered filtered results\nGET /api/products/?order_by=price:desc\nX-Filter: [\"category\", \"=\", \"electronics\"]\n\n# Ordered pagination\nGET /api/products/?order_by=created_at:desc&amp;limit=25&amp;offset=50\n</code></pre> <p>Usage Guide</p>"},{"location":"features/orm-extensions/connection/","title":"Database Connection","text":"<p>FastEdgy handles database connection completely automatically with a native lifespan. You don't need to configure or manage the connection manually.</p>"},{"location":"features/orm-extensions/connection/#automatic-setup","title":"Automatic setup","text":"<p>FastEdgy uses Edgy ORM and automatically sets up the database connection when your application starts.</p>"},{"location":"features/orm-extensions/connection/#environment-configuration","title":"Environment configuration","text":"<p>Set your database URL in your environment file (<code>.env</code>):</p> <pre><code>DATABASE_URL=postgresql://user:password@localhost:5432/mydb\n# or\nDATABASE_URL=sqlite:///./database.db\n</code></pre>"},{"location":"features/orm-extensions/connection/#application-lifecycle-management","title":"Application lifecycle management","text":"<p>FastEdgy automatically manages the database connection through a native lifespan. No configuration required:</p> <pre><code>from fastedgy.app import FastEdgy\n\ndef app():\n    # DB connection is managed automatically - no lifespan needed\n    return FastEdgy(\n        title=\"My App\",\n        description=\"My FastEdgy application\",\n    )\n</code></pre> <p>Automatic connection</p> <p>FastEdgy automatically starts and stops the database connection through its integrated native lifespan. You no longer need to manually manage <code>db.connect()</code> and <code>db.disconnect()</code>.</p>"},{"location":"features/orm-extensions/connection/#custom-lifespan-optional","title":"Custom lifespan (optional)","text":"<p>If you need to add your own startup/shutdown logic, you can provide a custom lifespan that will be composed with the native lifespan:</p> <pre><code>from contextlib import asynccontextmanager\nfrom fastedgy.app import FastEdgy\n\n@asynccontextmanager\nasync def custom_lifespan(app: FastEdgy):\n    # Your custom startup logic\n    print(\"Custom startup logic...\")\n    yield\n    # Your custom shutdown logic\n    print(\"Custom shutdown logic...\")\n\ndef app():\n    # FastEdgy composes your lifespan with its native lifespan\n    return FastEdgy(\n        title=\"My App\",\n        lifespan=custom_lifespan,  # Optional\n    )\n</code></pre>"},{"location":"features/orm-extensions/connection/#manual-connection-management-if-needed","title":"Manual connection management (if needed)","text":"<p>In rare cases where you need manual control:</p> <pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.orm import Database\n\nasync def manual_connection(db: Database = Inject(Database)):\n    await db.connect()\n    try:\n        # Your database operations here\n        pass\n    finally:\n        await db.disconnect()\n</code></pre>"},{"location":"features/orm-extensions/connection/#automatic-connection-pooling","title":"Automatic connection pooling","text":"<p>FastEdgy automatically configures connection pooling:</p> <pre><code>DATABASE_URL=postgresql://user:password@localhost:5432/mydb\nDATABASE_POOL_SIZE=20\nDATABASE_MAX_OVERFLOW=10\n</code></pre>"},{"location":"features/orm-extensions/connection/#multiple-database-support","title":"Multiple database support","text":"<p>For advanced use cases with multiple databases, refer to the Edgy ORM documentation.</p>"},{"location":"features/orm-extensions/connection/#summary","title":"Summary","text":"<ul> <li>Zero configuration: Connection handled automatically via native lifespan</li> <li>Environment-based: Configure via <code>DATABASE_URL</code></li> <li>Automatic lifecycle: Opens on startup, closes on shutdown</li> <li>Connection pooling: Automatic with configurable settings</li> <li>Built on Edgy: Full Edgy ORM compatibility</li> <li>No lifespan required: Native lifespan manages everything</li> </ul> <p>The database connection is ready to use as soon as your FastEdgy application starts!</p>"},{"location":"features/orm-extensions/fields/","title":"Fields","text":"<p>All available field types for FastEdgy models, listed alphabetically.</p>"},{"location":"features/orm-extensions/fields/#big-integer","title":"Big Integer","text":"<p>64-bit integer field for large numbers.</p> <pre><code>class Analytics(BaseModel):\n    class Meta:\n        tablename = \"analytics\"\n\n    total_page_views = fields.BigIntegerField(label=_t('Total page views'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#binary-data","title":"Binary Data","text":"<p>Field for storing binary data.</p> <pre><code>class Attachment(BaseModel):\n    class Meta:\n        tablename = \"attachments\"\n\n    data = fields.BinaryField(label=_t('File Data'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#boolean","title":"Boolean","text":"<p>Boolean field for true/false values.</p> <pre><code>class UserAccount(BaseModel):\n    class Meta:\n        tablename = \"user_accounts\"\n\n    is_account_active = fields.BooleanField(default=True, label=_t('Is Account Active'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#character-choice","title":"Character Choice","text":"<p>Character-based choice field with predefined string options.</p> <pre><code>from enum import Enum\n\nclass UserRole(str, Enum):\n    admin = \"admin\"\n    user = \"user\"\n    guest = \"guest\"\n\nclass User(BaseModel):\n    class Meta:\n        tablename = \"users\"\n\n    role = fields.CharChoiceField(choices=UserRole, default=UserRole.user, label=_t('User Role'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#character","title":"Character","text":"<p>Short text field with maximum length limit.</p> <pre><code>class User(BaseModel):\n    class Meta:\n        tablename = \"users\"\n\n    name = fields.CharField(max_length=100, label=_t('Name'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#choice","title":"Choice","text":"<p>Choice field for predefined options.</p> <pre><code>from enum import Enum\n\nclass OrderStatus(str, Enum):\n    pending = \"pending\"\n    shipped = \"shipped\"\n    delivered = \"delivered\"\n\nclass Order(BaseModel):\n    class Meta:\n        tablename = \"orders\"\n\n    status = fields.ChoiceField(choices=OrderStatus, default=OrderStatus.pending, label=_t('Status'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#composite","title":"Composite","text":"<p>Composite field for combining multiple fields into one.</p> <pre><code>class Location(BaseModel):\n    class Meta:\n        tablename = \"locations\"\n\n    coordinates = fields.CompositeField(label=_t('Coordinates'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#computed","title":"Computed","text":"<p>Computed field for database-computed values.</p> <pre><code>class Order(BaseModel):\n    class Meta:\n        tablename = \"orders\"\n\n    total = fields.ComputedField(label=_t('Total Amount'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#date","title":"Date","text":"<p>Date field for storing dates (year, month, day).</p> <pre><code>class Event(BaseModel):\n    class Meta:\n        tablename = \"events\"\n\n    event_date = fields.DateField(label=_t('Event Date'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#date-time","title":"Date Time","text":"<p>DateTime field for storing date and time with timezone support.</p> <pre><code>class Post(BaseModel):\n    class Meta:\n        tablename = \"posts\"\n\n    created_at = fields.DateTimeField(auto_now_add=True, label=_t('Created At'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#decimal","title":"Decimal","text":"<p>Fixed-precision decimal field for exact calculations.</p> <pre><code>class Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n\n    price = fields.DecimalField(max_digits=10, decimal_places=2, label=_t('Price'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#duration","title":"Duration","text":"<p>Field for storing time duration/intervals.</p> <pre><code>class Task(BaseModel):\n    class Meta:\n        tablename = \"tasks\"\n\n    estimated_duration = fields.DurationField(label=_t('Estimated Duration'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#email","title":"Email","text":"<p>Email field with automatic email validation.</p> <pre><code>class User(BaseModel):\n    class Meta:\n        tablename = \"users\"\n\n    email = fields.EmailField(label=_t('Email Address'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#exclude","title":"Exclude","text":"<p>Field that is excluded from certain operations.</p> <pre><code>class InternalModel(BaseModel):\n    class Meta:\n        tablename = \"internal_models\"\n\n    internal_data = fields.ExcludeField(label=_t('Internal Data'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#file","title":"File","text":"<p>File field for storing file references.</p> <pre><code>class Document(BaseModel):\n    class Meta:\n        tablename = \"documents\"\n\n    file = fields.FileField(label=_t('File Path'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#float","title":"Float","text":"<p>Floating-point number field.</p> <pre><code>class Measurement(BaseModel):\n    class Meta:\n        tablename = \"measurements\"\n\n    temperature = fields.FloatField(label=_t('Temperature'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#foreign-key","title":"Foreign Key","text":"<p>Many-to-one relationship field linking to another model.</p> <pre><code>class Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n\n    category = fields.ForeignKey(\"Category\", on_delete=\"CASCADE\", label=_t('Category'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#html","title":"HTML","text":"<p>HTML content field with specialized handling for HTML markup.</p> <pre><code>class Article(BaseModel):\n    class Meta:\n        tablename = \"articles\"\n\n    content = fields.HTMLField(label=_t('HTML Content'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#image","title":"Image","text":"<p>Image field for storing image file references.</p> <pre><code>class Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n\n    image = fields.ImageField(label=_t('Image'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#integer","title":"Integer","text":"<p>32-bit integer field.</p> <pre><code>class Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n\n    quantity = fields.IntegerField(label=_t('Quantity'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#ip-address","title":"IP Address","text":"<p>IP address field for storing IPv4/IPv6 addresses.</p> <pre><code>class Connection(BaseModel):\n    class Meta:\n        tablename = \"connections\"\n\n    ip_address = fields.IPAddressField(label=_t('IP Address'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#json","title":"JSON","text":"<p>JSON field for storing structured data.</p> <pre><code>class Configuration(BaseModel):\n    class Meta:\n        tablename = \"configurations\"\n\n    settings = fields.JSONField(label=_t('Settings'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#many-to-many","title":"Many to Many","text":"<p>Many-to-many relationship field for multiple associations.</p> <pre><code>class Tag(BaseModel):\n    class Meta:\n        tablename = \"tags\"\n\n    products = fields.ManyToManyField(\"Product\", related_name=\"tags\", label=_t('Products'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#one-to-one","title":"One to One","text":"<p>One-to-one relationship field for unique associations.</p> <pre><code>class UserProfile(BaseModel):\n    class Meta:\n        tablename = \"user_profiles\"\n\n    user = fields.OneToOneField(\"User\", on_delete=\"CASCADE\", label=_t('User'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#password","title":"Password","text":"<p>Password field with automatic hashing.</p> <pre><code>class User(BaseModel):\n    class Meta:\n        tablename = \"users\"\n\n    password = fields.PasswordField(label=_t('Password'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#postgresql-array","title":"PostgreSQL Array","text":"<p>PostgreSQL array field for storing arrays of values.</p> <pre><code>class Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n\n    tags = fields.PGArrayField(base_field=fields.CharField(max_length=50), label=_t('Tags'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#phone","title":"Phone","text":"<p>Phone number field with phone number validation.</p> <pre><code>class Contact(BaseModel):\n    class Meta:\n        tablename = \"contacts\"\n\n    phone = fields.PhoneField(label=_t('Phone Number'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#point","title":"Point","text":"<p>Geometric point field for storing geographic coordinates (longitude, latitude).</p> <pre><code>class Store(BaseModel):\n    class Meta:\n        tablename = \"stores\"\n\n    location = fields.PointField(srid=4326, label=_t('Location'))\n</code></pre> <p>Parameters: - <code>srid</code> (int, default=4326): Spatial Reference System Identifier (WGS84 by default)</p> <p>Storage format: - Python type: <code>tuple[float, float]</code> (longitude, latitude) - Database type: PostGIS <code>geometry(Point, SRID)</code></p> <p>Usage: <pre><code># Create a store with coordinates\nstore = Store(name=\"Main Store\", location=(2.3522, 48.8566))  # Paris\nawait store.save()\n\n# Query by location\nstores = await Store.query.filter(location=(2.3522, 48.8566)).all()\n</code></pre></p>"},{"location":"features/orm-extensions/fields/#placeholder","title":"Placeholder","text":"<p>Placeholder field for dynamic field definitions.</p> <pre><code>class DynamicModel(BaseModel):\n    class Meta:\n        tablename = \"dynamic_models\"\n\n    dynamic_field = fields.PlaceholderField(label=_t('Dynamic Field'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#reference-foreign-key","title":"Reference Foreign Key","text":"<p>Foreign key with additional reference capabilities.</p> <pre><code>class Comment(BaseModel):\n    class Meta:\n        tablename = \"comments\"\n\n    author = fields.RefForeignKey(\"User\", on_delete=\"CASCADE\", label=_t('Author'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#small-integer","title":"Small Integer","text":"<p>16-bit integer field for small numbers.</p> <pre><code>class Settings(BaseModel):\n    class Meta:\n        tablename = \"settings\"\n\n    priority = fields.SmallIntegerField(label=_t('Priority'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#text","title":"Text","text":"<p>Large text field for long content without length limit.</p> <pre><code>class Post(BaseModel):\n    class Meta:\n        tablename = \"posts\"\n\n    content = fields.TextField(label=_t('Content'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#time","title":"Time","text":"<p>Time field for storing time information (hours, minutes, seconds).</p> <pre><code>class Schedule(BaseModel):\n    class Meta:\n        tablename = \"schedules\"\n\n    start_time = fields.TimeField(label=_t('Start Time'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#url","title":"URL","text":"<p>URL field with automatic URL validation.</p> <pre><code>class Website(BaseModel):\n    class Meta:\n        tablename = \"websites\"\n\n    url = fields.URLField(label=_t('Website URL'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#uuid","title":"UUID","text":"<p>UUID field for storing universally unique identifiers.</p> <pre><code>class Token(BaseModel):\n    class Meta:\n        tablename = \"tokens\"\n\n    uuid = fields.UUIDField(label=_t('Unique ID'))\n</code></pre>"},{"location":"features/orm-extensions/fields/#vector","title":"Vector","text":"<p>Vector field for AI embeddings and similarity search.</p> <pre><code>class Document(BaseModel):\n    class Meta:\n        tablename = \"documents\"\n\n    embedding = fields.VectorField(dimensions=1536, label=_t('AI Embedding'))\n</code></pre>"},{"location":"features/orm-extensions/models/","title":"Models","text":"<p>FastEdgy models are based on Edgy ORM and provide a powerful, type-safe way to define your database schema and interact with data.</p>"},{"location":"features/orm-extensions/models/#basic-model-definition","title":"Basic model definition","text":"<pre><code>from fastedgy.models.base import BaseModel\nfrom fastedgy.orm import fields\n\nclass Product(BaseModel):\n    name = fields.CharField(max_length=255)\n    description = fields.TextField()\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n    is_active = fields.BooleanField(default=True)\n\n    class Meta:\n        tablename = \"products\"\n</code></pre>"},{"location":"features/orm-extensions/models/#base-model-features","title":"Base model features","text":"<p>All FastEdgy models inherit from the base model, which provides:</p> <ul> <li>Automatic ID: Primary key <code>id</code> field (auto-increment integer)</li> <li>Query managers: <code>.query</code> for workspace-scoped queries, <code>.global_query</code> for all data</li> <li>FastEdgy integration: Automatic service injection and context management</li> <li>Timestamps: Optional <code>created_at</code> and <code>updated_at</code> fields</li> </ul>"},{"location":"features/orm-extensions/models/#model-operations","title":"Model operations","text":""},{"location":"features/orm-extensions/models/#create","title":"Create","text":"<pre><code>product = Product(\n    name=\"Laptop\",\n    description=\"High-performance laptop\",\n    price=999.99\n)\nawait product.save()\n</code></pre>"},{"location":"features/orm-extensions/models/#query","title":"Query","text":"<pre><code># Get by ID\nproduct = await Product.query.get(id=1)\n\n# Filter\nproducts = await Product.query.filter(is_active=True).all()\n\n# Complex queries\nexpensive_products = await Product.query.filter(\n    price__gte=500,\n    is_active=True\n).order_by(\"-price\").all()\n</code></pre>"},{"location":"features/orm-extensions/models/#update","title":"Update","text":"<pre><code>product.price = 899.99\nawait product.save()\n\n# Bulk update\nawait Product.query.filter(is_active=False).update(is_active=True)\n</code></pre>"},{"location":"features/orm-extensions/models/#delete","title":"Delete","text":"<pre><code>await product.delete()\n\n# Bulk delete\nawait Product.query.filter(price__lt=10).delete()\n</code></pre>"},{"location":"features/orm-extensions/models/#relationships-between-models","title":"Relationships between models","text":"<pre><code>class Category(BaseModel):\n    name = fields.CharField(max_length=100)\n\n    class Meta:\n        tablename = \"categories\"\n\nclass Product(BaseModel):\n    name = fields.CharField(max_length=255)\n    category = fields.ForeignKey(Category, on_delete=\"CASCADE\")\n    tags = fields.ManyToMany(\"Tag\", related_name=\"products\")\n\n    class Meta:\n        tablename = \"products\"\n\nclass Tag(BaseModel):\n    name = fields.CharField(max_length=50)\n\n    class Meta:\n        tablename = \"tags\"\n</code></pre>"},{"location":"features/orm-extensions/models/#model-configuration","title":"Model configuration","text":"<pre><code>class Product(BaseModel):\n    name = fields.CharField(max_length=255)\n\n    class Meta:\n        tablename = \"products\"\n        # Optional configurations\n        abstract = False  # True for abstract base models\n        registry = None   # Auto-set by FastEdgy\n\n        # Database table options\n        indexes = [\n            fields.Index(fields=[\"name\"]),\n        ]\n        constraints = [\n            fields.UniqueConstraint(fields=[\"name\"], name=\"unique_product_name\")\n        ]\n</code></pre>"},{"location":"features/orm-extensions/models/#automatic-api-integration","title":"Automatic API integration","text":"<p>Integrate with FastEdgy's API route generator:</p> <pre><code>from fastedgy.api_route_model import api_route_model\n\n@api_route_model()\nclass Product(BaseModel):\n    name = fields.CharField(max_length=255)\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        tablename = \"products\"\n\n# Automatically generates:\n# GET    /api/products/     - List products\n# POST   /api/products/     - Create product\n# GET    /api/products/{id} - Get product\n# PATCH  /api/products/{id} - Update product\n# DELETE /api/products/{id} - Delete product\n</code></pre>"},{"location":"features/orm-extensions/models/#advanced-capabilities","title":"Advanced capabilities","text":"<ul> <li>Signals: Pre/post save, delete hooks (see Edgy documentation)</li> <li>Custom managers: Define custom query managers</li> <li>Model inheritance: Abstract base models and multi-table inheritance</li> <li>Database functions: Use SQL functions in queries</li> <li>Raw SQL: Execute custom SQL when needed</li> </ul>"},{"location":"features/orm-extensions/models/#best-practices","title":"Best practices","text":"<ul> <li>Use descriptive model and field names</li> <li>Add appropriate constraints and indexes</li> <li>Keep models focused (single responsibility)</li> <li>Use relationships to normalize data</li> <li>Leverage base model features for consistency</li> </ul> <p>For more advanced ORM features, see the Edgy ORM documentation.</p>"},{"location":"features/orm-extensions/overview/","title":"Edgy ORM Extensions - Overview","text":"<p>FastEdgy extends Edgy ORM with additional features and provides seamless integration with FastAPI applications.</p>"},{"location":"features/orm-extensions/overview/#key-features","title":"Key features","text":"<ul> <li>Built on Edgy ORM: Full compatibility with Edgy ORM features and syntax</li> <li>FastAPI integration: Automatic dependency injection and service integration</li> <li>Type safety: Full Python type hints support</li> <li>Async/await: Native asynchronous database operations</li> <li>Automatic migrations: Database schema management with Alembic</li> <li>Query builders: Intuitive and powerful query API</li> </ul>"},{"location":"features/orm-extensions/overview/#what-fastedgy-adds-to-edgy-orm","title":"What FastEdgy adds to Edgy ORM","text":"<p>FastEdgy extends Edgy ORM with:</p> <ul> <li>Base models: Pre-configured model foundation with FastEdgy services</li> <li>Dependency injection: Automatic service injection in models</li> <li>Context management: Workspace and user context integration</li> <li>API route generation: Automatic CRUD endpoints from models</li> <li>Enhanced field types: Additional specialized fields (Vector, HTML, Phone, Geospatial Coordinates)</li> </ul>"},{"location":"features/orm-extensions/overview/#quick-example","title":"Quick example","text":"<pre><code>from fastedgy.models.base import BaseModel\nfrom fastedgy.orm import fields\nfrom fastedgy.api_route_model import api_route_model\nfrom fastedgy.i18n import _t\n\n@api_route_model()\nclass Product(BaseModel):\n    class Meta:\n        tablename = \"products\"\n        label = _t('Product')\n        label_plural = _t('Products')\n\n    name = fields.CharField(max_length=255, label=_t('Product Name'))\n    price = fields.DecimalField(max_digits=10, decimal_places=2, label=_t('Price'))\n    is_active = fields.BooleanField(default=True, label=_t('Is Active'))\n\n# Usage\nproduct = Product(name=\"Laptop\", price=999.99)\nawait product.save()\n\nproducts = await Product.query.filter(is_active=True).all()\n</code></pre>"},{"location":"features/orm-extensions/overview/#architecture","title":"Architecture","text":"<ul> <li>Connection: Automatic database connection management</li> <li>Models: Powerful model definitions with relationships</li> <li>Fields: Rich field types for all data needs</li> <li>Queries: Type-safe query building</li> <li>Migrations: Schema evolution with Alembic</li> </ul> <p>FastEdgy's ORM provides all of Edgy ORM's power with additional FastAPI-specific features for building modern web applications.</p>"},{"location":"features/orm-migration/guide/","title":"Database Migration - Usage Guide","text":"<p>This guide shows how to use FastEdgy's enhanced Alembic integration for database migrations.</p>"},{"location":"features/orm-migration/guide/#setup","title":"Setup","text":"<p>Create the database:</p> <pre><code>fastedgy db createdb\n</code></pre> <p>Initialize the migration repository with FastEdgy's template:</p> <pre><code>fastedgy db init\n</code></pre> <p>This creates a migration directory with FastEdgy-optimized configuration.</p>"},{"location":"features/orm-migration/guide/#creating-migrations","title":"Creating migrations","text":"<p>Generate a new migration based on model changes:</p> <pre><code>fastedgy db makemigrations -m \"Add user model\"\n</code></pre> <p>FastEdgy automatically detects:</p> <ul> <li>New models and fields</li> <li>Required PostgreSQL extensions (vector, enums)</li> <li>Database views</li> <li>Field type changes</li> </ul>"},{"location":"features/orm-migration/guide/#model-with-enum-field","title":"Model with enum field","text":"<pre><code>from fastedgy.models.base import BaseModel\nfrom fastedgy.orm import fields\nfrom fastedgy.i18n import _t\nfrom enum import Enum\n\nclass UserStatus(str, Enum):\n    active = \"active\"\n    inactive = \"inactive\"\n    suspended = \"suspended\"\n\nclass User(BaseModel):\n    class Meta:\n        tablename = \"users\"\n\n    name = fields.CharField(max_length=100, label=_t('Name'))\n    status = fields.ChoiceField(choices=UserStatus, default=UserStatus.active, label=_t('Status'))\n</code></pre> <p>The generated migration will automatically:</p> <ul> <li>Create the enum type</li> <li>Handle enum column creation</li> <li>Add necessary imports</li> </ul>"},{"location":"features/orm-migration/guide/#model-with-vector-field","title":"Model with vector field","text":"<pre><code>from fastedgy.models.base import BaseModel\nfrom fastedgy.orm import fields\nfrom fastedgy.i18n import _t\n\nclass Document(BaseModel):\n    class Meta:\n        tablename = \"documents\"\n\n    title = fields.CharField(max_length=255, label=_t('Title'))\n    embedding = fields.VectorField(dimensions=1536, label=_t('AI Embedding'))\n</code></pre> <p>FastEdgy automatically:</p> <ul> <li>Enables the vector extension in PostgreSQL</li> <li>Creates vector columns with proper dimensions</li> <li>Handles vector-specific operations</li> </ul>"},{"location":"features/orm-migration/guide/#running-migrations","title":"Running migrations","text":"<p>Apply migrations to the database:</p> <pre><code>fastedgy db migrate\n</code></pre> <p>Rollback migrations:</p> <pre><code>fastedgy db downgrade -1\n</code></pre>"},{"location":"features/orm-migration/guide/#migration-files","title":"Migration files","text":"<p>FastEdgy generates enhanced migration files with:</p> <ul> <li>Automatic imports for FastEdgy-specific types</li> <li>Multi-database support functions</li> <li>Proper handling of nullable fields</li> <li>Vector extension management</li> <li>Enum type operations</li> </ul>"},{"location":"features/orm-migration/guide/#best-practices","title":"Best practices","text":"<ul> <li>Review generated migrations: Always check auto-generated migrations before applying</li> <li>Test rollbacks: Ensure downgrade functions work correctly</li> <li>Use descriptive messages: Clear migration messages help track changes</li> <li>Keep migrations small: Split large changes into multiple migrations</li> </ul> <p>Back to Overview</p>"},{"location":"features/orm-migration/overview/","title":"Database Migration - Overview","text":"<p>FastEdgy extends Alembic with additional features to simplify database migrations for FastEdgy applications.</p>"},{"location":"features/orm-migration/overview/#what-fastedgy-adds-to-alembic","title":"What FastEdgy adds to Alembic","text":"<p>FastEdgy enhances Alembic with specialized support for FastEdgy-specific features:</p> <ul> <li>Custom templates: Pre-configured migration templates optimized for FastEdgy applications</li> <li>Enum support: Automatic handling of PostgreSQL enum types with specialized operations</li> <li>Vector fields: Automatic PostgreSQL vector extension management for AI/ML applications</li> <li>Database views: Support for database view creation and management in migrations</li> <li>Multi-database: Enhanced support for multiple database configurations</li> <li>Nullable fields: Intelligent handling of field nullability during migrations</li> </ul>"},{"location":"features/orm-migration/overview/#key-benefits","title":"Key benefits","text":"<ul> <li>Zero configuration: Works out of the box with FastEdgy applications</li> <li>Automatic extensions: PostgreSQL extensions are managed automatically when needed</li> <li>Type safety: Enhanced type checking for FastEdgy-specific field types</li> <li>Multi-tenant ready: Supports multi-database and multi-schema configurations</li> <li>Developer friendly: Clear error messages and helpful migration templates</li> </ul>"},{"location":"features/orm-migration/overview/#integration-with-fastedgy-cli","title":"Integration with FastEdgy CLI","text":"<p>Database migrations are managed through the FastEdgy CLI with enhanced commands:</p> <ul> <li>Migration repository initialization with FastEdgy templates</li> <li>Automatic model discovery and schema generation</li> <li>Enhanced migration file generation with FastEdgy-specific imports</li> <li>Support for workspace-based multi-tenancy migration patterns</li> </ul> <p>Usage Guide</p>"},{"location":"features/pagination/guide/","title":"Pagination - Usage Guide","text":""},{"location":"features/pagination/guide/#query-parameters","title":"Query Parameters","text":"Parameter Type Default Range Description <code>limit</code> int 50 1-1000 Number of items per page <code>offset</code> int 0 \u22650 Number of items to skip"},{"location":"features/pagination/guide/#response-structure","title":"Response Structure","text":"<pre><code>{\n    \"items\": [/* array of items */],\n    \"total\": 1250,      # Total items in dataset\n    \"limit\": 50,        # Items per page (requested)\n    \"offset\": 100,      # Items skipped\n}\n</code></pre>"},{"location":"features/pagination/guide/#frontend-integration","title":"Frontend Integration","text":""},{"location":"features/pagination/guide/#calculate-page-info","title":"Calculate Page Info","text":"<pre><code>const response = await fetch('/api/products/?limit=25&amp;offset=50')\nconst data = await response.json()\n\nconst pageInfo = {\n    currentPage: Math.floor(data.offset / data.limit) + 1,  // 3\n    totalPages: Math.ceil(data.total / data.limit),         // 50\n    hasNext: data.offset + data.limit &lt; data.total,         // true\n    hasPrev: data.offset &gt; 0                                // true\n}\n</code></pre>"},{"location":"features/pagination/guide/#navigation-links","title":"Navigation Links","text":"<pre><code>const buildPageUrl = (page, limit = 25) =&gt; {\n    const offset = (page - 1) * limit\n    return `/api/products/?limit=${limit}&amp;offset=${offset}`\n}\n\n// Next page\nconst nextUrl = buildPageUrl(pageInfo.currentPage + 1)\n\n// Previous page\nconst prevUrl = buildPageUrl(pageInfo.currentPage - 1)\n</code></pre>"},{"location":"features/pagination/guide/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Large Offsets: Avoid very large offsets (&gt;10000) for performance</li> <li>Count Queries: Total count requires a separate COUNT query</li> </ul>"},{"location":"features/pagination/guide/#common-patterns","title":"Common Patterns","text":"<pre><code># Small pages for mobile\nGET /api/products/?limit=10\n\n# Table view with standard page size\nGET /api/products/?limit=25\n\n# Bulk operations\nGET /api/products/?limit=1000\n\n# Combined with search\nGET /api/products/?limit=20&amp;offset=40\nX-Filter: [\"name\", \"contains\", \"laptop\"]\n</code></pre> <p>Back to Overview</p>"},{"location":"features/pagination/overview/","title":"Pagination","text":"<p>Built-in pagination for all list endpoints using standard <code>limit</code> and <code>offset</code> parameters.</p>"},{"location":"features/pagination/overview/#key-features","title":"Key Features","text":"<ul> <li>Automatic Integration: Available on all generated list endpoints</li> <li>Configurable Limits: Default 50 items, max 1000 per request</li> <li>Total Count: Includes total items count for UI pagination</li> <li>Standard Response: Consistent pagination response format</li> <li>Zero Configuration: Works out of the box with any model</li> </ul>"},{"location":"features/pagination/overview/#response-format","title":"Response Format","text":"<pre><code>{\n  \"items\": [...],\n  \"total\": 1250,\n  \"limit\": 50,\n  \"offset\": 100\n}\n</code></pre>"},{"location":"features/pagination/overview/#basic-usage","title":"Basic Usage","text":"<pre><code># First page (default)\nGET /api/products/\n\n# Custom page size\nGET /api/products/?limit=25\n\n# Navigate pages\nGET /api/products/?limit=25&amp;offset=50\n\n# Large datasets (up to 1000 items)\nGET /api/products/?limit=1000\n</code></pre>"},{"location":"features/pagination/overview/#works-with-all-features","title":"Works With All Features","text":"<p>Pagination combines seamlessly with filtering, ordering, and field selection:</p> <pre><code># Paginated filtered results\nGET /api/products/?limit=10&amp;offset=20\nX-Filter: [\"category\", \"=\", \"electronics\"]\n\n# Paginated with ordering\nGET /api/products/?limit=10&amp;order_by=name:asc\n\n# Paginated with field selection\nGET /api/products/?limit=10\nX-Fields: name,price,category.name\n</code></pre> <p>Usage Guide</p>"},{"location":"features/query-builder/guide/","title":"Query Builder - Usage guide","text":""},{"location":"features/query-builder/guide/#all-available-operators","title":"All available operators","text":""},{"location":"features/query-builder/guide/#general-operators","title":"General operators","text":"Operator Description <code>=</code> Equal to <code>!=</code> Not equal to <code>&lt;</code> Less than <code>&lt;=</code> Less than or equal <code>&gt;</code> Greater than <code>&gt;=</code> Greater than or equal <code>between</code> Between two values <code>like</code> SQL LIKE pattern matching <code>ilike</code> SQL LIKE pattern matching (case insensitive) <code>not like</code> SQL NOT LIKE pattern matching <code>not ilike</code> SQL NOT LIKE pattern matching (case insensitive) <code>starts with</code> Starts with text <code>ends with</code> Ends with text <code>not starts with</code> Does not start with text <code>not ends with</code> Does not end with text <code>contains</code> Contains text (case sensitive) <code>icontains</code> Contains text (case insensitive) <code>not contains</code> Does not contain text (case sensitive) <code>not icontains</code> Does not contain text (case insensitive) <code>match</code> Full-text search match <code>in</code> Value is in list <code>not in</code> Value is not in list <code>is true</code> Boolean field is true <code>is false</code> Boolean field is false <code>is empty</code> Field is null or empty <code>is not empty</code> Field has a value"},{"location":"features/query-builder/guide/#vector-field-operators","title":"Vector field operators","text":"Operator Description <code>l1 distance</code> L1/Manhattan distance <code>l1 distance &lt;</code> L1 distance less than <code>l1 distance &lt;=</code> L1 distance less than or equal <code>l1 distance &gt;</code> L1 distance greater than <code>l1 distance &gt;=</code> L1 distance greater than or equal <code>l2 distance</code> L2/Euclidean distance <code>l2 distance &lt;</code> L2 distance less than <code>l2 distance &lt;=</code> L2 distance less than or equal <code>l2 distance &gt;</code> L2 distance greater than <code>l2 distance &gt;=</code> L2 distance greater than or equal <code>cosine distance</code> Cosine distance <code>cosine distance &lt;</code> Cosine distance less than <code>cosine distance &lt;=</code> Cosine distance less than or equal <code>cosine distance &gt;</code> Cosine distance greater than <code>cosine distance &gt;=</code> Cosine distance greater than or equal <code>inner product</code> Inner product <code>inner product &lt;</code> Inner product less than <code>inner product &lt;=</code> Inner product less than or equal <code>inner product &gt;</code> Inner product greater than <code>inner product &gt;=</code> Inner product greater than or equal"},{"location":"features/query-builder/guide/#spatial-field-operators","title":"Spatial field operators","text":"Operator Description <code>spatial distance</code> Calculate spatial distance between points <code>spatial distance &lt;</code> Spatial distance less than <code>spatial distance &lt;=</code> Spatial distance less than or equal <code>spatial distance &gt;</code> Spatial distance greater than <code>spatial distance &gt;=</code> Spatial distance greater than or equal <code>spatial within distance</code> Point within specified distance <code>spatial contains</code> Geometry contains another geometry <code>spatial within</code> Geometry within another geometry <code>spatial intersects</code> Geometries intersect <code>spatial equals</code> Geometries are equal <code>spatial disjoint</code> Geometries are disjoint <code>spatial touches</code> Geometries touch <code>spatial crosses</code> Geometries cross <code>spatial overlaps</code> Geometries overlap"},{"location":"features/query-builder/guide/#filter-syntax","title":"Filter syntax","text":"<pre><code># Simple rule: [\"field\", \"operator\", \"value\"]\nGET /api/products/\nX-Filter: [\"name\", \"=\", \"Laptop\"]\n\n# AND conditions: [\"&amp;\", [rule1, rule2, ...]]\nGET /api/products/\nX-Filter: [\"&amp;\", [[\"price\", \"&gt;=\", 100], [\"is_active\", \"is true\"]]]\n\n# OR conditions: [\"|\", [rule1, rule2, ...]]\nGET /api/products/\nX-Filter: [\"|\", [[\"category\", \"=\", \"electronics\"], [\"category\", \"=\", \"books\"]]]\n</code></pre>"},{"location":"features/query-builder/guide/#available-operators","title":"Available operators","text":""},{"location":"features/query-builder/guide/#charfield-textfield","title":"CharField, TextField","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>like</code>, <code>ilike</code>, <code>not like</code>, <code>not ilike</code>, <code>starts with</code>, <code>ends with</code>, <code>not starts with</code>, <code>not ends with</code>, <code>contains</code>, <code>icontains</code>, <code>not contains</code>, <code>not icontains</code>, <code>match</code>, <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/products/\nX-Filter: [\"description\", \"icontains\", \"smartphone\"]\n</code></pre></p>"},{"location":"features/query-builder/guide/#integerfield-floatfield-decimalfield","title":"IntegerField, FloatField, DecimalField","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>between</code>, <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/products/\nX-Filter: [\"price\", \"between\", [100, 500]]\n</code></pre></p>"},{"location":"features/query-builder/guide/#booleanfield","title":"BooleanField","text":"<p>Operators: <code>is true</code>, <code>is false</code></p> <p>Example: <pre><code>GET /api/products/\nX-Filter: [\"is_featured\", \"is true\"]\n</code></pre></p>"},{"location":"features/query-builder/guide/#datefield-datetimefield","title":"DateField, DateTimeField","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>between</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/orders/\nX-Filter: [\"created_at\", \"&gt;=\", \"2024-01-01T00:00:00Z\"]\n</code></pre></p>"},{"location":"features/query-builder/guide/#choicefield","title":"ChoiceField","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/orders/\nX-Filter: [\"status\", \"in\", [\"pending\", \"processing\"]]\n</code></pre></p>"},{"location":"features/query-builder/guide/#foreignkey-onetoone","title":"ForeignKey, OneToOne","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/products/\nX-Filter: [\"category.name\", \"=\", \"Electronics\"]\n</code></pre></p>"},{"location":"features/query-builder/guide/#manytomany","title":"ManyToMany","text":"<p>Operators: <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/products/\nX-Filter: [\"tags\", \"not in\", [1, 2, 3]]\n</code></pre></p>"},{"location":"features/query-builder/guide/#uuidfield","title":"UUIDField","text":"<p>Operators: <code>=</code>, <code>!=</code>, <code>like</code>, <code>ilike</code>, <code>not like</code>, <code>not ilike</code>, <code>starts with</code>, <code>ends with</code>, <code>not starts with</code>, <code>not ends with</code>, <code>contains</code>, <code>icontains</code>, <code>not contains</code>, <code>not icontains</code>, <code>match</code>, <code>in</code>, <code>not in</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Example: <pre><code>GET /api/users/\nX-Filter: [\"uuid\", \"starts with\", \"550e8400\"]\n</code></pre></p>"},{"location":"features/query-builder/guide/#vectorfield","title":"VectorField","text":"<p>Operators: <code>l1 distance</code>, <code>l1 distance &lt;</code>, <code>l1 distance &lt;=</code>, <code>l1 distance &gt;</code>, <code>l1 distance &gt;=</code>, <code>l2 distance</code>, <code>l2 distance &lt;</code>, <code>l2 distance &lt;=</code>, <code>l2 distance &gt;</code>, <code>l2 distance &gt;=</code>, <code>cosine distance</code>, <code>cosine distance &lt;</code>, <code>cosine distance &lt;=</code>, <code>cosine distance &gt;</code>, <code>cosine distance &gt;=</code>, <code>inner product</code>, <code>inner product &lt;</code>, <code>inner product &lt;=</code>, <code>inner product &gt;</code>, <code>inner product &gt;=</code></p> <p>Example: <pre><code>GET /api/embeddings/\nX-Filter: [\"vector\", \"cosine distance &lt;\", [0.1, [0.2, 0.3, 0.4]]]\n</code></pre></p>"},{"location":"features/query-builder/guide/#pointfield","title":"PointField","text":"<p>Operators: <code>spatial distance</code>, <code>spatial distance &lt;</code>, <code>spatial distance &lt;=</code>, <code>spatial distance &gt;</code>, <code>spatial distance &gt;=</code>, <code>spatial within distance</code>, <code>spatial contains</code>, <code>spatial within</code>, <code>spatial intersects</code>, <code>spatial equals</code>, <code>spatial disjoint</code>, <code>spatial touches</code>, <code>spatial crosses</code>, <code>spatial overlaps</code>, <code>is empty</code>, <code>is not empty</code></p> <p>Examples: <pre><code># Find stores within 5km of a point (longitude, latitude)\nGET /api/stores/\nX-Filter: [\"location\", \"spatial within distance\", [[2.3522, 48.8566], 5000]]\n\n# Find stores at exact location\nGET /api/stores/\nX-Filter: [\"location\", \"spatial equals\", [2.3522, 48.8566]]\n\n# Find stores within a specific distance\nGET /api/stores/\nX-Filter: [\"location\", \"spatial distance &lt;\", [[2.3522, 48.8566], 10000]]\n</code></pre></p> <p>Note: Distance operators require a tuple with the reference point and distance value: <code>[[longitude, latitude], distance_in_meters]</code></p>"},{"location":"features/query-builder/guide/#complex-filtering","title":"Complex filtering","text":"<pre><code># Nested AND/OR\nGET /api/products/\nX-Filter: [\"&amp;\", [\n  [\"is_active\", \"is true\"],\n  [\"|\", [[\"price\", \"&lt;\", 50], [\"category.slug\", \"=\", \"sale\"]]]\n]]\n</code></pre>"},{"location":"features/query-builder/guide/#error-responses","title":"Error responses","text":"<ul> <li>422: Invalid field, operator, or JSON format</li> <li>422: Type conversion errors</li> </ul> <p>Back to Overview</p>"},{"location":"features/query-builder/overview/","title":"Query Builder","text":"<p>FastEdgy's Query Builder allows you to filter generated API endpoints using the <code>X-Filter</code> header with a simple array-based JSON syntax.</p>"},{"location":"features/query-builder/overview/#how-it-works","title":"How it works","text":"<p>The Query Builder automatically transforms JSON filters into optimized SQL queries. It integrates seamlessly with endpoints generated by <code>@api_route_model()</code> and supports:</p> <ul> <li>Simple Array Syntax: <code>[\"field\", \"operator\", \"value\"]</code></li> <li>Logical Conditions: Combine filters with AND (<code>&amp;</code>) and OR (<code>|</code>)</li> <li>Relations: Filter by fields on related models using dot notation</li> <li>Field Types: Specific operators based on field type (text, number, date, boolean)</li> <li>Automatic Validation: Field and operator validation built-in</li> </ul>"},{"location":"features/query-builder/overview/#basic-syntax","title":"Basic syntax","text":"<pre><code># Simple rule\nGET /api/products/\nX-Filter: [\"name\", \"=\", \"Laptop\"]\n\n# AND condition\nGET /api/products/\nX-Filter: [\"&amp;\", [[\"price\", \"&gt;=\", 100], [\"is_active\", \"is true\"]]]\n\n# OR condition\nGET /api/products/\nX-Filter: [\"|\", [[\"category\", \"=\", \"electronics\"], [\"category\", \"=\", \"books\"]]]\n</code></pre>"},{"location":"features/query-builder/overview/#key-advantages","title":"Key advantages","text":"<ul> <li>Performance: Optimized SQL queries generated automatically</li> <li>Security: Strict validation of fields and operators</li> <li>Flexibility: Full support for model relationships</li> <li>Type safety: Operators adapted to each field type</li> <li>Simplicity: One syntax for all use cases</li> </ul>"},{"location":"features/query-builder/overview/#supported-data-types","title":"Supported data types","text":"<ul> <li>Text: <code>CharField</code>, <code>TextField</code> with like, contains, starts with, etc.</li> <li>Numbers: <code>IntegerField</code>, <code>FloatField</code>, <code>DecimalField</code> with comparisons</li> <li>Dates: <code>DateField</code>, <code>DateTimeField</code> with comparisons and between</li> <li>Booleans: <code>BooleanField</code> with is true/false</li> <li>Relations: <code>ForeignKey</code>, <code>OneToOne</code>, <code>ManyToMany</code></li> <li>Advanced: <code>VectorField</code> for AI (distance calculations), <code>PointField</code> for geospatial queries</li> </ul>"},{"location":"features/query-builder/overview/#get-started","title":"Get started","text":"<p>Ready to use Query Builder in your APIs? Learn how to implement it:</p> <p>Usage Guide</p>"},{"location":"features/queued-tasks/advanced/","title":"Advanced Queued Tasks Usage","text":"<p>Advanced patterns for complex applications including hooks, lifecycle management, and sophisticated task scenarios.</p>"},{"location":"features/queued-tasks/advanced/#task-lifecycle-hooks","title":"Task Lifecycle Hooks","text":"<p>Extend task behavior with hooks:</p> <pre><code>from fastedgy.queued_task import on_pre_create, on_pre_run, on_post_run\n\n@on_pre_create\nasync def capture_context(task) -&gt; None:\n    \"\"\"Run before task is saved to database\"\"\"\n    current_workspace = get_current_workspace()\n    task.context.update({'workspace_id': current_workspace.id})\n\n@on_pre_run\nasync def setup_task(task) -&gt; None:\n    \"\"\"Run before task execution\"\"\"\n    workspace_id = task.context.get('workspace_id')\n    if workspace_id:\n        setup_workspace_context(workspace_id)\n\n@on_post_run\nasync def cleanup_task(task, result=None, error=None) -&gt; None:\n    \"\"\"Run after task execution (success or failure)\"\"\"\n    cleanup_workspace_context()\n</code></pre>"},{"location":"features/queued-tasks/advanced/#task-control-and-references","title":"Task Control and References","text":"<p>Advanced task management:</p> <pre><code>from fastedgy.queued_tasks import QueuedTasks\nimport asyncio\n\n@router.post(\"/controlled-tasks\")\nasync def manage_tasks(tasks: QueuedTasks = Inject(QueuedTasks)):\n    # Create task\n    task_ref = tasks.add_task(long_running_process, data)\n\n    # Get task ID\n    task_id = await task_ref.get_task_id()\n\n    # Check state\n    state = await task_ref.get_state()\n\n    # Cancel if needed\n    if some_condition:\n        task_ref.cancel()\n        return {\"cancelled\": True}\n\n    # Wait for completion\n    try:\n        result = await task_ref.wait()\n        return {\"result\": result}\n    except asyncio.CancelledError:\n        return {\"cancelled\": True}\n</code></pre>"},{"location":"features/queued-tasks/advanced/#local-functions","title":"Local Functions","text":"<p>Queue locally defined functions:</p> <pre><code>@router.post(\"/dynamic-task\")\nasync def create_dynamic_task(config: dict, tasks: QueuedTasks = Inject(QueuedTasks)):\n    # Define function based on request\n    async def dynamic_processing(items: list):\n        for item in items:\n            if config.get('encrypt'):\n                item = encrypt_item(item)\n            await process_item(item)\n        return {\"processed\": len(items)}\n\n    # Queue the local function - it will be serialized automatically\n    task_ref = tasks.add_task(dynamic_processing, config['items'])\n    return {\"task_id\": await task_ref.get_task_id()}\n</code></pre>"},{"location":"features/queued-tasks/advanced/#complex-context-management","title":"Complex Context Management","text":"<p>Detailed progress tracking:</p> <pre><code>from fastedgy.queued_task import set_context, get_context, getLogger\n\nasync def complex_processing(dataset_id: int):\n    logger = getLogger('data.processing')\n\n    # Set initial context\n    set_context('dataset.id', dataset_id)\n    set_context('progress', 0)\n    set_context('step', 'validation')\n\n    logger.info(f\"Starting processing for dataset {dataset_id}\")\n\n    # Validation\n    await validate_dataset(dataset_id)\n    set_context('validation.status', 'completed')\n    set_context('progress', 25)\n\n    # Processing\n    set_context('step', 'processing')\n    results = await process_data(dataset_id)\n    set_context('processing.records', len(results))\n    set_context('progress', 75)\n\n    # Completion\n    set_context('step', 'completed')\n    set_context('progress', 100)\n\n    return {\"success\": True, \"records\": len(results)}\n</code></pre>"},{"location":"features/queued-tasks/advanced/#batch-processing","title":"Batch Processing","text":"<p>Efficient large dataset handling:</p> <pre><code>async def process_user_batch(user_ids: list[int]):\n    set_context('batch.total', len(user_ids))\n    set_context('batch.processed', 0)\n\n    for i, user_id in enumerate(user_ids):\n        await process_single_user(user_id)\n\n        # Update progress every 10 users\n        if i % 10 == 0:\n            set_context('batch.processed', i + 1)\n            progress = ((i + 1) / len(user_ids)) * 100\n            set_context('batch.progress_percent', round(progress, 2))\n\n    return {\"processed\": len(user_ids)}\n</code></pre>"},{"location":"features/queued-tasks/advanced/#advanced-dependencies","title":"Advanced Dependencies","text":"<p>Complex task relationships:</p> <pre><code>async def create_workflow(project_id: int, tasks: QueuedTasks = Inject(QueuedTasks)):\n    # Step 1: Prepare data\n    prepare_task = tasks.add_task(prepare_data, project_id)\n\n    # Step 2: Parallel processing\n    analyze_task = tasks.add_task(analyze_data, project_id, parent=prepare_task)\n    transform_task = tasks.add_task(transform_data, project_id, parent=prepare_task)\n\n    # Step 3: Combine results\n    combine_task = tasks.add_task(combine_results, project_id, parent=analyze_task)\n\n    return {\"workflow_started\": True, \"final_task\": await combine_task.get_task_id()}\n</code></pre>"},{"location":"features/queued-tasks/advanced/#error-recovery","title":"Error Recovery","text":"<p>Advanced error handling:</p> <pre><code>async def resilient_task(primary_source: str, fallback_source: str):\n    set_context('strategy', 'primary_with_fallback')\n\n    try:\n        set_context('current_source', primary_source)\n        result = await process_from_primary(primary_source)\n        set_context('source_used', 'primary')\n        return result\n    except PrimarySourceError as e:\n        set_context('primary_error', str(e))\n\n        # Try fallback\n        try:\n            set_context('current_source', fallback_source)\n            result = await process_from_fallback(fallback_source)\n            set_context('source_used', 'fallback')\n            return result\n        except Exception as fallback_error:\n            set_context('all_sources_failed', True)\n            raise Exception(f\"All sources failed: {e}, {fallback_error}\")\n</code></pre>"},{"location":"features/queued-tasks/advanced/#performance-optimization","title":"Performance Optimization","text":"<p>Resource management:</p> <pre><code>async def resource_intensive_task(data_id: int):\n    # Use context managers for expensive resources\n    async with get_db_connection() as conn:\n        set_context('connection.acquired', True)\n\n        data = await conn.fetch(\"SELECT * FROM data WHERE id = $1\", data_id)\n        result = await process_data(data)\n\n        set_context('records.processed', len(result))\n        return result\n</code></pre>"},{"location":"features/queued-tasks/advanced/#testing-advanced-patterns","title":"Testing Advanced Patterns","text":"<p>Mock complex scenarios:</p> <pre><code>import pytest\nfrom unittest.mock import AsyncMock\n\n@pytest.fixture\nasync def mock_tasks():\n    mock = AsyncMock()\n    mock_ref = AsyncMock()\n    mock_ref.get_task_id.return_value = \"test-123\"\n    mock.add_task.return_value = mock_ref\n\n    register_service(mock, QueuedTasks, force=True)\n    yield mock\n    unregister_service(QueuedTasks)\n\n@pytest.mark.asyncio\nasync def test_workflow(mock_tasks):\n    result = await create_workflow(123, mock_tasks)\n    assert mock_tasks.add_task.call_count == 4\n    assert result[\"workflow_started\"] is True\n</code></pre>"},{"location":"features/queued-tasks/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Technical Details \u2192 - CLI, monitoring, architecture</li> <li>Getting Started \u2190 - Back to basics</li> <li>User Guide \u2190 - Everyday patterns</li> </ul>"},{"location":"features/queued-tasks/getting-started/","title":"Getting Started with Queued Tasks","text":"<p>Set up background task processing in your FastAPI application in 5 minutes.</p>"},{"location":"features/queued-tasks/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>FastAPI application with FastEdgy</li> <li>PostgreSQL database (for task storage)</li> <li>Basic understanding of async/await</li> </ul>"},{"location":"features/queued-tasks/getting-started/#step-1-setup-models-and-database","title":"Step 1: Setup Models and Database","text":"<p>Create the queued task models in your project's <code>models/</code> directory:</p> <p><code>models/queued_task.py</code>: <pre><code>from fastedgy.models.queued_task import BaseQueuedTask\nfrom fastedgy.i18n import _t\n\n\nclass QueuedTask(BaseQueuedTask):\n    class Meta:  # type: ignore\n        tablename = \"queued_tasks\"\n        label = _t(\"T\u00e2che en file d'attente\")\n        label_plural = _t(\"T\u00e2ches en file d'attente\")\n        default_order_by = [(\"created_at\", \"desc\")]\n</code></pre></p> <p><code>models/queued_task_log.py</code>: <pre><code>from fastedgy.models.queued_task_log import BaseQueuedTaskLog\nfrom fastedgy.i18n import _t\n\n\nclass QueuedTaskLog(BaseQueuedTaskLog):\n    class Meta:  # type: ignore\n        tablename = \"queued_task_logs\"\n        label = _t(\"Log de la t\u00e2che en file d'attente\")\n        label_plural = _t(\"Logs de la t\u00e2che en file d'attente\")\n        default_order_by = [(\"created_at\", \"desc\")]\n</code></pre></p> <p><code>models/queued_task_worker.py</code>: <pre><code>from fastedgy.models.queued_task_worker import BaseQueuedTaskWorker\nfrom fastedgy.i18n import _t\n\n\nclass QueuedTaskWorker(BaseQueuedTaskWorker):\n    class Meta:  # type: ignore\n        tablename = \"queued_task_workers\"\n        label = _t(\"Worker de la t\u00e2che en file d'attente\")\n        label_plural = _t(\"Workers de la t\u00e2che en file d'attente\")\n        default_order_by = [(\"created_at\", \"desc\")]\n</code></pre></p> <p><code>models/__init__.py</code>: <pre><code>from models.queued_task import QueuedTask as QueuedTask\nfrom models.queued_task_log import QueuedTaskLog as QueuedTaskLog\nfrom models.queued_task_worker import QueuedTaskWorker as QueuedTaskWorker\n</code></pre></p> <p>Then create and apply the database migration:</p> <pre><code># Create migration for task tables\nfastedgy db makemigrations -m \"Add queued task models\"\n\n# Apply the migration\nfastedgy db migrate\n</code></pre> <p>This creates tables to store tasks, workers, and logs.</p>"},{"location":"features/queued-tasks/getting-started/#step-2-your-first-background-task","title":"Step 2: Your First Background Task","text":"<p>Create a simple async function to run in the background:</p> <pre><code># tasks.py\nasync def send_welcome_email(user_email: str, username: str):\n    \"\"\"Send a welcome email to new users.\"\"\"\n    # Your email sending logic here\n    print(f\"Sending welcome email to {user_email} (user: {username})\")\n\n    # Simulate email processing time\n    await asyncio.sleep(2)\n\n    return {\"email_sent\": True, \"recipient\": user_email}\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#step-3-queue-tasks-in-your-api","title":"Step 3: Queue Tasks in Your API","text":"<p>Use the task in your FastAPI endpoints:</p> <pre><code># main.py\nfrom fastapi import APIRouter\nfrom fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.queued_tasks import QueuedTasks\nfrom tasks import send_welcome_email\n\napp = FastEdgy()\nrouter = APIRouter()\n\n@router.post(\"/users/register\")\nasync def register_user(\n    email: str,\n    username: str,\n    tasks: QueuedTasks = Inject(QueuedTasks)  # Inject the task queue\n):\n    # Create user in database (fast operation)\n    user = {\"id\": 123, \"email\": email, \"username\": username}\n\n    # Queue email sending (slow operation) - runs in background\n    email_task = tasks.add_task(\n        send_welcome_email,\n        user[\"email\"],\n        user[\"username\"]\n    )\n\n    # Return immediately - user doesn't wait for email\n    return {\n        \"user\": user,\n        \"email_task_queued\": True\n    }\n\napp.include_router(router)\n</code></pre> <p>That's it! Your task is now queued and will be executed by background workers.</p>"},{"location":"features/queued-tasks/getting-started/#step-4-start-workers","title":"Step 4: Start Workers","text":"<p>In a separate terminal, start background workers to process tasks:</p> <pre><code># Start 2 background workers\nfastedgy queue start --workers=2\n</code></pre> <p>You'll see output like: <pre><code>Starting 2 workers...\nWorker 1 ready\nWorker 2 ready\nListening for tasks...\n</code></pre></p>"},{"location":"features/queued-tasks/getting-started/#step-5-test-it","title":"Step 5: Test It!","text":"<p>Make a request to your endpoint:</p> <pre><code>curl -X POST \"http://localhost:8000/users/register\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"user@example.com\", \"username\": \"johndoe\"}'\n</code></pre> <p>Response (immediate): <pre><code>{\n  \"user\": {\"id\": 123, \"email\": \"user@example.com\", \"username\": \"johndoe\"},\n  \"email_task_queued\": true\n}\n</code></pre></p> <p>Worker output (2 seconds later): <pre><code>Sending welcome email to user@example.com (user: johndoe)\nTask completed: send_welcome_email\n</code></pre></p>"},{"location":"features/queued-tasks/getting-started/#what-just-happened","title":"What Just Happened?","text":"<ol> <li>User registration completed instantly (database operations)</li> <li>Email task was queued in PostgreSQL</li> <li>Background worker picked up the task</li> <li>Email sent without blocking the user's request</li> </ol>"},{"location":"features/queued-tasks/getting-started/#task-dependencies","title":"Task Dependencies","text":"<p>Tasks can wait for other tasks to complete:</p> <pre><code>@router.post(\"/orders\")\nasync def process_order(\n    order_data: dict,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    # Process order first\n    process_task = tasks.add_task(process_payment, order_data[\"payment_info\"])\n\n    # These tasks wait for payment processing to complete\n    email_task = tasks.add_task(\n        send_order_confirmation,\n        order_data[\"user_email\"],\n        parent=process_task  # Waits for process_task\n    )\n\n    inventory_task = tasks.add_task(\n        update_inventory,\n        order_data[\"items\"],\n        parent=process_task  # Also waits for process_task\n    )\n\n    return {\"order_queued\": True}\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#checking-task-status","title":"Checking Task Status","text":"<p>Get information about your tasks:</p> <pre><code>@router.get(\"/tasks/{task_id}\")\nasync def get_task_status(task_id: str):\n    # You can check task status, but this requires storing task IDs\n    # See the User Guide for complete examples\n    pass\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#common-patterns","title":"Common Patterns","text":""},{"location":"features/queued-tasks/getting-started/#pattern-1-fire-and-forget","title":"Pattern 1: Fire and Forget","text":"<pre><code># Just queue it - don't need the result\ntasks.add_task(send_notification, user_id, \"Welcome!\")\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#pattern-2-get-task-reference","title":"Pattern 2: Get Task Reference","text":"<pre><code># Get task ID to track later\ntask_ref = tasks.add_task(generate_report, user_id)\ntask_id = await task_ref.get_task_id()\nreturn {\"task_id\": task_id}\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#pattern-3-multiple-related-tasks","title":"Pattern 3: Multiple Related Tasks","text":"<pre><code># Process multiple items in parallel\nfor item in items:\n    tasks.add_task(process_item, item.id)\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#environment-variables-optional","title":"Environment Variables (Optional)","text":"<p>Customize worker behavior:</p> <pre><code># .env\nQUEUE_MAX_WORKERS=4              # Default: CPU count\nQUEUE_WORKER_IDLE_TIMEOUT=60     # Shutdown idle workers after 60s\nQUEUE_TASK_TIMEOUT=300           # Max 5 minutes per task\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#basic-cli-commands","title":"Basic CLI Commands","text":"<pre><code># Check queue status\nfastedgy queue status\n\n# Start workers\nfastedgy queue start --workers=3\n\n# Clear all pending tasks (development only)\nfastedgy queue clear\n</code></pre>"},{"location":"features/queued-tasks/getting-started/#next-steps","title":"Next Steps","text":"<p>You now know the basics! For more advanced features:</p> <ul> <li>User Guide \u2192 - Complete patterns and task management</li> <li>Advanced Usage \u2192 - Context tracking, hooks, and complex scenarios</li> <li>Technical Details \u2192 - CLI commands, monitoring, and troubleshooting</li> </ul>"},{"location":"features/queued-tasks/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>Tasks not running? - Check workers are started: <code>fastedgy queue status</code> - Check database connection in worker logs</p> <p>Tasks failing? - Check function imports are available to workers - Verify async function syntax</p> <p>Performance issues? - Increase worker count: <code>fastedgy queue start --workers=6</code> - Check database connection pool settings</p>"},{"location":"features/queued-tasks/getting-started/#quick-reference","title":"Quick Reference","text":"<pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.queued_tasks import QueuedTasks\n\n# Basic usage\ntasks: QueuedTasks = Inject(QueuedTasks)\n\n# Queue a task (fire and forget)\ntasks.add_task(my_function, arg1, arg2)\n\n# Queue with parent dependency\nchild_task = tasks.add_task(child_function, parent=parent_task)\n\n# Get task ID for tracking\ntask_ref = tasks.add_task(my_function, arg)\ntask_id = await task_ref.get_task_id()\n</code></pre> <p>Ready for more advanced patterns? Continue to User Guide \u2192</p>"},{"location":"features/queued-tasks/guide/","title":"Queued Tasks User Guide","text":"<p>Complete guide to using background tasks effectively in your FastAPI applications.</p>"},{"location":"features/queued-tasks/guide/#task-creation-patterns","title":"Task Creation Patterns","text":""},{"location":"features/queued-tasks/guide/#pattern-1-simple-background-jobs","title":"Pattern 1: Simple Background Jobs","text":"<p>For operations that don't need to return results to the user:</p> <pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.queued_tasks import QueuedTasks\n\nasync def send_email(recipient: str, subject: str, body: str):\n    # Email sending logic\n    return {\"sent\": True, \"recipient\": recipient}\n\n@router.post(\"/users/{user_id}/notify\")\nasync def notify_user(\n    user_id: int,\n    message: str,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    user = get_user(user_id)\n\n    # Fire and forget - user gets immediate response\n    tasks.add_task(send_email, user.email, \"Notification\", message)\n\n    return {\"notification_queued\": True}\n</code></pre>"},{"location":"features/queued-tasks/guide/#pattern-2-task-dependencies","title":"Pattern 2: Task Dependencies","text":"<p>When tasks must run in a specific order:</p> <pre><code>async def process_order(order_id: int):\n    return {\"order_id\": order_id, \"status\": \"processed\"}\n\nasync def send_confirmation(order_id: int):\n    return {\"confirmation_sent\": True}\n\n@router.post(\"/orders\")\nasync def create_order(\n    order_data: dict,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    # Main processing task\n    process_task = tasks.add_task(process_order, order_data[\"id\"])\n\n    # This waits for process_task to complete\n    tasks.add_task(\n        send_confirmation,\n        order_data[\"id\"],\n        parent=process_task  # Dependency\n    )\n\n    return {\"order_queued\": True}\n</code></pre>"},{"location":"features/queued-tasks/guide/#pattern-3-parallel-processing","title":"Pattern 3: Parallel Processing","text":"<p>Process multiple items simultaneously:</p> <pre><code>@router.post(\"/users/{user_id}/process-gallery\")\nasync def process_user_gallery(\n    user_id: int,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    user_images = get_user_images(user_id)\n\n    for image in user_images:\n        # Process all images in parallel\n        tasks.add_task(process_image, image.id, user_id)\n\n    return {\"images_queued\": len(user_images)}\n</code></pre>"},{"location":"features/queued-tasks/guide/#context-and-progress-tracking","title":"Context and Progress Tracking","text":"<p>Track progress within your tasks:</p> <pre><code>from fastedgy.queued_task import set_context, get_context\n\nasync def process_dataset(dataset_id: int):\n    set_context(\"dataset.id\", dataset_id)\n    set_context(\"progress\", 0)\n    set_context(\"stage\", \"loading\")\n\n    # Load data\n    data = load_dataset(dataset_id)\n    set_context(\"progress\", 25)\n\n    # Process data\n    set_context(\"stage\", \"processing\")\n    result = process_data(data)\n    set_context(\"progress\", 75)\n\n    # Save results\n    set_context(\"stage\", \"saving\")\n    save_results(result)\n    set_context(\"progress\", 100)\n\n    return {\"processed\": True}\n</code></pre>"},{"location":"features/queued-tasks/guide/#error-handling","title":"Error Handling","text":"<p>Design robust tasks:</p> <pre><code>from fastedgy.queued_task import getLogger\n\nasync def robust_task(data_id: int):\n    logger = getLogger(\"tasks.processing\")\n\n    try:\n        logger.info(f\"Starting task for {data_id}\")\n        set_context(\"data.id\", data_id)\n\n        result = process_data(data_id)\n\n        logger.info(\"Task completed successfully\")\n        return result\n\n    except Exception as e:\n        logger.error(f\"Task failed: {str(e)}\")\n        set_context(\"error.message\", str(e))\n        raise\n</code></pre>"},{"location":"features/queued-tasks/guide/#best-practices","title":"Best Practices","text":""},{"location":"features/queued-tasks/guide/#1-keep-tasks-focused","title":"1. Keep Tasks Focused","text":"<pre><code># Good: Single responsibility\nasync def send_welcome_email(user_email: str):\n    return send_email(user_email, \"welcome_template\")\n\n# Avoid: Too many responsibilities\nasync def handle_new_user(user_data: dict):\n    create_user(user_data)    # Database\n    send_email(...)           # Email\n    resize_image(...)         # Image processing\n    # Too much!\n</code></pre>"},{"location":"features/queued-tasks/guide/#2-handle-errors-appropriately","title":"2. Handle Errors Appropriately","text":"<pre><code>async def api_task(data: dict):\n    try:\n        return await third_party_api.send(data)\n    except APIRateLimitError:\n        # Will be retried automatically\n        raise\n    except APIAuthError:\n        # Don't retry auth errors\n        set_context(\"auth_failed\", True)\n        raise\n</code></pre>"},{"location":"features/queued-tasks/guide/#configuration","title":"Configuration","text":"<p>Set environment variables:</p> <pre><code>QUEUE_MAX_WORKERS=4         # Number of workers\nQUEUE_TASK_TIMEOUT=300      # Max time per task (seconds)\nQUEUE_MAX_RETRIES=3         # Retry attempts\n</code></pre>"},{"location":"features/queued-tasks/guide/#common-issues","title":"Common Issues","text":"<p>Tasks not processing? - Check workers are running: <code>fastedgy queue status</code> - Start workers: <code>fastedgy queue start --workers=3</code></p> <p>Tasks failing? - Check function imports in worker environment - Verify task function signatures</p>"},{"location":"features/queued-tasks/guide/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage \u2192 - Complex patterns and hooks</li> <li>Technical Details \u2192 - CLI commands and monitoring</li> <li>Getting Started \u2190 - Back to basics</li> </ul>"},{"location":"features/queued-tasks/overview/","title":"Queued Tasks","text":"<p>A production-ready task queue system for FastAPI applications that makes background job processing simple and reliable.</p>"},{"location":"features/queued-tasks/overview/#fastapi-backgroundtasks-vs-queued-tasks","title":"FastAPI BackgroundTasks vs Queued tasks","text":"<p>FastAPI includes an excellent <code>BackgroundTasks</code> system that's perfect for simple, non-critical background operations:</p>"},{"location":"features/queued-tasks/overview/#fastapi-backgroundtasks-great-for-simple-cases","title":"FastAPI BackgroundTasks - great for simple cases","text":"<pre><code># FastAPI native approach - excellent for simple tasks\nfrom fastapi import BackgroundTasks\n\n@router.post(\"/register\")\nasync def register_user(user_data: dict, background_tasks: BackgroundTasks):\n    user = create_user(user_data)\n\n    # Perfect for simple operations like logging, notifications\n    background_tasks.add_task(send_welcome_email, user.email)\n\n    return {\"user_id\": user.id}\n</code></pre> <p>FastAPI's BackgroundTasks excels when you need:</p> <ul> <li>Simple fire-and-forget tasks (emails, logging, cache warming)</li> <li>Tasks that don't require resilience or retry logic</li> <li>Single-server applications with acceptable task loss on restarts</li> <li>Rapid development without additional infrastructure</li> </ul>"},{"location":"features/queued-tasks/overview/#when-you-need-production-grade-task-processing","title":"When you need production-grade task processing","text":"<p>For more demanding applications, you'll eventually need additional capabilities:</p> <ul> <li>Persistence: Tasks must survive server restarts and crashes</li> <li>Reliability: Failed tasks need automatic retries and error handling</li> <li>Monitoring: Track task progress, logs, and performance metrics</li> <li>Scalability: Distribute tasks across multiple workers/servers</li> <li>Complex Workflows: Task dependencies, scheduling, and chaining</li> <li>Production Monitoring: Database logs, CLI, health checks</li> </ul>"},{"location":"features/queued-tasks/overview/#the-solution-extending-fastapi-with-production-grade-tasks","title":"The solution: extending FastAPI with production-grade tasks","text":"<p>FastEdgy's Queued Tasks builds on FastAPI's foundation to provide enterprise-grade task processing capabilities:</p> <pre><code># FastEdgy Queued Tasks - production ready\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.queued_tasks import QueuedTasks\n\n@router.post(\"/register\")\nasync def register_user(\n    user_data: dict,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    user = create_user(user_data)\n\n    # Tasks are persisted in PostgreSQL and executed by dedicated workers\n    task_ref = tasks.add_task(send_welcome_email, user.email)\n\n    # Optional: Get task ID for tracking\n    return {\n        \"user_id\": user.id,\n        \"email_task_id\": await task_ref.get_task_id()\n    }\n</code></pre> <p>Additional capabilities for production applications:</p> <ul> <li>Persistent Storage: Tasks survive server restarts and crashes</li> <li>Multi-Server: Distribute workers across multiple servers</li> <li>Task Dependencies: Create complex workflows with parent-child relationships</li> <li>Progress Tracking: Monitor task progress with context and logging</li> <li>Automatic Retries: Failed tasks are automatically retried</li> <li>Production Monitoring: Database logs, CLI, health checks</li> <li>Scalability: Add more workers as needed without code changes</li> </ul>"},{"location":"features/queued-tasks/overview/#key-features","title":"Key features","text":"<ul> <li>Simple API: Just <code>add_task(function, *args)</code> to queue any async function</li> <li>Task Dependencies: Parent-child relationships with automatic cascade handling</li> <li>Worker Management: Intelligent scaling and multi-server coordination</li> <li>Context Tracking: Nested context and enhanced logging</li> <li>Production Ready: PostgreSQL notifications, graceful shutdown, monitoring</li> </ul>"},{"location":"features/queued-tasks/overview/#quick-demo","title":"Quick demo","text":"<pre><code># 1. Define your async function\nasync def process_user_data(user_id: int):\n    # Heavy processing here...\n    return {\"processed\": True}\n\n# 2. Queue it in any endpoint\n@router.post(\"/users/{user_id}/process\")\nasync def trigger_processing(\n    user_id: int,\n    tasks: QueuedTasks = Inject(QueuedTasks)\n):\n    task_ref = tasks.add_task(process_user_data, user_id)\n    return {\"task_queued\": True, \"task_id\": await task_ref.get_task_id()}\n\n# 3. Background workers automatically pick up and execute the task\n</code></pre>"},{"location":"features/queued-tasks/overview/#quick-start","title":"Quick Start","text":"<p>New to background tasks? Start here:</p> <p>Get Started \u2192</p>"},{"location":"features/queued-tasks/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p> Getting Started</p> <p>5-minute setup guide with your first background task</p> <p> Start here</p> </li> <li> <p> User Guide</p> <p>Complete guide for everyday task queue patterns</p> <p> Learn more</p> </li> <li> <p> Advanced Usage</p> <p>Dependencies, context, hooks, and complex scenarios</p> <p> Advanced topics</p> </li> <li> <p> Technical Details</p> <p>Architecture, CLI commands, monitoring, and troubleshooting</p> <p> Technical info</p> </li> </ul>"},{"location":"features/queued-tasks/overview/#when-to-use-queued-tasks","title":"When to Use Queued Tasks","text":"<p>Perfect for: - Email sending and notifications - Image/file processing - Report generation - Data imports/exports - Third-party API calls - Heavy computations</p> <p>FastAPI's BackgroundTasks is sufficient for: - Simple database queries and logging - Fast operations (&lt; 1 second) - Fire-and-forget notifications - Cache warming and simple cleanup tasks</p>"},{"location":"features/queued-tasks/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"features/queued-tasks/overview/#tasks","title":"Tasks","text":"<p>Any async function can be queued as a background task.</p>"},{"location":"features/queued-tasks/overview/#workers","title":"Workers","text":"<p>Background processes that execute queued tasks. Can run on same server or distributed across multiple servers.</p>"},{"location":"features/queued-tasks/overview/#task-dependencies","title":"Task Dependencies","text":"<p>Tasks can wait for other tasks to complete, creating processing chains.</p>"},{"location":"features/queued-tasks/overview/#context","title":"Context","text":"<p>Track progress and metadata throughout task execution.</p> <p>Ready to get started? \u2192 Getting Started Guide</p>"},{"location":"features/queued-tasks/technical/","title":"Queued Tasks Technical Details","text":"<p>Architecture, CLI commands, monitoring, and troubleshooting for the Queued Task system.</p>"},{"location":"features/queued-tasks/technical/#architecture-overview","title":"Architecture Overview","text":"<p>The Queued Task system is built around PostgreSQL for reliable task storage and coordination across multiple workers and servers.</p>"},{"location":"features/queued-tasks/technical/#core-components","title":"Core Components","text":"<ol> <li>Task Storage: PostgreSQL tables store task definitions, state, and logs</li> <li>Worker Pool: Background processes that execute tasks</li> <li>Notification System: PostgreSQL NOTIFY/LISTEN for real-time task dispatch</li> <li>Context System: Nested context tracking with database persistence</li> <li>Dependency Management: Parent-child task relationships with cascade handling</li> </ol>"},{"location":"features/queued-tasks/technical/#task-lifecycle","title":"Task Lifecycle","text":"<pre><code>Enqueued \u2192 Picked up \u2192 Running \u2192 Completed/Failed\n    \u2193           \u2193          \u2193           \u2193\n  Database   Worker    Context    Logs/Results\n</code></pre>"},{"location":"features/queued-tasks/technical/#cli-commands","title":"CLI Commands","text":""},{"location":"features/queued-tasks/technical/#queue-management","title":"Queue Management","text":"<pre><code># Check queue status\nfastedgy queue status\n\n# Start workers\nfastedgy queue start --workers=3\n\n# Clear pending tasks (development only)\nfastedgy queue clear\n\n# Retry failed tasks\nfastedgy queue retry\n\n# View detailed statistics\nfastedgy queue stats\n\n# List active servers\nfastedgy queue servers\n</code></pre>"},{"location":"features/queued-tasks/technical/#server-management","title":"Server Management","text":"<pre><code># Start HTTP server only\nfastedgy serve\n\n# Start server with workers\nfastedgy serve --workers=3\n\n# Start only workers (no HTTP)\nfastedgy serve --workers=3 --no-http\n</code></pre>"},{"location":"features/queued-tasks/technical/#configuration","title":"Configuration","text":""},{"location":"features/queued-tasks/technical/#environment-variables","title":"Environment Variables","text":"<pre><code># Worker settings\nQUEUE_MAX_WORKERS=4                    # Default: CPU count\nQUEUE_WORKER_IDLE_TIMEOUT=60          # Seconds before idle worker shutdown\nQUEUE_POLLING_INTERVAL=2              # Seconds between queue polls\nQUEUE_FALLBACK_POLLING_INTERVAL=30    # Fallback when NOTIFY fails\n\n# Task settings\nQUEUE_TASK_TIMEOUT=300                # Max seconds per task\nQUEUE_MAX_RETRIES=3                   # Max retry attempts\n\n# Database settings\nQUEUE_USE_POSTGRESQL_NOTIFY=true      # Enable PostgreSQL NOTIFY/LISTEN\nQUEUE_NOTIFY_CHANNEL=queue_new_task   # PostgreSQL notification channel\n</code></pre>"},{"location":"features/queued-tasks/technical/#runtime-configuration","title":"Runtime Configuration","text":"<pre><code>from fastedgy.dependencies import get_service\nfrom fastedgy.queued_task import QueuedTaskConfig\n\n# Modify settings at runtime\nconfig = get_service(QueuedTaskConfig)\nconfig.max_workers = 8\nconfig.worker_idle_timeout = 120\nconfig.task_timeout = 600\n</code></pre>"},{"location":"features/queued-tasks/technical/#database-schema","title":"Database Schema","text":""},{"location":"features/queued-tasks/technical/#core-tables","title":"Core Tables","text":"<pre><code>-- Tasks\nCREATE TABLE queued_tasks (\n    id UUID PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    parent_task UUID REFERENCES queued_tasks(id),\n    date_enqueued TIMESTAMP,\n    date_started TIMESTAMP,\n    date_done TIMESTAMP,\n    context JSONB,\n    result JSONB,\n    error_message TEXT\n);\n\n-- Task logs\nCREATE TABLE queued_task_logs (\n    id SERIAL PRIMARY KEY,\n    queued_task_id UUID REFERENCES queued_tasks(id),\n    type VARCHAR(50),\n    message TEXT,\n    date_created TIMESTAMP\n);\n\n-- Workers\nCREATE TABLE queued_task_workers (\n    id SERIAL PRIMARY KEY,\n    server_name VARCHAR(255),\n    max_workers INTEGER,\n    active_workers INTEGER,\n    idle_workers INTEGER,\n    is_running BOOLEAN,\n    last_heartbeat TIMESTAMP\n);\n</code></pre>"},{"location":"features/queued-tasks/technical/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"features/queued-tasks/technical/#database-queries","title":"Database Queries","text":"<p>View task status:</p> <pre><code>-- All recent tasks\nSELECT id, name, state, date_enqueued, date_started, date_done, parent_task\nFROM queued_tasks\nORDER BY date_enqueued DESC\nLIMIT 50;\n\n-- Task logs\nSELECT qt.name, qtl.type, qtl.message, qtl.date_created\nFROM queued_task_logs qtl\nJOIN queued_tasks qt ON qtl.queued_task_id = qt.id\nORDER BY qtl.date_created DESC\nLIMIT 100;\n\n-- Active workers\nSELECT server_name, max_workers, active_workers, idle_workers, is_running, last_heartbeat\nFROM queued_task_workers\nWHERE is_running = true;\n\n-- Task hierarchy\nWITH RECURSIVE task_hierarchy AS (\n  SELECT id, name, parent_task, 1 as level, ARRAY[id] as path\n  FROM queued_tasks\n  WHERE parent_task IS NULL\n\n  UNION ALL\n\n  SELECT qt.id, qt.name, qt.parent_task, th.level + 1, th.path || qt.id\n  FROM queued_tasks qt\n  JOIN task_hierarchy th ON qt.parent_task = th.id\n)\nSELECT level, REPEAT('  ', level - 1) || name as indented_name, id, path\nFROM task_hierarchy\nORDER BY path;\n</code></pre>"},{"location":"features/queued-tasks/technical/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Custom monitoring endpoint\n@router.get(\"/admin/queue-metrics\")\nasync def get_queue_metrics():\n    # Query database for metrics\n    return {\n        \"pending_tasks\": await count_pending_tasks(),\n        \"running_tasks\": await count_running_tasks(),\n        \"failed_tasks_today\": await count_failed_tasks_today(),\n        \"average_task_duration\": await get_average_task_duration(),\n        \"active_workers\": await count_active_workers()\n    }\n</code></pre>"},{"location":"features/queued-tasks/technical/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging:</p> <pre><code>import logging\n\n# Enable debug logging\nlogging.getLogger('queued_task').setLevel(logging.DEBUG)\n\n# This shows task creation, pickup, execution steps\n</code></pre>"},{"location":"features/queued-tasks/technical/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/queued-tasks/technical/#common-issues","title":"Common Issues","text":"<p>Tasks stuck in \"enqueued\" state: - Check workers are running: <code>fastedgy queue status</code> - Start workers: <code>fastedgy queue start --workers=3</code> - Check database connectivity</p> <p>Tasks failing silently: - Verify function imports available to workers - Check task function signatures match - Review worker logs for Python errors</p> <p>High memory usage: - Reduce <code>QUEUE_MAX_WORKERS</code> - Increase <code>QUEUE_WORKER_IDLE_TIMEOUT</code> - Check for memory leaks in task functions</p> <p>Database connection issues: - Verify PostgreSQL NOTIFY/LISTEN support - Set <code>QUEUE_USE_POSTGRESQL_NOTIFY=false</code> to disable - Check database connection pool settings</p>"},{"location":"features/queued-tasks/technical/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Check worker processes\nps aux | grep \"fastedgy queue\"\n\n# Check database connections\n# (Run in PostgreSQL)\nSELECT state, count(*) FROM pg_stat_activity\nWHERE datname = 'your_database'\nGROUP BY state;\n\n# Check notification channels\nSELECT * FROM pg_stat_activity WHERE query LIKE '%LISTEN%';\n</code></pre>"},{"location":"features/queued-tasks/technical/#performance-tuning","title":"Performance Tuning","text":""},{"location":"features/queued-tasks/technical/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Worker Scaling: Match worker count to workload and CPU cores</li> <li>Batch Processing: Group small tasks into batches</li> <li>Connection Pooling: Ensure proper database connection pool configuration</li> <li>Task Granularity: Balance task size - not too small, not too large</li> <li>Context Usage: Use <code>auto_commit=False</code> for frequent updates</li> </ol>"},{"location":"features/queued-tasks/technical/#database-indexing","title":"Database Indexing","text":"<p>Optimize task queries:</p> <pre><code>-- Index for task state queries\nCREATE INDEX idx_queued_tasks_state ON queued_tasks(state);\n\n-- Index for date-based queries\nCREATE INDEX idx_queued_tasks_date_enqueued ON queued_tasks(date_enqueued);\n\n-- Index for parent-child relationships\nCREATE INDEX idx_queued_tasks_parent ON queued_tasks(parent_task);\n</code></pre>"},{"location":"features/queued-tasks/technical/#production-deployment","title":"Production Deployment","text":""},{"location":"features/queued-tasks/technical/#multi-server-setup","title":"Multi-Server Setup","text":"<p>Deploy across multiple servers:</p> <pre><code># Server 1: HTTP + Workers\nfastedgy serve --workers=4\n\n# Server 2: Workers only\nfastedgy serve --workers=8 --no-http\n\n# Server 3: Workers only\nfastedgy serve --workers=8 --no-http\n</code></pre>"},{"location":"features/queued-tasks/technical/#health-checks","title":"Health Checks","text":"<p>Monitor queue health:</p> <pre><code>@router.get(\"/health/queue\")\nasync def queue_health():\n    try:\n        # Check database connectivity\n        await test_db_connection()\n\n        # Check if workers are responding\n        active_workers = await count_active_workers()\n\n        # Check for stuck tasks\n        stuck_tasks = await count_stuck_tasks()\n\n        if active_workers == 0:\n            return {\"status\": \"unhealthy\", \"reason\": \"no_active_workers\"}\n\n        if stuck_tasks &gt; 10:\n            return {\"status\": \"degraded\", \"reason\": \"tasks_stuck\"}\n\n        return {\"status\": \"healthy\", \"workers\": active_workers}\n\n    except Exception as e:\n        return {\"status\": \"unhealthy\", \"error\": str(e)}\n</code></pre>"},{"location":"features/queued-tasks/technical/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Task data backup:</p> <pre><code># Backup task tables\npg_dump -t queued_tasks -t queued_task_logs -t queued_task_workers your_db &gt; queue_backup.sql\n\n# Restore\npsql your_db &lt; queue_backup.sql\n</code></pre>"},{"location":"features/queued-tasks/technical/#integration-patterns","title":"Integration Patterns","text":""},{"location":"features/queued-tasks/technical/#with-container-service","title":"With Container Service","text":"<p>Tasks can use dependency injection:</p> <pre><code>from fastedgy.dependencies import get_service\n\nasync def service_using_task(data_id: int):\n    # Get services within task\n    email_service = get_service(EmailService)\n    db_service = get_service(DatabaseService)\n\n    # Use services\n    data = await db_service.get_data(data_id)\n    result = await email_service.send_report(data)\n\n    return result\n</code></pre>"},{"location":"features/queued-tasks/technical/#with-fastapi-middleware","title":"With FastAPI Middleware","text":"<p>Custom middleware for task context:</p> <pre><code>@app.middleware(\"http\")\nasync def task_context_middleware(request: Request, call_next):\n    # Set context for tasks triggered by this request\n    request_id = str(uuid.uuid4())\n\n    # Store in request state for access by endpoints\n    request.state.request_id = request_id\n\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"features/queued-tasks/technical/#security-considerations","title":"Security Considerations","text":""},{"location":"features/queued-tasks/technical/#task-isolation","title":"Task Isolation","text":"<p>Tasks run in the same process as workers, so:</p> <ul> <li>Validate all task inputs</li> <li>Sanitize data before processing</li> <li>Use resource limits to prevent abuse</li> <li>Consider sandboxing for untrusted code</li> </ul>"},{"location":"features/queued-tasks/technical/#access-control","title":"Access Control","text":"<pre><code># Restrict queue management endpoints\n@router.post(\"/admin/queue/clear\")\nasync def clear_queue(current_user: User = Depends(get_admin_user)):\n    # Only admins can manage queue\n    clear_all_tasks()\n    return {\"cleared\": True}\n</code></pre>"},{"location":"features/queued-tasks/technical/#migration-guide","title":"Migration Guide","text":""},{"location":"features/queued-tasks/technical/#from-other-task-queues","title":"From Other Task Queues","text":"<p>Migrating from Celery or similar:</p> <pre><code># Celery style\n@celery_app.task\ndef old_task(data):\n    return process_data(data)\n\n# FastEdgy style\nasync def new_task(data):\n    return await process_data(data)\n\n# Usage\n# old_task.delay(data)  # Celery\ntasks.add_task(new_task, data)  # FastEdgy\n</code></pre>"},{"location":"features/queued-tasks/technical/#quick-reference","title":"Quick Reference","text":""},{"location":"features/queued-tasks/technical/#cli-commands_1","title":"CLI Commands","text":"<pre><code>fastedgy queue status          # Check status\nfastedgy queue start -w 4      # Start workers\nfastedgy queue clear           # Clear tasks (dev)\n</code></pre>"},{"location":"features/queued-tasks/technical/#key-environment-variables","title":"Key Environment Variables","text":"<pre><code>QUEUE_MAX_WORKERS=4           # Worker count\nQUEUE_TASK_TIMEOUT=300        # Task timeout\nQUEUE_MAX_RETRIES=3           # Retry count\n</code></pre>"},{"location":"features/queued-tasks/technical/#monitoring-queries","title":"Monitoring Queries","text":"<pre><code>-- Task counts by state\nSELECT state, count(*) FROM queued_tasks GROUP BY state;\n\n-- Recent failures\nSELECT name, error_message, date_done FROM queued_tasks\nWHERE state = 'failed' AND date_done &gt; NOW() - INTERVAL '1 hour';\n</code></pre>"},{"location":"features/storage/guide/","title":"Storage - Usage guide","text":"<p>This guide shows you how to use the Storage service in your FastEdgy application.</p>"},{"location":"features/storage/guide/#configuration","title":"Configuration","text":"<p>Set the storage path in your environment file (<code>.env</code>):</p> <pre><code>DATA_PATH=./storage\nIMAGE_QUALITY=80\n</code></pre>"},{"location":"features/storage/guide/#file-organization","title":"File organization","text":"<p>Files are organized based on the <code>directory_path</code> you provide in your upload calls:</p> <ul> <li>Workspace storage (<code>global_storage=False</code>): <code>{DATA_PATH}/{workspace_id}/{directory_path}/</code></li> <li>Global storage (<code>global_storage=True</code>): <code>{DATA_PATH}/{directory_path}/</code></li> </ul> <p>Example with <code>DATA_PATH=./storage</code>: <pre><code>storage/\n\u251c\u2500\u2500 123/                # workspace_id=123 files\n\u2502   \u251c\u2500\u2500 photos/         # directory_path=\"photos\"\n\u2502   \u2502   \u2514\u2500\u2500 image.jpg\n\u2502   \u2514\u2500\u2500 avatars/        # directory_path=\"avatars\"\n\u2502       \u2514\u2500\u2500 avatar.png\n\u251c\u2500\u2500 456/                # workspace_id=456 files\n\u2502   \u2514\u2500\u2500 documents/      # directory_path=\"documents\"\n\u2502       \u2514\u2500\u2500 file.pdf\n\u251c\u2500\u2500 media/              # global_storage=True, directory_path=\"media\"\n\u2502   \u2514\u2500\u2500 shared.jpg\n\u2514\u2500\u2500 public/             # global_storage=True, directory_path=\"public\"\n    \u2514\u2500\u2500 logo.png\n</code></pre></p>"},{"location":"features/storage/guide/#file-upload","title":"File upload","text":""},{"location":"features/storage/guide/#basic-upload","title":"Basic upload","text":"<pre><code>from fastedgy.app import FastEdgy\nfrom fastedgy.dependencies import Inject\nfrom fastedgy.storage import Storage\nfrom fastapi import UploadFile, File\n\napp = FastEdgy()\n\n@app.post(\"/upload\")\nasync def upload_file(\n    file: UploadFile = File(...),\n    directory: str = \"photos\",\n    storage: Storage = Inject(Storage)\n):\n    # Upload to workspace-specific directory\n    file_path = await storage.upload(\n        file=file,\n        directory_path=directory\n    )\n    return {\"path\": file_path, \"filename\": file.filename}\n</code></pre>"},{"location":"features/storage/guide/#upload-with-custom-filename","title":"Upload with custom filename","text":"<pre><code>@app.post(\"/upload-avatar\")\nasync def upload_avatar(\n    file: UploadFile = File(...),\n    storage: Storage = Inject(Storage)\n):\n    file_path = await storage.upload(\n        file=file,\n        directory_path=\"avatars\",\n        filename=\"avatar.{ext}\"  # {ext} is replaced with file extension\n    )\n    return {\"avatar_path\": file_path}\n</code></pre>"},{"location":"features/storage/guide/#global-storage","title":"Global storage","text":"<pre><code>@app.post(\"/upload-global\")\nasync def upload_global(\n    file: UploadFile = File(...),\n    directory: str = \"shared\",\n    storage: Storage = Inject(Storage)\n):\n    # Upload to global directory (shared across workspaces)\n    file_path = await storage.upload(\n        file=file,\n        directory_path=directory,\n        global_storage=True\n    )\n    return {\"path\": file_path}\n</code></pre>"},{"location":"features/storage/guide/#model-field-upload","title":"Model field upload","text":"<p>Use the built-in API endpoints to upload directly to model fields:</p> <pre><code>from fastedgy.orm import Model, fields\nfrom fastedgy.api_route_model import api_route_model\n\n@api_route_model()\nclass User(Model):\n    name = fields.CharField(max_length=100)\n    avatar = fields.CharField(max_length=255, null=True)\n\n    class Meta:\n        tablename = \"users\"\n</code></pre> <p>Upload to the model field: <pre><code># Upload avatar for user ID 123\nPOST /storage/upload/user/123/avatar\nContent-Type: multipart/form-data\n\nfile: [image file]\n</code></pre></p>"},{"location":"features/storage/guide/#download-files","title":"Download files","text":"<p>The built-in endpoint handles file serving:</p> <pre><code># Download file\nGET /storage/download/photos/image.jpg\n\n# Force download (with Content-Disposition header)\nGET /storage/download/photos/image.jpg?force_download=true\n</code></pre>"},{"location":"features/storage/guide/#image-optimization","title":"Image optimization","text":"<p>FastEdgy automatically optimizes images when you add URL parameters. Optimized images are cached for better performance.</p>"},{"location":"features/storage/guide/#resize-images","title":"Resize images","text":"<pre><code># Resize by width (maintains aspect ratio)\nGET /storage/download/photos/image.jpg?w=300\n\n# Resize by height (maintains aspect ratio)\nGET /storage/download/photos/image.jpg?h=200\n\n# Resize to fit within 800x600 box\nGET /storage/download/photos/image.jpg?w=800&amp;h=600\n</code></pre>"},{"location":"features/storage/guide/#resize-modes","title":"Resize modes","text":"<p>Control how images are resized when both width and height are specified:</p> <pre><code># Contain: fit inside box (no cropping, may have empty space)\nGET /storage/download/photos/image.jpg?w=300&amp;h=200&amp;m=contain\n\n# Cover: fill entire box (crops if needed for perfect fit)\nGET /storage/download/photos/image.jpg?w=300&amp;h=200&amp;m=cover\n</code></pre>"},{"location":"features/storage/guide/#format-conversion","title":"Format conversion","text":"<p>Convert images to modern formats for better performance:</p> <pre><code># Convert to WebP (smaller file size)\nGET /storage/download/photos/image.jpg?e=webp\n\n# Convert to PNG\nGET /storage/download/photos/image.jpg?e=png\n\n# Resize and convert in one request\nGET /storage/download/photos/image.jpg?w=500&amp;e=webp\n</code></pre>"},{"location":"features/storage/guide/#common-use-cases","title":"Common use cases","text":"<p>User avatars (square thumbnails): <pre><code>GET /storage/download/avatars/user-123.jpg?w=150&amp;h=150&amp;m=cover&amp;e=webp\n</code></pre></p> <p>Responsive images (different sizes for mobile/desktop): <pre><code># Mobile\nGET /storage/download/photos/hero.jpg?w=400&amp;e=webp\n\n# Desktop\nGET /storage/download/photos/hero.jpg?w=1200&amp;e=webp\n</code></pre></p> <p>Product thumbnails (consistent grid layout): <pre><code>GET /storage/download/products/456.jpg?w=250&amp;h=250&amp;m=cover\n</code></pre></p>"},{"location":"features/storage/guide/#url-parameters","title":"URL parameters","text":"<ul> <li><code>w</code>: Width in pixels</li> <li><code>h</code>: Height in pixels</li> <li><code>m</code>: Resize mode (<code>contain</code> or <code>cover</code>)</li> <li><code>e</code>: Output format (<code>jpg</code>, <code>png</code>, <code>webp</code>)</li> <li><code>force_download</code>: Force file download instead of display</li> </ul>"},{"location":"features/storage/guide/#upload-from-url","title":"Upload from URL","text":"<pre><code>@app.post(\"/upload-from-url\")\nasync def upload_from_url(\n    url: str,\n    directory: str = \"external\",\n    storage: Storage = Inject(Storage)\n):\n    file_path = await storage.download_and_upload(\n        file_url=url,\n        directory_path=directory\n    )\n    return {\"path\": file_path}\n</code></pre>"},{"location":"features/storage/guide/#upload-from-base64","title":"Upload from base64","text":"<pre><code>@app.post(\"/upload-base64\")\nasync def upload_base64(\n    data: str,  # base64-encoded image\n    directory: str = \"images\",\n    storage: Storage = Inject(Storage)\n):\n    file_path = await storage.upload_from_base64(\n        data=data,\n        directory_path=directory\n    )\n    return {\"path\": file_path}\n</code></pre>"},{"location":"features/storage/guide/#error-handling","title":"Error handling","text":"<p>The Storage service validates files automatically:</p> <ul> <li>File type: Only images are accepted</li> <li>Extensions: JPG, JPEG, PNG, GIF, WEBP</li> <li>Filename: Must be provided</li> </ul> <pre><code>@app.post(\"/safe-upload\")\nasync def safe_upload(\n    file: UploadFile = File(...),\n    directory: str = \"files\",\n    storage: Storage = Inject(Storage)\n):\n    try:\n        file_path = await storage.upload(\n            file=file,\n            directory_path=directory\n        )\n        return {\"success\": True, \"path\": file_path}\n    except ValueError as e:\n        return {\"success\": False, \"error\": str(e)}\n</code></pre> <p>Back to Overview</p>"},{"location":"features/storage/image-optimization/","title":"Image Optimization","text":"<p>Automatic image processing with intelligent caching</p> <p>FastEdgy automatically optimizes images on-the-fly with intelligent caching. Transform, resize, and convert your images directly through URL parameters without any additional setup.</p>"},{"location":"features/storage/image-optimization/#key-features","title":"Key Features","text":"<ul> <li>Automatic resizing: Resize images by width, height, or both</li> <li>Smart caching: Generated images are cached to avoid reprocessing</li> <li>Format conversion: Convert between JPEG, PNG, and WebP formats</li> <li>Responsive images: Perfect for modern web applications</li> <li>No upscaling: Never enlarges images beyond their original size</li> <li>Memory efficient: Optimized processing with quality control</li> </ul>"},{"location":"features/storage/image-optimization/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>User avatars: Square thumbnails with consistent sizing</li> <li>Responsive images: Different sizes for mobile and desktop</li> <li>Product galleries: Uniform thumbnails for better layouts</li> <li>Performance optimization: WebP conversion for faster loading</li> <li>Modern formats: Automatic format selection for better compression</li> </ul>"},{"location":"features/storage/image-optimization/#basic-usage","title":"Basic Usage","text":"<p>Add URL parameters to any image download URL:</p> <pre><code># Resize to 300px width (maintains aspect ratio)\nGET /storage/download/photos/image.jpg?w=300\n\n# Create 150x150 square thumbnail with cropping\nGET /storage/download/photos/image.jpg?w=150&amp;h=150&amp;m=cover\n\n# Convert to WebP format with resizing\nGET /storage/download/photos/image.jpg?w=800&amp;e=webp\n</code></pre>"},{"location":"features/storage/image-optimization/#url-parameters","title":"URL Parameters","text":"<ul> <li><code>w</code>: Width in pixels</li> <li><code>h</code>: Height in pixels</li> <li><code>m</code>: Resize mode (<code>contain</code> or <code>cover</code>)</li> <li><code>e</code>: Output format (<code>jpg</code>, <code>png</code>, <code>webp</code>)</li> <li><code>force_download</code>: Force file download instead of display</li> </ul>"},{"location":"features/storage/image-optimization/#resize-modes","title":"Resize Modes","text":"<p>Contain mode (default): Fits the image inside the specified dimensions without cropping. May leave empty space if aspect ratios don't match.</p> <p>Cover mode: Fills the entire specified dimensions, cropping the image if necessary to maintain perfect fit.</p>"},{"location":"features/storage/image-optimization/#configuration","title":"Configuration","text":"<p>Set image quality in your environment file:</p> <pre><code>IMAGE_QUALITY=80  # 1-100, higher = better quality but larger files\n</code></pre>"},{"location":"features/storage/image-optimization/#how-it-works","title":"How It Works","text":"<ol> <li>Request: Client requests image with optimization parameters</li> <li>Cache check: System checks if optimized version already exists</li> <li>Generation: If not cached, image is processed and saved</li> <li>Serving: Optimized image is served with proper content type</li> <li>Cleanup: Cache is automatically cleaned when source files are deleted</li> </ol>"},{"location":"features/storage/image-optimization/#performance-benefits","title":"Performance Benefits","text":"<ul> <li>Bandwidth savings: Smaller file sizes with WebP conversion</li> <li>Faster loading: Optimized images load quicker on all devices</li> <li>CDN friendly: Cached images work perfectly with CDNs</li> <li>Server efficient: Processing happens once, served many times</li> </ul> <p>Ready to optimize your images? Check out practical examples:</p> <p>Usage Guide</p>"},{"location":"features/storage/overview/","title":"Storage","text":"<p>FastEdgy provides a built-in Storage service for handling file uploads, downloads, and management. It supports workspace-based file isolation and integrates seamlessly with your models.</p>"},{"location":"features/storage/overview/#key-features","title":"Key features","text":"<ul> <li>File uploads: Upload images via API endpoints</li> <li>Workspace isolation: Files are automatically organized by workspace</li> <li>Model integration: Direct upload to model fields</li> <li>Multiple formats: Support for UploadFile, base64, and URL downloads</li> <li>REST API: Built-in endpoints for upload/download/delete operations</li> <li>Image validation: Automatic validation for supported image formats</li> <li>Image optimization: Automatic resizing, format conversion, and caching</li> </ul>"},{"location":"features/storage/overview/#supported-formats","title":"Supported formats","text":"<ul> <li>Images: JPG, JPEG, PNG, GIF, WEBP</li> <li>Upload methods: File upload, base64 data, URL download</li> </ul>"},{"location":"features/storage/overview/#basic-usage","title":"Basic usage","text":"<pre><code>from fastedgy.dependencies import Inject\nfrom fastedgy.storage import Storage\nfrom fastapi import UploadFile\n\nasync def upload_file(\n    file: UploadFile,\n    directory: str,\n    storage: Storage = Inject(Storage)\n):\n    # Upload to specified directory\n    file_path = await storage.upload(\n        file=file,\n        directory_path=directory\n    )\n    return {\"path\": file_path}\n</code></pre>"},{"location":"features/storage/overview/#image-optimization","title":"Image optimization","text":"<p>FastEdgy includes automatic image optimization with URL parameters. Transform, resize, and convert images on-the-fly with intelligent caching.</p> <ul> <li>On-demand processing: Add URL parameters to resize or convert images</li> <li>Smart caching: Optimized images are cached for better performance</li> <li>Modern formats: Convert to WebP for smaller file sizes</li> <li>Responsive ready: Perfect for mobile and desktop layouts</li> </ul> <p>Learn more about Image Optimization \u2192</p>"},{"location":"features/storage/overview/#configuration","title":"Configuration","text":"<p>Set the storage path and image quality in your environment file (<code>.env</code>):</p> <pre><code>DATA_PATH=/path/to/storage\nIMAGE_QUALITY=80\n</code></pre> <p>Files are organized based on the <code>directory_path</code> you provide: <pre><code>data/\n\u251c\u2500\u2500 {workspace_id}/    # Workspace storage\n\u2502   \u2514\u2500\u2500 {directory_path}/\n\u2502       \u2514\u2500\u2500 file.jpg\n\u2514\u2500\u2500 {directory_path}/  # Global storage (root level)\n    \u2514\u2500\u2500 file.jpg\n</code></pre></p>"},{"location":"features/storage/overview/#built-in-api-endpoints","title":"Built-in API endpoints","text":"<p>The Storage service provides REST endpoints:</p> <ul> <li><code>POST /storage/upload/{model}/{model_id}/{field}</code> - Upload to model field</li> <li><code>GET /storage/download/{path}</code> - Download file</li> <li><code>DELETE /storage/file/{model}/{model_id}/{field}</code> - Delete model field file</li> </ul>"},{"location":"features/storage/overview/#use-cases","title":"Use cases","text":"<ul> <li>User avatars: Profile picture uploads</li> <li>Document storage: File attachments</li> <li>Image galleries: Product photos, media content</li> <li>Workspace files: Team-specific file storage</li> </ul>"},{"location":"features/storage/overview/#get-started","title":"Get started","text":"<p>Ready to handle file uploads? Learn how to implement the Storage service:</p> <p>Usage Guide</p>"},{"location":"features/view-transformers/guide/","title":"View Transformers - Detailed Guide","text":"<p>This guide provides detailed examples and implementation patterns for each type of View Transformer.</p>"},{"location":"features/view-transformers/guide/#registration","title":"Registration","text":"<p>View Transformers are registered through the <code>ViewTransformerRegistry</code>:</p> <pre><code>from fastedgy.api_route_model.registry import ViewTransformerRegistry\nfrom fastedgy.dependencies import get_service\n\n# Get the registry service\nvtr = get_service(ViewTransformerRegistry)\n\n# Register for specific model\nvtr.register_transformer(YourTransformer(), YourModel)\n\n# Register globally (applies to all models)\nvtr.register_transformer(GlobalTransformer())\n</code></pre>"},{"location":"features/view-transformers/guide/#prepaginateviewtransformer","title":"PrePaginateViewTransformer","text":"<p>Modifies the database query before data retrieval and pagination.</p> <pre><code>from fastedgy.api_route_model.view_transformer import PrePaginateViewTransformer\nfrom fastedgy.http import Request\nfrom fastedgy.orm.query import QuerySet, Q\nfrom typing import Any\n\nclass QueryOptimizationTransformer(PrePaginateViewTransformer):\n    \"\"\"Optimize queries based on requested fields.\"\"\"\n\n    async def pre_paginate(\n        self, request: Request, query: QuerySet, ctx: dict[str, Any]\n    ) -&gt; QuerySet:\n        # Get requested fields from X-Fields header\n        fields_header = request.headers.get('X-Fields', '')\n        requested_fields = fields_header.split(',') if fields_header else []\n        ctx['requested_fields'] = requested_fields\n\n        # Optimize query based on requested fields\n        if any('user.' in field for field in requested_fields):\n            query = query.select_related('user')\n\n        if any('category.' in field for field in requested_fields):\n            query = query.select_related('category')\n\n        if 'tags' in requested_fields:\n            query = query.prefetch_related('tags')\n\n        return query\n\nclass ResponseOrderingTransformer(PrePaginateViewTransformer):\n    \"\"\"Apply default ordering when no explicit ordering is requested.\"\"\"\n\n    async def pre_paginate(\n        self, request: Request, query: QuerySet, ctx: dict[str, Any]\n    ) -&gt; QuerySet:\n        # Only apply default ordering if no order_by parameter is provided\n        order_by = request.query_params.get('order_by')\n        if not order_by:\n            # Apply default ordering for consistent API responses\n            query = query.order_by('-created_at', 'id')\n\n        return query\n</code></pre>"},{"location":"features/view-transformers/guide/#getviewtransformer","title":"GetViewTransformer","text":"<p>Transforms individual item dictionaries after serialization.</p> <pre><code>from fastedgy.api_route_model.view_transformer import GetViewTransformer\nfrom fastedgy.http import Request\nfrom typing import Any\n\nclass DataFormattingTransformer(GetViewTransformer):\n    \"\"\"Format data for display purposes.\"\"\"\n\n    async def get_view(\n        self, request: Request, item, item_dump: dict[str, Any], ctx: dict[str, Any]\n    ) -&gt; dict[str, Any]:\n        # Format price for display\n        if 'price' in item_dump and item_dump['price'] is not None:\n            item_dump['price_formatted'] = f\"${float(item_dump['price']):.2f}\"\n\n        # Format dates for display\n        if 'created_at' in item_dump and item_dump['created_at']:\n            from datetime import datetime\n            if isinstance(item_dump['created_at'], str):\n                dt = datetime.fromisoformat(item_dump['created_at'].replace('Z', '+00:00'))\n                item_dump['created_at_formatted'] = dt.strftime('%B %d, %Y')\n\n        # Add computed display fields\n        if 'first_name' in item_dump and 'last_name' in item_dump:\n            item_dump['full_name'] = f\"{item_dump['first_name']} {item_dump['last_name']}\"\n\n        return item_dump\n\nclass DataMaskingTransformer(GetViewTransformer):\n    \"\"\"Mask sensitive data for display purposes.\"\"\"\n\n    async def get_view(\n        self, request: Request, item, item_dump: dict[str, Any], ctx: dict[str, Any]\n    ) -&gt; dict[str, Any]:\n        # Mask email addresses for privacy\n        if 'email' in item_dump and item_dump['email']:\n            email = item_dump['email']\n            item_dump['email_masked'] = f\"{email[:2]}***@{email.split('@')[1]}\"\n\n        # Remove internal fields from API responses\n        internal_fields = ['internal_id', 'debug_info', 'system_notes']\n        for field in internal_fields:\n            item_dump.pop(field, None)\n\n        return item_dump\n</code></pre>"},{"location":"features/view-transformers/guide/#getviewstransformer","title":"GetViewsTransformer","text":"<p>Processes collections of items before individual transformation.</p> <pre><code>from fastedgy.api_route_model.view_transformer import GetViewsTransformer\nfrom fastedgy.http import Request\nfrom typing import Any\n\nclass RelatedDataCacheTransformer(GetViewsTransformer):\n    \"\"\"Cache related data to optimize individual item transformations.\"\"\"\n\n    async def get_views(\n        self, request: Request, items: list, ctx: dict[str, Any]\n    ) -&gt; None:\n        # Only fetch related data if it will be used in responses\n        requested_fields = ctx.get('requested_fields', [])\n\n        # Cache categories if category data is requested\n        if any('category' in field for field in requested_fields):\n            category_ids = [item.category_id for item in items if hasattr(item, 'category_id')]\n            if category_ids:\n                categories = await Category.objects.filter(id__in=category_ids).all()\n                ctx['categories_cache'] = {cat.id: cat for cat in categories}\n\n        # Cache user data if user fields are requested\n        if any('user' in field for field in requested_fields):\n            user_ids = [item.user_id for item in items if hasattr(item, 'user_id')]\n            if user_ids:\n                users = await User.objects.filter(id__in=user_ids).all()\n                ctx['users_cache'] = {user.id: user for user in users}\n</code></pre>"},{"location":"features/view-transformers/guide/#postpaginateviewtransformer","title":"PostPaginateViewTransformer","text":"<p>Modifies the final pagination response.</p> <pre><code>from fastedgy.api_route_model.view_transformer import PostPaginateViewTransformer\nfrom fastedgy.http import Request\nfrom fastedgy.schemas.base import Pagination\nfrom typing import Any\n\nclass MetadataEnricherTransformer(PostPaginateViewTransformer):\n    \"\"\"Add metadata to pagination response.\"\"\"\n\n    async def post_paginate(\n        self, request: Request, pagination: Pagination, ctx: dict[str, Any]\n    ) -&gt; None:\n        # Add response metadata for client information\n        pagination.metadata = {\n            'request_timestamp': request.state.start_time if hasattr(request.state, 'start_time') else None,\n            'response_format': 'paginated',\n            'fields_selected': bool(request.headers.get('X-Fields')),\n            'filters_applied': bool(request.headers.get('X-Filter')),\n            'total_pages': (pagination.total + pagination.limit - 1) // pagination.limit if pagination.limit else 1\n        }\n\nclass AnalyticsTrackingTransformer(PostPaginateViewTransformer):\n    \"\"\"Track API usage for analytics.\"\"\"\n\n    async def post_paginate(\n        self, request: Request, pagination: Pagination, ctx: dict[str, Any]\n    ) -&gt; None:\n        # Log API usage (fire and forget)\n        import asyncio\n        asyncio.create_task(self._log_usage(request, pagination))\n\n    async def _log_usage(self, request: Request, pagination: Pagination):\n        # Your analytics logging logic here\n        pass\n</code></pre>"},{"location":"features/view-transformers/guide/#presavetransformer-postsavetransformer","title":"PreSaveTransformer &amp; PostSaveTransformer","text":"<p>Handle data during create/update operations.</p> <pre><code>from fastedgy.api_route_model.view_transformer import PreSaveTransformer, PostSaveTransformer\nfrom fastedgy.http import Request\nfrom pydantic import BaseModel\nfrom typing import Any\n\nclass AuditTransformer(PreSaveTransformer):\n    \"\"\"Add audit fields before saving.\"\"\"\n\n    async def pre_save(\n        self, request: Request, item, item_data: BaseModel, ctx: dict[str, Any]\n    ) -&gt; None:\n        user_id = request.headers.get('X-User-ID')\n\n        # Set audit fields\n        if hasattr(item, 'created_by') and not item.created_by:\n            item.created_by = user_id\n\n        if hasattr(item, 'updated_by'):\n            item.updated_by = user_id\n\nclass NotificationTransformer(PostSaveTransformer):\n    \"\"\"Send notifications after successful save.\"\"\"\n\n    async def post_save(\n        self, request: Request, item, item_data: BaseModel, ctx: dict[str, Any]\n    ) -&gt; None:\n        # Send notification (async)\n        import asyncio\n        asyncio.create_task(self._send_notification(item, ctx))\n\n    async def _send_notification(self, item, ctx: dict[str, Any]):\n        # Your notification logic here\n        pass\n</code></pre>"},{"location":"features/view-transformers/guide/#context-usage","title":"Context Usage","text":"<p>Context dictionary allows sharing data between transformers:</p> <pre><code># In PrePaginateViewTransformer - Share data between transformers\nctx['requested_fields'] = request.headers.get('X-Fields', '').split(',')\nctx['response_format'] = request.headers.get('Accept', 'application/json')\n\n# In GetViewTransformer - Use shared context\nrequested_fields = ctx.get('requested_fields', [])\nif 'details' not in requested_fields:\n    # Skip expensive detail formatting\n</code></pre>"},{"location":"features/view-transformers/guide/#best-practices","title":"Best Practices","text":"<ul> <li>Performance: Use <code>GetViewsTransformer</code> for bulk operations</li> <li>Context: Share expensive computations via context dictionary</li> <li>Error Handling: Use proper HTTP exceptions for client errors</li> <li>Async Operations: Use <code>asyncio.create_task()</code> for fire-and-forget operations</li> <li>Testing: Test transformers independently with mock requests and contexts</li> <li>Registration: Register transformers during app startup, not in route handlers</li> </ul>"},{"location":"features/view-transformers/guide/#next-steps","title":"Next Steps","text":"<p>Ready to implement View Transformers in your application?</p> <p>Back to Overview</p>"},{"location":"features/view-transformers/overview/","title":"View Transformers","text":"<p>View Transformers provide hooks to customize generated API endpoints' data presentation and access control. They are designed for API-specific transformations, not business logic implementation.</p> <p>Business Logic Separation</p> <p>View Transformers are for API endpoint customization only. Business logic belongs in ORM signals, model methods, or service layers. Using transformers for business logic is equivalent to putting business rules in API controllers.</p>"},{"location":"features/view-transformers/overview/#key-features","title":"Key Features","text":"<ul> <li>Multiple Hook Points: Transform data at 6 different stages of the request lifecycle</li> <li>Query Modification: Modify database queries before execution</li> <li>Data Transformation: Transform individual items or collections after retrieval</li> <li>Save Lifecycle: Hook into create/update operations before and after saving</li> <li>Context Passing: Share data between transformers through context dictionary</li> <li>Model-Specific: Register transformers globally or for specific models</li> </ul>"},{"location":"features/view-transformers/overview/#transformer-types","title":"Transformer Types","text":"<p>View Transformers operate at different stages of the API request lifecycle:</p>"},{"location":"features/view-transformers/overview/#query-stage","title":"Query Stage","text":"<ul> <li><code>PrePaginateViewTransformer</code>: Modifies the <code>QuerySet</code> before pagination and data retrieval</li> </ul>"},{"location":"features/view-transformers/overview/#retrieval-stage","title":"Retrieval Stage","text":"<ul> <li><code>PostPaginateViewTransformer</code>: Modifies the <code>Pagination</code> object after data retrieval</li> <li><code>GetViewsTransformer</code>: Processes a list of items before individual transformation</li> <li><code>GetViewTransformer</code>: Transforms individual item dictionaries after serialization</li> </ul>"},{"location":"features/view-transformers/overview/#save-stage","title":"Save Stage","text":"<ul> <li><code>PreSaveTransformer</code>: Processes items before saving (Create/Update operations)</li> <li><code>PostSaveTransformer</code>: Processes items after saving (Create/Update operations)</li> </ul>"},{"location":"features/view-transformers/overview/#request-flow-integration","title":"Request Flow Integration","text":"<p>View Transformers integrate seamlessly into the API Routes Generator request flow:</p> <pre><code>1. Request \u2192 PrePaginateViewTransformer \u2192 Query Execution\n2. Query Results \u2192 GetViewsTransformer \u2192 Individual Processing\n3. Each Item \u2192 GetViewTransformer \u2192 Response Serialization\n4. Pagination \u2192 PostPaginateViewTransformer \u2192 Final Response\n</code></pre> <p>For Create/Update operations: <pre><code>1. Request Data \u2192 PreSaveTransformer \u2192 Database Save\n2. Saved Item \u2192 PostSaveTransformer \u2192 Response\n</code></pre></p>"},{"location":"features/view-transformers/overview/#quick-example","title":"Quick Example","text":"<pre><code>from fastedgy.api_route_model.view_transformer import (\n    PrePaginateViewTransformer,\n    GetViewTransformer\n)\nfrom fastedgy.api_route_model.registry import ViewTransformerRegistry\nfrom fastedgy.dependencies import get_service\nfrom fastedgy.http import Request\nfrom fastedgy.orm.query import QuerySet\nfrom typing import Any, Dict\n\nclass QueryOptimizationTransformer(PrePaginateViewTransformer):\n    \"\"\"Optimize queries based on requested fields.\"\"\"\n\n    async def pre_paginate(\n        self, request: Request, query: QuerySet, ctx: dict[str, Any]\n    ) -&gt; QuerySet:\n        # Get requested fields from X-Fields header\n        fields_header = request.headers.get('X-Fields', '')\n        requested_fields = fields_header.split(',') if fields_header else []\n        ctx['requested_fields'] = requested_fields\n\n        # Optimize query based on requested fields\n        if any('user.' in field for field in requested_fields):\n            query = query.select_related('user')\n\n        if any('category.' in field for field in requested_fields):\n            query = query.select_related('category')\n\n        return query\n\nclass DataFormattingTransformer(GetViewTransformer):\n    \"\"\"Format data for display purposes.\"\"\"\n\n    async def get_view(\n        self, request: Request, item, item_dump: dict[str, Any], ctx: dict[str, Any]\n    ) -&gt; dict[str, Any]:\n        # Format price for display\n        if 'price' in item_dump and item_dump['price'] is not None:\n            item_dump['price_formatted'] = f\"${float(item_dump['price']):.2f}\"\n\n        # Format dates for display\n        if 'created_at' in item_dump and item_dump['created_at']:\n            from datetime import datetime\n            if isinstance(item_dump['created_at'], str):\n                dt = datetime.fromisoformat(item_dump['created_at'].replace('Z', '+00:00'))\n                item_dump['created_at_formatted'] = dt.strftime('%B %d, %Y')\n\n        return item_dump\n\n# Register transformers during app startup\ndef setup_transformers():\n    vtr = get_service(ViewTransformerRegistry)\n\n    # Register for specific model\n    vtr.register_transformer(QueryOptimizationTransformer(), Product)\n    vtr.register_transformer(DataFormattingTransformer(), Product)\n</code></pre>"},{"location":"features/view-transformers/overview/#appropriate-use-cases","title":"Appropriate Use Cases","text":""},{"location":"features/view-transformers/overview/#good-uses-api-customization","title":"Good Uses (API Customization)","text":"<ul> <li>Data Presentation: Format values for display (currencies, dates, numbers)</li> <li>Data Masking: Hide sensitive fields in responses</li> <li>Response Enrichment: Add computed display fields (full names, formatted values)</li> <li>Query Optimization: Add select_related based on requested fields</li> <li>Response Metadata: Add pagination info, request timestamps</li> <li>Format Adaptation: Customize responses for different clients (mobile, web)</li> </ul>"},{"location":"features/view-transformers/overview/#avoid-business-logic","title":"Avoid (Business Logic)","text":"<ul> <li>Data Validation: Use Pydantic schemas or model validation</li> <li>Business Calculations: Use ORM signals or model methods</li> <li>State Changes: Use ORM signals (pre_save, post_save)</li> <li>External Integrations: Use background tasks or services</li> <li>Complex Workflows: Use service layers or domain logic</li> </ul>"},{"location":"features/view-transformers/overview/#architecture-benefits","title":"Architecture Benefits","text":"<ul> <li>Separation of Concerns: Keep business logic separate from route definitions</li> <li>Reusability: Share transformers across multiple models and endpoints</li> <li>Testability: Test transformation logic independently</li> <li>Maintainability: Centralize data transformation logic</li> <li>Flexibility: Combine multiple transformers for complex scenarios</li> </ul>"},{"location":"features/view-transformers/overview/#get-started","title":"Get Started","text":"<p>Ready to implement custom data transformations? Learn how to create and register your first View Transformer.</p> <p>Get Started</p>"},{"location":"vue/basic-usage/","title":"Basic Usage","text":"<p>Once Vue-FastEdgy is installed and configured, you can start using its features in your Vue components:</p>"},{"location":"vue/basic-usage/#using-the-fetcher","title":"Using the Fetcher","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Users List&lt;/h2&gt;\n    &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n    &lt;div v-else-if=\"error\" class=\"error\"&gt;{{ error }}&lt;/div&gt;\n    &lt;ul v-else&gt;\n      &lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n        {{ user.name }} - {{ user.email }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref, onMounted } from 'vue'\nimport { useFetcher } from 'vue-fastedgy'\n\nconst fetcher = useFetcher()\nconst users = ref([])\nconst loading = ref(false)\nconst error = ref(null)\n\nconst fetchUsers = async () =&gt; {\n  try {\n    loading.value = true\n    error.value = null\n    const response = await fetcher.get('/users')\n    users.value = response.data\n  } catch (err) {\n    error.value = err.message\n  } finally {\n    loading.value = false\n  }\n}\n\nonMounted(() =&gt; {\n  fetchUsers()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/basic-usage/#using-the-auth-store","title":"Using the Auth Store","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=\"authStore.isAuthenticated\"&gt;\n      &lt;p&gt;Welcome, {{ authStore.user.name }}!&lt;/p&gt;\n      &lt;button @click=\"logout\"&gt;Logout&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div v-else&gt;\n      &lt;form @submit.prevent=\"handleLogin\"&gt;\n        &lt;div&gt;\n          &lt;label&gt;Email:&lt;/label&gt;\n          &lt;input v-model=\"loginData.email\" type=\"email\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;label&gt;Password:&lt;/label&gt;\n          &lt;input v-model=\"loginData.password\" type=\"password\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" :disabled=\"loading\"&gt;\n          {{ loading ? 'Signing in...' : 'Sign in' }}\n        &lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\nimport { reactive, ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst authStore = useAuthStore()\nconst router = useRouter()\n\nconst loginData = reactive({\n  email: '',\n  password: ''\n})\n\nconst loading = ref(false)\n\nconst handleLogin = async () =&gt; {\n  if (!loginData.email || !loginData.password) return\n\n  loading.value = true\n  try {\n    const result = await authStore.login(loginData)\n\n    if (!result.success) {\n      console.error(result.message || 'Login failed')\n      return\n    }\n\n    // Redirect after successful login\n    router.push({ name: 'Dashboard' })\n  } catch (error) {\n    console.error('Login error:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst logout = async () =&gt; {\n  await authStore.logout()\n  router.push({ name: 'Login' })\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/basic-usage/#next-steps","title":"Next Steps","text":"<p>Now that Vue-FastEdgy is set up, explore the available features:</p> <ul> <li>Bus - Event bus for component communication</li> <li>Fetcher - HTTP client for API communication</li> <li>Fetcher Plugin - Vue plugin for global fetcher access</li> <li>Fetcher Directive - Vue directive for declarative data fetching</li> <li>I18n Directive - Vue directive for simplified translations</li> <li>Metadata Store - Dynamic form and UI generation</li> <li>Auth Store - Authentication state management</li> <li>Validation Helpers - API error formatting utilities</li> <li>Router Helpers - Route manipulation utilities</li> <li>Logger - Console logging management</li> </ul> <p>Ready to build amazing applications with Vue.js and FastEdgy!</p>"},{"location":"vue/getting-started/","title":"Vue.js Integration - Getting Started","text":"<p>Learn how to integrate Vue-FastEdgy with your Vue.js application to connect seamlessly with your FastEdgy backend.</p>"},{"location":"vue/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Vue 3.0+</li> <li>Node.js 22.0+</li> <li>NPM or Yarn package manager</li> <li>A FastEdgy backend application running</li> </ul>"},{"location":"vue/getting-started/#installation","title":"Installation","text":"<p>Vue-FastEdgy is available as an NPM package from GitHub. Install it using your preferred package manager:</p>"},{"location":"vue/getting-started/#using-npm","title":"Using NPM","text":"<pre><code>npm install git+ssh://git@github.com:krafterio/vue-fastedgy.git#main\n</code></pre>"},{"location":"vue/getting-started/#using-yarn","title":"Using Yarn","text":"<pre><code>yarn add git+ssh://git@github.com:krafterio/vue-fastedgy.git#main\n</code></pre>"},{"location":"vue/getting-started/#using-pnpm","title":"Using PNPM","text":"<pre><code>pnpm add git+ssh://git@github.com:krafterio/vue-fastedgy.git#main\n</code></pre>"},{"location":"vue/getting-started/#basic-setup","title":"Basic Setup","text":""},{"location":"vue/getting-started/#1-create-your-vue-application","title":"1. Create your Vue application","text":"<p>If you don't have a Vue application yet, create one using Vue CLI or Vite:</p> <pre><code># Using Vite (recommended)\nnpm create vue@latest my-fastedgy-app\ncd my-fastedgy-app\nnpm install\n\n# Using Vue CLI\nvue create my-fastedgy-app\ncd my-fastedgy-app\n</code></pre>"},{"location":"vue/getting-started/#2-set-up-environment-variables","title":"2. Set up environment variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nBASE_URL=http://localhost:8000/api\n</code></pre>"},{"location":"vue/getting-started/#3-initialize-vue-fastedgy-in-your-mainjs","title":"3. Initialize Vue-FastEdgy in your main.js","text":"<p><code>src/main.js</code>: <pre><code>import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport { createFetcher } from 'vue-fastedgy'\nimport App from './App.vue'\n\nconst app = createApp(App)\nconst pinia = createPinia()\n\n// Create fetcher (uses BASE_URL environment variable automatically)\nconst fetcher = createFetcher()\n\n// Use Pinia for state management\napp.use(pinia)\n\n// Use Vue-FastEdgy fetcher\napp.use(fetcher)\n\napp.mount('#app')\n</code></pre></p>"},{"location":"vue/getting-started/#whats-next","title":"What's Next?","text":"<p>Your Vue-FastEdgy setup is complete! Continue with basic usage examples:</p> <p>Basic Usage</p>"},{"location":"vue/troubleshooting/","title":"Vue.js Integration - Troubleshooting","text":"<p>Common issues and solutions when working with Vue-FastEdgy integration.</p>"},{"location":"vue/troubleshooting/#cors-issues","title":"CORS Issues","text":"<p>If you encounter CORS errors, ensure your FastEdgy backend is configured to accept requests from your Vue.js development server:</p> <pre><code># In your FastEdgy main.py\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # Your Vue dev server URL\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"vue/troubleshooting/#environment-variable-not-loading","title":"Environment Variable Not Loading","text":"<p>Make sure your <code>.env</code> file is in the project root and that <code>BASE_URL</code> is properly set:</p> <pre><code># Correct format\nBASE_URL=http://localhost:8000/api\n\n# Not like this\nBASE_URL=\"http://localhost:8000/api\"  # Remove quotes\n</code></pre>"},{"location":"vue/troubleshooting/#module-not-found","title":"Module Not Found","text":"<p>If you get module import errors, ensure the package was installed correctly:</p> <pre><code>npm ls vue-fastedgy\n# Should show the package in the dependency tree\n</code></pre>"},{"location":"vue/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"vue/troubleshooting/#token-not-persisted","title":"Token Not Persisted","text":"<p>If user sessions are not persisting across browser refreshes:</p> <pre><code>// Check if localStorage is working\nconsole.log('Token:', localStorage.getItem('access_token'))\n\n// Clear storage if corrupted\nlocalStorage.removeItem('access_token')\nlocalStorage.removeItem('refresh_token')\n</code></pre>"},{"location":"vue/troubleshooting/#login-method-not-working","title":"Login Method Not Working","text":"<p>Ensure the auth store login method is called correctly:</p> <pre><code>const result = await authStore.login(loginData)\n\nif (!result.success) {\n  console.error('Login failed:', result.message)\n  // Handle error appropriately\n}\n</code></pre>"},{"location":"vue/troubleshooting/#network-issues","title":"Network Issues","text":""},{"location":"vue/troubleshooting/#api-calls-failing","title":"API Calls Failing","text":"<p>Check that your <code>BASE_URL</code> environment variable matches your FastEdgy backend:</p> <pre><code># Development\nBASE_URL=http://localhost:8000/api\n\n# Make sure the /api suffix is included\n# FastEdgy typically serves API routes under /api\n</code></pre>"},{"location":"vue/troubleshooting/#request-timeout","title":"Request Timeout","text":"<p>If requests are timing out, you can configure the fetcher timeout:</p> <pre><code>// This is typically handled automatically by vue-fastedgy\n// But check your network and backend responsiveness\n</code></pre>"},{"location":"vue/troubleshooting/#build-issues","title":"Build Issues","text":""},{"location":"vue/troubleshooting/#package-not-found-during-build","title":"Package Not Found During Build","text":"<p>Ensure vue-fastedgy is installed as a dependency (not devDependency):</p> <pre><code>{\n  \"dependencies\": {\n    \"vue-fastedgy\": \"git+ssh://git@github.com:krafterio/vue-fastedgy.git#main\"\n  }\n}\n</code></pre>"},{"location":"vue/troubleshooting/#typescript-errors","title":"TypeScript Errors","text":"<p>If using TypeScript, make sure type definitions are available:</p> <pre><code># Check if types are being resolved\nnpx tsc --noEmit\n</code></pre>"},{"location":"vue/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"vue/troubleshooting/#fetcher-memory-leaks","title":"Fetcher Memory Leaks","text":"<p>Make sure to properly clean up subscriptions and watchers:</p> <pre><code>import { onUnmounted } from 'vue'\n\nonUnmounted(() =&gt; {\n  // Clean up any subscriptions or watchers\n})\n</code></pre>"},{"location":"vue/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the browser console for error messages</li> <li>Verify your FastEdgy backend is running and accessible</li> <li>Test API endpoints directly (using Postman or curl)</li> <li>Check the FastEdgy backend documentation for backend setup</li> </ol> <p>Ready to build amazing applications with Vue.js and FastEdgy!</p>"},{"location":"vue/api-service/guide/","title":"User guide","text":""},{"location":"vue/api-service/guide/#creating-a-specialized-service","title":"Creating a specialized service","text":"<p>Always create a specialized service rather than using <code>useApiService</code> directly:</p> <pre><code>// services/tasks.js\nimport { useApiService } from 'vue-fastedgy'\n\nexport function useTasksService() {\n    return useApiService('tasks')\n}\n</code></pre>"},{"location":"vue/api-service/guide/#using-in-a-component","title":"Using in a component","text":"<pre><code>import { useTasksService } from '@/services/tasks'\n\nexport default {\n    setup() {\n        const tasksService = useTasksService()\n\n        const loadTasks = async () =&gt; {\n            const response = await tasksService.list({\n                page: 1,\n                size: 20,\n                orderBy: ['-created_at']\n            })\n            return response.data\n        }\n\n        return { loadTasks }\n    }\n}\n</code></pre>"},{"location":"vue/api-service/guide/#available-operations","title":"Available operations","text":""},{"location":"vue/api-service/guide/#list-with-options","title":"List with options","text":"<pre><code>await tasksService.list({\n    page: 1,\n    size: 20,\n    fields: ['id', 'title', 'completed'],\n    orderBy: ['-created_at', 'title'],\n    filter: { completed: false }\n})\n</code></pre>"},{"location":"vue/api-service/guide/#get-by-id","title":"Get by ID","text":"<pre><code>await tasksService.get(123, {\n    fields: ['id', 'title', 'description']\n})\n</code></pre>"},{"location":"vue/api-service/guide/#create","title":"Create","text":"<pre><code>await tasksService.create({\n    title: 'New task',\n    description: 'Task description'\n})\n</code></pre>"},{"location":"vue/api-service/guide/#update","title":"Update","text":"<pre><code>await tasksService.update(123, {\n    completed: true,\n    completed_at: new Date().toISOString()\n})\n</code></pre>"},{"location":"vue/api-service/guide/#delete","title":"Delete","text":"<pre><code>await tasksService.delete(123)\n</code></pre>"},{"location":"vue/api-service/guide/#export","title":"Export","text":"<pre><code>await tasksService.export({\n    format: 'csv',\n    fields: ['id', 'title', 'created_at']\n})\n</code></pre>"},{"location":"vue/api-service/guide/#admin-service","title":"Admin service","text":"<p>For administrative operations:</p> <pre><code>// services/admin-users.js\nexport function useAdminUsersService() {\n    return useApiService('users', { isAdmin: true })\n}\n</code></pre>"},{"location":"vue/api-service/guide/#extending-a-service","title":"Extending a service","text":"<p>The advantage of specialized services is being able to add custom methods:</p> <p>```javascript import { useApiService } from 'vue-fastedgy'</p> <p>export function useTasksService() {     const baseService = useApiService('tasks')</p> <pre><code>return {\n    ...baseService,\n\n    // Custom method\n    markCompleted: async (id) =&gt; {\n        return baseService.update(id, {\n            completed: true,\n            completed_at: new Date().toISOString()\n        })\n    },\n\n    // Method with business logic\n    getActiveTasks: async () =&gt; {\n        return baseService.list({\n            filter: { completed: false },\n            orderBy: ['-priority', 'created_at']\n        })\n    }\n}\n</code></pre> <p>}</p>"},{"location":"vue/api-service/overview/","title":"API Service","text":"<p>Generic service for CRUD operations with FastEdgy APIs</p> <p>The API Service provides a standardized abstraction layer for all CRUD (Create, Read, Update, Delete) operations with FastEdgy APIs. It automatically handles URL construction, query parameters, specialized headers, and FastEdgy conventions.</p>"},{"location":"vue/api-service/overview/#key-features","title":"Key features","text":"<ul> <li>Complete CRUD: List, Get, Create, Update, Delete, Export</li> <li>FastEdgy conventions: Automatic support for X-Fields headers, order_by, pagination</li> <li>Admin mode: Automatic switching between public and admin APIs</li> <li>Extensible: Facilitates creation of specialized services</li> <li>Standardized types: Consistent interface for all resources</li> </ul>"},{"location":"vue/api-service/overview/#recommended-usage","title":"Recommended usage","text":"<p>Create specialized services rather than using the generic directly:</p> <pre><code>import { useApiService } from 'vue-fastedgy'\n\nexport function useTasksService() {\n    return useApiService('tasks')\n}\n\nexport function useUsersService() {\n    return useApiService('users', { isAdmin: true })\n}\n</code></pre>"},{"location":"vue/api-service/overview/#quick-example","title":"Quick example","text":"<pre><code>const tasksService = useTasksService()\n\n// Simple CRUD operations\nawait tasksService.list({ page: 1, size: 20 })\nawait tasksService.create({ title: 'New task' })\nawait tasksService.update(123, { completed: true })\nawait tasksService.delete(123)\n</code></pre>"},{"location":"vue/api-service/overview/#get-started","title":"Get started","text":"<p>Ready to use the API Service? Check out our guide:</p> <p>User Guide</p>"},{"location":"vue/auth-store/advanced/","title":"Auth Store Advanced Features","text":"<p>This guide covers advanced authentication patterns and technical details for power users.</p>"},{"location":"vue/auth-store/advanced/#token-management","title":"Token Management","text":"<p>The Auth Store automatically manages JWT tokens with secure storage and refresh:</p> <pre><code>import { useAuthStore } from 'vue-fastedgy'\n\nconst authStore = useAuthStore()\n\n// Check token status\nconsole.log('Is authenticated?', authStore.isAuthenticated)\nconsole.log('Token expired?', authStore.isTokenExpired)\nconsole.log('Can refresh?', authStore.canRefreshToken)\n\n// Manual token refresh\nconst refreshResult = await authStore.refreshAccessToken()\nif (refreshResult) {\n  console.log('Token refreshed successfully')\n} else {\n  console.log('Token refresh failed - user logged out')\n}\n\n// Check current user data\nawait authStore.checkUser()\nconsole.log('Current user:', authStore.user)\n</code></pre>"},{"location":"vue/auth-store/advanced/#token-storage-details","title":"Token Storage Details","text":"<p>The store uses localStorage for persistence:</p> <pre><code>// Storage keys used by the auth store\nconst STORAGE_KEYS = {\n  ACCESS_TOKEN: 'access_token',\n  REFRESH_TOKEN: 'refresh_token'\n}\n\n// The store automatically manages these keys\n// When login() succeeds:\n// - localStorage.setItem('access_token', response.data.access_token)\n// - localStorage.setItem('refresh_token', response.data.refresh_token)\n\n// When logout() is called:\n// - localStorage.removeItem('access_token')\n// - localStorage.removeItem('refresh_token')\n</code></pre>"},{"location":"vue/auth-store/advanced/#event-system-integration","title":"Event System Integration","text":"<p>The Auth Store integrates with the Bus system:</p> <pre><code>import { bus } from 'vue-fastedgy'\n\n// Listen for authentication events\nbus.addEventListener('auth:logged', (event) =&gt; {\n  console.log('User logged in successfully')\n  // Redirect, load user data, etc.\n})\n\nbus.addEventListener('auth:logout', (event) =&gt; {\n  console.log('User logged out')\n  // Clear cached data, redirect to login, etc.\n})\n\n// These events are automatically triggered by the store\n// No need to manually dispatch them\n</code></pre>"},{"location":"vue/auth-store/advanced/#router-integration","title":"Router Integration","text":"<p>Protect routes based on authentication status:</p> <pre><code>// In router/index.js\nimport { useAuthStore } from 'vue-fastedgy'\n\nrouter.beforeEach(async (to, from, next) =&gt; {\n  const authStore = useAuthStore()\n\n  // Public routes that don't require authentication\n  const publicRoutes = ['/login', '/register', '/forgot-password', '/']\n\n  if (publicRoutes.includes(to.path)) {\n    return next()\n  }\n\n  // Check if route requires authentication\n  if (to.meta.requiresAuth &amp;&amp; !authStore.isAuthenticated) {\n    return next({\n      path: '/login',\n      query: { redirect: to.fullPath } // Save intended destination\n    })\n  }\n\n  // Handle token refresh if needed\n  if (authStore.isAuthenticated &amp;&amp; authStore.isTokenExpired) {\n    if (authStore.canRefreshToken) {\n      try {\n        const refreshed = await authStore.refreshAccessToken()\n        if (!refreshed) {\n          return next('/login')\n        }\n      } catch (error) {\n        console.error('Token refresh failed:', error)\n        return next('/login')\n      }\n    } else {\n      return next('/login')\n    }\n  }\n\n  next()\n})\n</code></pre>"},{"location":"vue/auth-store/advanced/#route-definitions","title":"Route Definitions","text":"<p>Mark routes that require authentication:</p> <pre><code>const routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () =&gt; import('@/views/LoginView.vue')\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: () =&gt; import('@/views/RegisterView.vue')\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: () =&gt; import('@/views/DashboardView.vue'),\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/profile',\n    name: 'Profile',\n    component: () =&gt; import('@/views/ProfileView.vue'),\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/admin',\n    name: 'Admin',\n    component: () =&gt; import('@/views/AdminView.vue'),\n    meta: { requiresAuth: true, requiresAdmin: true }\n  }\n]\n</code></pre>"},{"location":"vue/auth-store/advanced/#advanced-registration-patterns","title":"Advanced Registration Patterns","text":"<p>Handle different registration scenarios:</p> <pre><code>import { useAuthStore } from 'vue-fastedgy'\n\nconst authStore = useAuthStore()\n\n// Standard registration\nconst registerUser = async (userData) =&gt; {\n  const result = await authStore.register({\n    name: userData.name,\n    email: userData.email,\n    password: userData.password\n  })\n\n  if (result.success) {\n    console.log('Registration successful, user logged in')\n    // User is automatically logged in after registration\n  } else {\n    console.error('Registration failed:', result.message)\n  }\n}\n\n// Registration with invitation token\nconst registerWithInvitation = async (userData, invitationToken) =&gt; {\n  const result = await authStore.register({\n    name: userData.name,\n    email: userData.email,\n    password: userData.password\n  }, invitationToken)\n\n  if (result.success) {\n    console.log('Invitation registration successful')\n  } else {\n    console.error('Invitation registration failed:', result.message)\n  }\n}\n\n// Check registration status\nconst handleRegistrationResult = (result) =&gt; {\n  if (!result.success) {\n    switch (result.message) {\n      case 'Email d\u00e9j\u00e0 enregistr\u00e9':\n        // Show login option instead\n        break\n      case 'Token d\\'invitation invalide':\n        // Show invitation error\n        break\n      default:\n        // Show generic error\n        break\n    }\n  }\n}\n</code></pre>"},{"location":"vue/auth-store/advanced/#session-restoration","title":"Session Restoration","text":"<p>Restore user session on app startup:</p> <pre><code>// In main.js or App.vue\nimport { useAuthStore } from 'vue-fastedgy'\n\nconst initializeAuth = async () =&gt; {\n  const authStore = useAuthStore()\n\n  // Check if we have stored tokens\n  if (authStore.isAuthenticated) {\n    try {\n      // Verify tokens are still valid by loading user data\n      await authStore.checkUser()\n      console.log('Session restored for user:', authStore.user.email)\n    } catch (error) {\n      // Tokens are invalid, logout\n      console.warn('Invalid session, logging out:', error.message)\n      await authStore.logout()\n    }\n  }\n}\n\n// Call during app initialization\ninitializeAuth()\n</code></pre>"},{"location":"vue/auth-store/advanced/#integration-with-fetcher-plugin","title":"Integration with Fetcher Plugin","text":"<p>The Auth Store works seamlessly with the Fetcher Plugin:</p> <pre><code>// The fetcher plugin automatically:\n// 1. Reads tokens from the auth store\n// 2. Adds Authorization headers to requests\n// 3. Handles 401 responses by refreshing tokens\n// 4. Logs out user if refresh fails\n\n// No additional setup required - it works automatically\n</code></pre>"},{"location":"vue/auth-store/advanced/#error-handling-patterns","title":"Error Handling Patterns","text":"<p>Handle different authentication errors:</p> <pre><code>const handleAuthOperation = async (operation) =&gt; {\n  try {\n    const result = await operation()\n\n    if (!result.success) {\n      switch (result.message) {\n        case 'Email ou mot de passe incorrect':\n          showError('Invalid credentials. Please try again.')\n          break\n        case 'Email d\u00e9j\u00e0 enregistr\u00e9':\n          showError('This email is already registered. Try logging in instead.')\n          break\n        case 'Token d\\'invitation invalide':\n          showError('Invalid invitation token. Please check your link.')\n          break\n        default:\n          showError(result.message || 'Authentication failed')\n      }\n    }\n\n    return result\n  } catch (error) {\n    console.error('Auth operation failed:', error)\n    showError('Connection error. Please try again.')\n    return { success: false, message: 'Connection error' }\n  }\n}\n\n// Usage examples\nconst login = (credentials) =&gt; handleAuthOperation(() =&gt; authStore.login(credentials))\nconst register = (userData) =&gt; handleAuthOperation(() =&gt; authStore.register(userData))\n</code></pre>"},{"location":"vue/auth-store/advanced/#development-and-debugging","title":"Development and Debugging","text":"<p>Debug authentication state:</p> <pre><code>import { useAuthStore } from 'vue-fastedgy'\n\n// Debug helper for development\nwindow.debugAuth = () =&gt; {\n  const authStore = useAuthStore()\n\n  console.log('=== Auth Store Debug ===')\n  console.log('Authenticated:', authStore.isAuthenticated)\n  console.log('User:', authStore.user)\n  console.log('Token exists:', !!authStore.token)\n  console.log('Token expired:', authStore.isTokenExpired)\n  console.log('Can refresh:', authStore.canRefreshToken)\n  console.log('Loading state:', authStore.loading)\n\n  // Check localStorage\n  console.log('Stored access token:', localStorage.getItem('access_token'))\n  console.log('Stored refresh token:', localStorage.getItem('refresh_token'))\n}\n\n// Usage in browser console: debugAuth()\n</code></pre>"},{"location":"vue/auth-store/advanced/#manual-token-management","title":"Manual Token Management","text":"<p>For advanced use cases where you need direct token control:</p> <pre><code>import { setDefaultAuthorization } from 'vue-fastedgy'\n\n// Manually set authorization for testing\nsetDefaultAuthorization('your-test-token-here')\n\n// Clear authorization\nsetDefaultAuthorization(null)\n\n// Note: The auth store automatically manages this\n// This is only for special testing scenarios\n</code></pre>"},{"location":"vue/auth-store/guide/","title":"Auth Store User Guide","text":"<p>This guide shows you how to use the Auth Store in your Vue.js application with practical examples.</p>"},{"location":"vue/auth-store/guide/#complete-login-example","title":"Complete Login Example","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=\"authStore.isAuthenticated\"&gt;\n      &lt;p&gt;Welcome, {{ authStore.user.name }}!&lt;/p&gt;\n      &lt;button @click=\"logout\"&gt;Logout&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div v-else&gt;\n      &lt;form @submit.prevent=\"handleLogin\"&gt;\n        &lt;div&gt;\n          &lt;label&gt;Email:&lt;/label&gt;\n          &lt;input v-model=\"loginData.email\" type=\"email\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;label&gt;Password:&lt;/label&gt;\n          &lt;input v-model=\"loginData.password\" type=\"password\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" :disabled=\"authStore.loading\"&gt;\n          {{ authStore.loading ? 'Signing in...' : 'Sign in' }}\n        &lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\nimport { reactive } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst authStore = useAuthStore()\nconst router = useRouter()\n\nconst loginData = reactive({\n  email: '',\n  password: ''\n})\n\nconst handleLogin = async () =&gt; {\n  if (!loginData.email || !loginData.password) return\n\n  const result = await authStore.login(loginData)\n\n  if (!result.success) {\n    console.error(result.message || 'Login failed')\n    return\n  }\n\n  // Redirect after successful login\n  router.push({ name: 'Dashboard' })\n}\n\nconst logout = async () =&gt; {\n  await authStore.logout()\n  router.push({ name: 'Login' })\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/guide/#router-integration","title":"Router Integration","text":"<p>Protect routes based on authentication status:</p> <pre><code>// In router/index.js\nimport { useAuthStore } from 'vue-fastedgy'\n\nrouter.beforeEach(async (to, from, next) =&gt; {\n  const authStore = useAuthStore()\n\n  // Public routes that don't require authentication\n  const publicRoutes = ['/login', '/register', '/forgot-password']\n\n  if (publicRoutes.includes(to.path)) {\n    return next()\n  }\n\n  // Check if route requires authentication\n  if (to.meta.requiresAuth &amp;&amp; !authStore.isAuthenticated) {\n    return next('/login')\n  }\n\n  // Handle token refresh if needed\n  if (authStore.isTokenExpired &amp;&amp; authStore.canRefreshToken) {\n    try {\n      const success = await authStore.refreshAccessToken()\n      if (!success) {\n        return next('/login')\n      }\n    } catch (error) {\n      return next('/login')\n    }\n  }\n\n  next()\n})\n</code></pre>"},{"location":"vue/auth-store/guide/#registration","title":"Registration","text":"<p>Handle user registration:</p> <pre><code>&lt;template&gt;\n  &lt;form @submit.prevent=\"handleRegister\"&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name:&lt;/label&gt;\n      &lt;input v-model=\"registerData.name\" type=\"text\" required /&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Email:&lt;/label&gt;\n      &lt;input v-model=\"registerData.email\" type=\"email\" required /&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Password:&lt;/label&gt;\n      &lt;input v-model=\"registerData.password\" type=\"password\" required /&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Confirm Password:&lt;/label&gt;\n      &lt;input v-model=\"registerData.confirmPassword\" type=\"password\" required /&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Optional invitation token --&gt;\n    &lt;div v-if=\"invitationToken\"&gt;\n      &lt;input type=\"hidden\" v-model=\"registerData.invitationToken\" /&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\" :disabled=\"authStore.loading\"&gt;\n      {{ authStore.loading ? 'Creating account...' : 'Register' }}\n    &lt;/button&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\nimport { reactive } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\n\nconst authStore = useAuthStore()\nconst router = useRouter()\nconst route = useRoute()\n\nconst invitationToken = route.query.invitation\n\nconst registerData = reactive({\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  invitationToken: invitationToken || undefined\n})\n\nconst handleRegister = async () =&gt; {\n  // Basic validation\n  if (registerData.password !== registerData.confirmPassword) {\n    alert('Passwords do not match')\n    return\n  }\n\n  try {\n    // Register with or without invitation token\n    const result = await authStore.register(registerData, registerData.invitationToken)\n\n    if (result.success) {\n      // Registration successful, redirect to dashboard\n      router.push({ name: 'Dashboard' })\n    } else {\n      console.error('Registration failed:', result.message)\n    }\n  } catch (error) {\n    console.error('Registration error:', error)\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/guide/#user-status-checking","title":"User Status Checking","text":"<p>Verify current user and handle session restoration:</p> <pre><code>// In main.js or app setup\nimport { useAuthStore } from 'vue-fastedgy'\n\nconst authStore = useAuthStore()\n\n// Check if user is still valid on app startup\nconst initializeAuth = async () =&gt; {\n  if (authStore.isAuthenticated) {\n    try {\n      await authStore.checkUser()\n    } catch (error) {\n      // User session invalid, clear it\n      await authStore.logout()\n    }\n  }\n}\n\n// Call during app initialization\ninitializeAuth()\n</code></pre>"},{"location":"vue/auth-store/guide/#loading-states","title":"Loading States","text":"<p>Handle different loading states:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"auth-wrapper\"&gt;\n    &lt;!-- Global loading state --&gt;\n    &lt;div v-if=\"authStore.loading\" class=\"loading-overlay\"&gt;\n      &lt;p&gt;Processing...&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Login form --&gt;\n    &lt;div v-else-if=\"!authStore.isAuthenticated\" class=\"login-form\"&gt;\n      &lt;LoginForm @submit=\"handleLogin\" /&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Authenticated content --&gt;\n    &lt;div v-else class=\"app-content\"&gt;\n      &lt;NavBar /&gt;\n      &lt;router-view /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\n\nconst authStore = useAuthStore()\n\nconst handleLogin = async (credentials) =&gt; {\n  const result = await authStore.login(credentials)\n\n  if (!result.success) {\n    // Handle login error\n    showNotification('error', result.message || 'Login failed')\n  }\n  // Success is handled automatically by reactive state\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/guide/#conditional-rendering","title":"Conditional Rendering","text":"<p>Show different content based on authentication state:</p> <pre><code>&lt;template&gt;\n  &lt;nav&gt;\n    &lt;!-- Always visible links --&gt;\n    &lt;router-link to=\"/\"&gt;Home&lt;/router-link&gt;\n\n    &lt;!-- Authenticated user links --&gt;\n    &lt;template v-if=\"authStore.isAuthenticated\"&gt;\n      &lt;router-link to=\"/dashboard\"&gt;Dashboard&lt;/router-link&gt;\n      &lt;router-link to=\"/profile\"&gt;Profile&lt;/router-link&gt;\n\n      &lt;!-- User info --&gt;\n      &lt;div class=\"user-info\"&gt;\n        &lt;span&gt;Welcome, {{ authStore.user.name }}&lt;/span&gt;\n        &lt;button @click=\"logout\"&gt;Logout&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n\n    &lt;!-- Guest links --&gt;\n    &lt;template v-else&gt;\n      &lt;router-link to=\"/login\"&gt;Login&lt;/router-link&gt;\n      &lt;router-link to=\"/register\"&gt;Register&lt;/router-link&gt;\n    &lt;/template&gt;\n  &lt;/nav&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\nimport { useRouter } from 'vue-router'\n\nconst authStore = useAuthStore()\nconst router = useRouter()\n\nconst logout = async () =&gt; {\n  await authStore.logout()\n  router.push({ name: 'Home' })\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/guide/#error-handling","title":"Error Handling","text":"<p>Handle authentication errors gracefully:</p> <pre><code>const handleAuthAction = async (action) =&gt; {\n  try {\n    const result = await action()\n\n    if (!result.success) {\n      // Handle different types of errors\n      switch (result.error) {\n        case 'invalid_credentials':\n          showError('Invalid email or password')\n          break\n        case 'account_locked':\n          showError('Account is temporarily locked')\n          break\n        case 'email_not_verified':\n          showError('Please verify your email first')\n          break\n        default:\n          showError(result.message || 'Authentication failed')\n      }\n    }\n  } catch (error) {\n    // Network or unexpected errors\n    showError('Connection error. Please try again.')\n    console.error('Auth error:', error)\n  }\n}\n\n// Usage examples\nconst login = (credentials) =&gt; handleAuthAction(() =&gt; authStore.login(credentials))\nconst register = (userData) =&gt; handleAuthAction(() =&gt; authStore.register(userData))\n</code></pre>"},{"location":"vue/auth-store/guide/#session-timeout-handling","title":"Session Timeout Handling","text":"<p>Handle session expiration gracefully:</p> <pre><code>&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\nimport { onMounted, onUnmounted } from 'vue'\n\nconst authStore = useAuthStore()\nlet sessionCheckInterval\n\nonMounted(() =&gt; {\n  // Check session every 5 minutes\n  sessionCheckInterval = setInterval(async () =&gt; {\n    if (authStore.isAuthenticated &amp;&amp; authStore.isTokenExpired) {\n      if (authStore.canRefreshToken) {\n        try {\n          await authStore.refreshAccessToken()\n        } catch (error) {\n          // Refresh failed, redirect to login\n          await authStore.logout()\n          router.push('/login')\n          showNotification('info', 'Session expired. Please log in again.')\n        }\n      } else {\n        // No refresh token, log out\n        await authStore.logout()\n        router.push('/login')\n        showNotification('info', 'Session expired. Please log in again.')\n      }\n    }\n  }, 5 * 60 * 1000) // 5 minutes\n})\n\nonUnmounted(() =&gt; {\n  if (sessionCheckInterval) {\n    clearInterval(sessionCheckInterval)\n  }\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/overview/","title":"Auth Store","text":"<p>Pinia-based authentication state management</p> <p>The Auth Store provides a comprehensive authentication solution using Pinia for state management, handling JWT tokens, user sessions, and authentication flows with automatic token refresh and secure storage.</p>"},{"location":"vue/auth-store/overview/#key-features","title":"Key Features","text":"<ul> <li>JWT Management: Automatic token handling, refresh, and storage</li> <li>User State: Centralized user information and permissions</li> <li>Authentication Guards: Route protection and access control</li> <li>Persistent Sessions: Secure token storage across browser sessions</li> </ul>"},{"location":"vue/auth-store/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>User Login/Logout: Handle authentication flows</li> <li>Route Protection: Protect pages based on authentication status</li> <li>API Authentication: Automatic token injection in API requests</li> <li>Session Management: Handle token expiration and refresh</li> </ul>"},{"location":"vue/auth-store/overview/#quick-example","title":"Quick Example","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Authentication status --&gt;\n    &lt;div v-if=\"authStore.isAuthenticated\"&gt;\n      &lt;p&gt;Welcome, {{ authStore.user.name }}!&lt;/p&gt;\n      &lt;p&gt;Role: {{ authStore.user.role }}&lt;/p&gt;\n      &lt;button @click=\"logout\"&gt;Logout&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div v-else&gt;\n      &lt;LoginForm @submit=\"login\" /&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Show loading state --&gt;\n    &lt;div v-if=\"authStore.loading\"&gt;\n      &lt;p&gt;Loading...&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useAuthStore } from 'vue-fastedgy'\n\nconst authStore = useAuthStore()\n\nconst login = async (credentials) =&gt; {\n  const result = await authStore.login(credentials)\n  if (result.success) {\n    // Redirect to dashboard\n  } else {\n    console.error(result.message)\n  }\n}\n\nconst logout = async () =&gt; {\n  await authStore.logout()\n  // Redirect to login page\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/auth-store/overview/#store-properties-and-methods","title":"Store Properties and Methods","text":""},{"location":"vue/auth-store/overview/#properties","title":"Properties","text":"<ul> <li><code>user</code>: Current user object (null if not authenticated)</li> <li><code>loading</code>: Loading state for auth operations</li> <li><code>isAuthenticated</code>: Boolean indicating authentication status</li> <li><code>isTokenExpired</code>: Boolean indicating if access token is expired</li> <li><code>canRefreshToken</code>: Boolean indicating if refresh token is available</li> </ul>"},{"location":"vue/auth-store/overview/#methods","title":"Methods","text":"<ul> <li><code>login(credentials)</code>: Authenticate user and return result object</li> <li><code>logout()</code>: Clear user session and tokens</li> <li><code>register(userData, invitationToken?)</code>: Register new user</li> <li><code>refreshAccessToken()</code>: Refresh expired access token</li> <li><code>checkUser()</code>: Verify current user status</li> </ul>"},{"location":"vue/auth-store/overview/#get-started","title":"Get Started","text":"<p>Ready to implement authentication? Check out our guides:</p> <p>User Guide Advanced Features</p>"},{"location":"vue/bus/guide/","title":"Bus User Guide","text":"<p>This guide shows you how to use the Bus system in real Vue.js applications with practical examples and patterns.</p>"},{"location":"vue/bus/guide/#component-integration","title":"Component Integration","text":"<p>Here's a complete example showing how to build a notification system using the Bus:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=\"notifications.length &gt; 0\" class=\"space-y-2\"&gt;\n      &lt;div\n        v-for=\"notification in notifications\"\n        :key=\"notification.id\"\n        class=\"p-3 bg-blue-50 border border-blue-200 rounded\"\n      &gt;\n        {{ notification.message }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;button @click=\"sendNotification\"&gt;\n      Send Test Notification\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { bus, useBus } from 'vue-fastedgy'\n\nconst notifications = ref([])\n\nconst handleNotification = (event) =&gt; {\n  const data = event.detail\n  notifications.value.push({\n    id: Date.now(),\n    message: data.message\n  })\n\n  // Auto-remove after 3 seconds\n  setTimeout(() =&gt; {\n    notifications.value = notifications.value.filter(n =&gt; n.id !== data.id)\n  }, 3000)\n}\n\nconst sendNotification = () =&gt; {\n  bus.trigger('notification:show', {\n    id: Date.now(),\n    message: 'This is a test notification'\n  })\n}\n\n// Automatic cleanup on component unmount\nuseBus(bus, 'notification:show', handleNotification)\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/bus/guide/#manual-event-handling","title":"Manual Event Handling","text":"<p>For more control, you can handle events manually using Vue's lifecycle hooks:</p> <pre><code>import { bus } from 'vue-fastedgy'\nimport { onMounted, onBeforeUnmount } from 'vue'\n\nconst handleEvent = (event) =&gt; {\n  console.log('Event data:', event.detail)\n}\n\nonMounted(() =&gt; {\n  bus.addEventListener('my:event', handleEvent)\n})\n\nonBeforeUnmount(() =&gt; {\n  bus.removeEventListener('my:event', handleEvent)\n})\n</code></pre>"},{"location":"vue/bus/guide/#event-patterns","title":"Event Patterns","text":""},{"location":"vue/bus/guide/#requestresponse-pattern","title":"Request/Response Pattern","text":"<pre><code>// Component A - Request data\nbus.trigger('data:request', { userId: 123 })\n\n// Component B - Respond with data\nuseBus(bus, 'data:request', async (event) =&gt; {\n  const { userId } = event.detail\n  const userData = await fetchUser(userId)\n  bus.trigger('data:response', userData)\n})\n\n// Component A - Handle response\nuseBus(bus, 'data:response', (event) =&gt; {\n  console.log('Received user data:', event.detail)\n})\n</code></pre>"},{"location":"vue/bus/guide/#async-coordination","title":"Async Coordination","text":"<pre><code>// Wait for multiple services to complete\nawait bus.triggerAndWait('app:initialize', {\n  modules: ['auth', 'config', 'cache']\n})\n\n// Each service handles initialization\nuseBus(bus, 'app:initialize', async (event) =&gt; {\n  await initializeMyModule()\n  console.log('Module initialized')\n})\n</code></pre>"},{"location":"vue/bus/overview/","title":"Bus","text":"<p>Event communication system for Vue.js components</p> <p>The Bus provides a lightweight event system for communication between Vue components, services, and external systems. It enables loose coupling and reactive data flow throughout your application.</p>"},{"location":"vue/bus/overview/#key-features","title":"Key Features","text":"<ul> <li>Global Events: Publish and subscribe to events across your entire application</li> <li>Custom Events: Built on browser's native CustomEvent API</li> <li>Async Support: Wait for event handlers with <code>triggerAndWait()</code></li> <li>Memory Management: Automatic cleanup and unsubscribe mechanisms</li> <li>Vue Lifecycle Integration: Automatic listener cleanup on component unmount</li> </ul>"},{"location":"vue/bus/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Cross-component Communication: Send data between unrelated components</li> <li>Service Integration: Bridge between Vue components and business logic services</li> <li>Real-time Updates: Handle WebSocket messages and server-sent events</li> <li>User Interface Events: Coordinate complex UI interactions</li> </ul>"},{"location":"vue/bus/overview/#quick-example","title":"Quick Example","text":"<pre><code>import { bus, useBus } from 'vue-fastedgy'\n\n// Trigger an event\nbus.trigger('user:updated', { id: 123, name: 'John Doe' })\n\n// Trigger and wait for all handlers to complete\nawait bus.triggerAndWait('data:sync', { table: 'users' })\n\n// In a Vue component - automatic cleanup\nuseBus(bus, 'user:updated', (event) =&gt; {\n  console.log('User updated:', event.detail)\n})\n</code></pre>"},{"location":"vue/bus/overview/#get-started","title":"Get Started","text":"<p>Ready to use the Bus in your application? Check out our user guide for detailed examples and patterns.</p> <p>Get Started with Bus</p>"},{"location":"vue/fetcher/advanced/","title":"Fetcher Advanced Features","text":"<p>This guide covers the advanced features of the Fetcher for power users and complex use cases.</p>"},{"location":"vue/fetcher/advanced/#automatic-json-handling","title":"Automatic JSON Handling","text":"<p>The fetcher automatically handles JSON serialization and parsing while remaining stream-compatible:</p> <pre><code>const fetcher = useFetcher()\n\n// Objects automatically serialized to JSON\nconst response = await fetcher.post('/users', {\n  name: 'John Doe',          // Auto: Content-Type: application/json\n  email: 'john@example.com'  // Auto: JSON.stringify()\n})\n\n// JSON responses automatically parsed\nconst userData = response.data // Auto-parsed from response.json()\n\n// Streams and FormData work unchanged\nconst formData = new FormData()\nformData.append('file', file)\nconst uploadResponse = await fetcher.post('/upload', formData) // No JSON handling\n\n// File downloads work unchanged\nconst fileResponse = await fetcher.get('/files/download')\nconst blob = await fileResponse.blob() // Standard fetch interface\n\n// DELETE requests\nawait fetcher.delete('/users/123')\n\n// PUT/PATCH with objects\nconst updatedUser = await fetcher.put('/users/123', { name: 'Updated' })\nconst patchedUser = await fetcher.patch('/users/123', { status: 'inactive' })\n</code></pre> <p>Smart Detection: - Request: Objects \u2192 JSON + <code>Content-Type</code> header (FormData, streams untouched) - Response: <code>application/json</code> \u2192 Auto-parsed to <code>response.data</code> - Other content types: Handled normally, <code>response.data = {}</code></p>"},{"location":"vue/fetcher/advanced/#hook-system-integration","title":"Hook System Integration","text":"<p>The fetcher integrates with a dedicated event bus for global middleware:</p> <pre><code>import { fetchBus } from 'vue-fastedgy'\n\n// Global request hook - triggered before each request\nfetchBus.addEventListener('fetch:request', (event) =&gt; {\n  const { url, options } = event.detail\n  console.log('Making request to:', url)\n\n  // Modify request before sending\n  options.headers = {\n    ...options.headers,\n    'X-App-Version': '1.0',\n    'X-Request-Time': new Date().toISOString()\n  }\n})\n\n// Global success hook - triggered after successful requests\nfetchBus.addEventListener('fetch:success', (event) =&gt; {\n  const { url, response, data } = event.detail\n  console.log('Request successful:', url, response.status)\n  console.log('Response data:', data) // Auto-parsed JSON or {}\n})\n\n// Global error hook - triggered on request failures\nfetchBus.addEventListener('fetch:error', (event) =&gt; {\n  const { url, error } = event.detail\n  console.error('Request failed:', url, error.message)\n\n  // Log errors to external service\n  if (error.response?.status &gt;= 500) {\n    // External error tracking service\n    console.error('Server error detected:', error)\n  }\n})\n</code></pre>"},{"location":"vue/fetcher/advanced/#request-authentication","title":"Request Authentication","text":"<p>Add authentication headers globally:</p> <pre><code>import { fetchBus, useAuthStore } from 'vue-fastedgy'\n\n// Setup once in your app\nfetchBus.addEventListener('fetch:request', (event) =&gt; {\n  const { options } = event.detail\n  const authStore = useAuthStore()\n\n  // Add auth token to all requests\n  if (authStore.token) {\n    options.headers = {\n      ...options.headers,\n      'Authorization': `Bearer ${authStore.token}`\n    }\n  }\n})\n</code></pre>"},{"location":"vue/fetcher/advanced/#request-and-response-logging","title":"Request and Response Logging","text":"<p>Log all API interactions for debugging:</p> <pre><code>import { fetchBus } from 'vue-fastedgy'\n\n// Request logging\nfetchBus.addEventListener('fetch:request', (event) =&gt; {\n  const { url, options } = event.detail\n\n  console.group(`\ud83d\udce4 ${options.method || 'GET'} ${url}`)\n\n  if (options.body) {\n    console.log('Body:', options.body)\n  }\n\n  if (options.params) {\n    console.log('Params:', options.params)\n  }\n\n  console.log('Headers:', options.headers)\n  console.groupEnd()\n})\n\n// Response logging\nfetchBus.addEventListener('fetch:success', (event) =&gt; {\n  const { url, response, data } = event.detail\n\n  console.group(`\ud83d\udce5 ${response.status} ${url}`)\n  console.log('Data:', data)\n  console.log('Headers:', Object.fromEntries(response.headers.entries()))\n  console.groupEnd()\n})\n\n// Error logging\nfetchBus.addEventListener('fetch:error', (event) =&gt; {\n  const { url, error } = event.detail\n\n  console.group(`\u274c ERROR ${url}`)\n  console.error('Error:', error.message)\n\n  if (error.response) {\n    console.log('Status:', error.response.status)\n    console.log('Data:', error.data)\n  }\n\n  console.groupEnd()\n})\n</code></pre>"},{"location":"vue/fetcher/advanced/#httperror-handling","title":"HttpError Handling","text":"<p>Handle different HTTP error types:</p> <pre><code>import { HttpError } from 'vue-fastedgy'\n\nconst handleApiCall = async () =&gt; {\n  try {\n    const response = await fetcher.post('/api/users', userData)\n    console.log('User created:', response.data)\n  } catch (error) {\n    if (error instanceof HttpError) {\n      const status = error.response.status\n\n      switch (status) {\n        case 400:\n          console.error('Bad Request:', error.data)\n          break\n        case 401:\n          console.error('Unauthorized - redirecting to login')\n          // Handle auth error\n          break\n        case 403:\n          console.error('Forbidden - insufficient permissions')\n          break\n        case 422:\n          console.error('Validation Error:', error.data.detail)\n          break\n        case 500:\n          console.error('Server Error:', error.message)\n          break\n        default:\n          console.error('HTTP Error:', status, error.message)\n      }\n    } else if (error.name === 'AbortError') {\n      console.log('Request was cancelled')\n    } else {\n      console.error('Network Error:', error.message)\n    }\n  }\n}\n</code></pre>"},{"location":"vue/fetcher/advanced/#service-level-integration","title":"Service-Level Integration","text":"<p>Use the hook system in service classes:</p> <pre><code>import { fetchBus, useFetcherService } from 'vue-fastedgy'\n\nclass ApiService {\n  constructor() {\n    this.fetcher = useFetcherService()\n    this.setupHooks()\n  }\n\n  setupHooks() {\n    // Service-specific request handling\n    fetchBus.addEventListener('fetch:request', (event) =&gt; {\n      const { url, options } = event.detail\n\n      // Add service identifier to requests from this service\n      if (this.isMyRequest(url)) {\n        options.headers = {\n          ...options.headers,\n          'X-Service': 'ApiService'\n        }\n      }\n    })\n  }\n\n  isMyRequest(url) {\n    // Logic to identify requests from this service\n    return url.startsWith('/api/')\n  }\n\n  async getUsers() {\n    return this.fetcher.get('/api/users')\n  }\n}\n</code></pre>"},{"location":"vue/fetcher/advanced/#abortcontroller-management","title":"AbortController Management","text":"<p>Advanced abort control patterns:</p> <pre><code>const fetcher = useFetcher()\n\n// Abort specific requests by ID\nconst searchUsers = async (query) =&gt; {\n  // Cancel previous search if still running\n  fetcher.abort('user-search')\n\n  const response = await fetcher.get('/users/search', {\n    params: { q: query },\n    id: 'user-search' // This ID can be used to abort this specific request\n  })\n\n  return response.data\n}\n\n// Abort multiple related requests\nconst loadDashboard = async () =&gt; {\n  // Cancel any previous dashboard loading\n  fetcher.abort('dashboard-users')\n  fetcher.abort('dashboard-stats')\n  fetcher.abort('dashboard-notifications')\n\n  const [users, stats, notifications] = await Promise.all([\n    fetcher.get('/users', { id: 'dashboard-users' }),\n    fetcher.get('/stats', { id: 'dashboard-stats' }),\n    fetcher.get('/notifications', { id: 'dashboard-notifications' })\n  ])\n\n  return { users: users.data, stats: stats.data, notifications: notifications.data }\n}\n\n// Component unmount automatically aborts all requests\n// This is handled by useFetcher() automatically\n</code></pre>"},{"location":"vue/fetcher/advanced/#custom-headers-and-options","title":"Custom Headers and Options","text":"<p>Advanced request configuration:</p> <pre><code>const fetcher = useFetcher()\n\n// Custom headers for specific requests\nconst response = await fetcher.post('/api/upload', formData, {\n  headers: {\n    'X-Upload-Type': 'avatar',\n    'X-Max-Size': '5MB'\n  }\n})\n\n// Custom fetch options\nconst streamResponse = await fetcher.get('/api/download', {\n  // Disable automatic JSON parsing for binary data\n  headers: { 'Accept': 'application/octet-stream' }\n})\n\n// Custom timeout (using AbortController)\nconst controller = new AbortController()\nsetTimeout(() =&gt; controller.abort(), 10000) // 10 second timeout\n\ntry {\n  const response = await fetcher.get('/api/slow-endpoint', {\n    signal: controller.signal\n  })\n} catch (error) {\n  if (error.name === 'AbortError') {\n    console.log('Request timed out after 10 seconds')\n  }\n}\n</code></pre>"},{"location":"vue/fetcher/guide/","title":"Fetcher User Guide","text":"<p>This guide shows you how to use the Fetcher in real Vue.js applications with practical examples and patterns.</p>"},{"location":"vue/fetcher/guide/#rest-methods-with-enhanced-options","title":"REST Methods with Enhanced Options","text":"<p>The fetcher provides specific methods for each HTTP verb with enhanced capabilities:</p> <pre><code>const fetcher = useFetcher()\n\n// GET with query parameters and custom options\nconst response = await fetcher.get('/users', {\n  params: { page: 1, limit: 20 }, // Auto query params\n  id: 'users-list', // Custom ID for cancellation (use with fetcher.abort('users-list'))\n  headers: { 'Custom-Header': 'value' }\n})\n\n// POST with automatic JSON handling\nconst userResponse = await fetcher.post('/users', {\n  name: 'John Doe' // Auto JSON.stringify() + Content-Type\n}, {\n  id: 'create-user', // Can be aborted with fetcher.abort('create-user')\n  headers: { 'X-Request-ID': 'abc123' }\n})\n\n// PUT/PATCH for updates\nconst updatedUser = await fetcher.put('/users/123', userData)\nconst patchedUser = await fetcher.patch('/users/123', { status: 'active' })\n\n// DELETE with options\nawait fetcher.delete('/users/123', {\n  id: 'delete-user', // Abortable with fetcher.abort('delete-user')\n  headers: { 'X-Confirm': 'true' }\n})\n</code></pre>"},{"location":"vue/fetcher/guide/#component-integration","title":"Component Integration","text":"<p>Here's how to use the Fetcher in Vue components with automatic cleanup:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;ul v-if=\"users\"&gt;\n      &lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n        {{ user.name }}\n        &lt;button @click=\"updateUser(user.id)\"&gt;Update&lt;/button&gt;\n        &lt;button @click=\"deleteUser(user.id)\"&gt;Delete&lt;/button&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref, onMounted } from 'vue'\nimport { useFetcher } from 'vue-fastedgy'\n\nconst users = ref(null)\nconst loading = ref(true)\nconst fetcher = useFetcher()\n\nonMounted(async () =&gt; {\n  try {\n    // GET with query parameters\n    const response = await fetcher.get('/users', {\n      params: { active: true, limit: 50 }\n    })\n    users.value = response.data\n  } catch (error) {\n    console.error('Failed to fetch users:', error)\n  } finally {\n    loading.value = false\n  }\n})\n\nconst updateUser = async (userId) =&gt; {\n  // PATCH for partial updates\n  const response = await fetcher.patch(`/users/${userId}`, {\n    lastSeen: new Date().toISOString()\n  })\n  // Update local data\n  const index = users.value.findIndex(u =&gt; u.id === userId)\n  if (index &gt;= 0) users.value[index] = response.data\n}\n\nconst deleteUser = async (userId) =&gt; {\n  // DELETE request\n  await fetcher.delete(`/users/${userId}`)\n  // Remove from local data\n  users.value = users.value.filter(u =&gt; u.id !== userId)\n}\n\n// All requests automatically cancelled on component unmount\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/fetcher/guide/#service-usage-no-auto-abort","title":"Service Usage (No Auto-Abort)","text":"<p>For services that need to persist beyond component lifecycle:</p> <pre><code>import { useFetcherService } from 'vue-fastedgy'\n\n// In a service file\nconst fetcher = useFetcherService()\n\nexport const userService = {\n  async getUsers(filters = {}) {\n    const response = await fetcher.get('/users', { params: filters })\n    return response.data\n  },\n\n  async createUser(userData) {\n    const response = await fetcher.post('/users', userData)\n    return response.data\n  },\n\n  async updateUser(id, userData) {\n    const response = await fetcher.put(`/users/${id}`, userData)\n    return response.data\n  },\n\n  async patchUser(id, updates) {\n    const response = await fetcher.patch(`/users/${id}`, updates)\n    return response.data\n  },\n\n  async deleteUser(id) {\n    await fetcher.delete(`/users/${id}`)\n    return true\n  }\n}\n</code></pre>"},{"location":"vue/fetcher/guide/#error-handling","title":"Error Handling","text":"<pre><code>&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { useFetcher, HttpError } from 'vue-fastedgy'\n\nconst fetcher = useFetcher()\nconst error = ref(null)\n\nconst handleApiCall = async () =&gt; {\n  try {\n    error.value = null\n    const response = await fetcher.post('/api/action', { data: 'value' })\n    // Handle success\n  } catch (err) {\n    if (err instanceof HttpError) {\n      error.value = `API Error ${err.response.status}: ${err.message}`\n      console.log('Error data:', err.data)\n    } else if (err.name === 'AbortError') {\n      console.log('Request was cancelled')\n    } else {\n      error.value = 'Network error occurred'\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/fetcher/guide/#request-cancellation-patterns","title":"Request Cancellation Patterns","text":""},{"location":"vue/fetcher/guide/#component-level-cancellation","title":"Component-Level Cancellation","text":"<pre><code>// All requests are automatically cancelled when component unmounts\nconst fetcher = useFetcher()\n\n// Manual cancellation of all component requests\nconst cancelAllRequests = () =&gt; {\n  fetcher.abort()\n}\n</code></pre>"},{"location":"vue/fetcher/guide/#specific-request-cancellation","title":"Specific Request Cancellation","text":"<pre><code>// Tag requests with IDs for specific cancellation\nconst searchUsers = async (query) =&gt; {\n  // Cancel previous search\n  fetcher.abort('search-users')\n\n  const response = await fetcher.get('/users/search', {\n    params: { q: query },\n    id: 'search-users'\n  })\n  return response.data\n}\n</code></pre>"},{"location":"vue/fetcher/guide/#service-level-control","title":"Service-Level Control","text":"<pre><code>// For long-lived services, manage cancellation manually\nconst fetcher = useFetcherService()\n\nconst longRunningOperation = async () =&gt; {\n  const controller = new AbortController()\n\n  setTimeout(() =&gt; {\n    controller.abort() // Cancel after timeout\n  }, 30000)\n\n  try {\n    const response = await fetcher.post('/long-operation', data, {\n      signal: controller.signal\n    })\n    return response.data\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.log('Operation timed out')\n    }\n    throw error\n  }\n}\n</code></pre>"},{"location":"vue/fetcher/overview/","title":"Fetcher","text":"<p>Lightweight wrapper over native fetch with Vue.js integration</p> <p>The Fetcher provides a thin, composable layer over the native fetch API, designed specifically for Vue.js applications. It maintains full compatibility with the standard fetch interface while adding Vue lifecycle integration, simplified cancellation, and a powerful hook system via event bus.</p>"},{"location":"vue/fetcher/overview/#key-features","title":"Key Features","text":"<ul> <li>Native Fetch Compatible: Same interface as standard fetch API</li> <li>Automatic JSON Handling: Auto-serialize objects to JSON, auto-parse JSON responses</li> <li>Stream Compatible: Works seamlessly with file uploads, downloads, and streams</li> <li>Vue Composition API: Seamless integration with Vue lifecycle</li> <li>Automatic Cancellation: Auto-abort requests on component unmount</li> <li>Hook System: Global event bus for request/response middleware</li> <li>Simplified Abort Control: Easy request cancellation management</li> <li>Lightweight: Minimal overhead over native fetch</li> </ul>"},{"location":"vue/fetcher/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Vue Component Integration: Fetch data with automatic cleanup</li> <li>Request Middleware: Global hooks for authentication, logging, error handling</li> <li>File Downloads: Handle blob responses and file operations</li> <li>Component-Scoped Requests: Automatic cancellation on unmount</li> </ul>"},{"location":"vue/fetcher/overview/#quick-example","title":"Quick Example","text":"<pre><code>import { useFetcher } from 'vue-fastedgy'\n\nconst fetcher = useFetcher()\n\n// REST methods with automatic JSON handling\nconst getResponse = await fetcher.get('/users')\nconst users = getResponse.data // Auto-parsed JSON\n\n// POST with automatic JSON serialization\nconst postResponse = await fetcher.post('/users', {\n  name: 'John Doe',\n  email: 'john@example.com'\n})\n\n// Query parameters (enhanced)\nconst filteredResponse = await fetcher.get('/users', {\n  params: { active: true, limit: 10 },\n  id: 'filter-users' // Optional ID for targeted abort control\n})\n\n// Other REST methods\nconst updatedUser = await fetcher.put('/users/123', userData)\nconst patchedUser = await fetcher.patch('/users/123', { name: 'New Name' })\nawait fetcher.delete('/users/123')\n\n// Manual abort control\nfetcher.abort() // Abort all component requests\nfetcher.abort('users-list') // Abort specific request by ID (must match options.id)\n</code></pre>"},{"location":"vue/fetcher/overview/#get-started","title":"Get Started","text":"<p>Ready to use the Fetcher in your application? Check out our guides:</p> <p>User Guide Advanced Features</p>"},{"location":"vue/fetcher-directive/guide/","title":"Fetcher Directive User Guide","text":"<p>This guide shows you how to use the <code>v-fetcher-src</code> directive effectively in your Vue.js applications.</p>"},{"location":"vue/fetcher-directive/guide/#complete-example","title":"Complete Example","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Multiple protected images --&gt;\n    &lt;div class=\"image-gallery\"&gt;\n      &lt;img\n        v-for=\"image in images\"\n        :key=\"image.id\"\n        v-fetcher-src.lazy\n        :src=\"image.url\"\n        :alt=\"image.title\"\n        class=\"gallery-image\"\n      /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\n\nconst images = ref([\n  { id: 1, url: '/files/image1.jpg', title: 'Image 1' },\n  { id: 2, url: '/files/image2.jpg', title: 'Image 2' },\n  { id: 3, url: '/files/image3.jpg', title: 'Image 3' }\n])\n&lt;/script&gt;\n\n&lt;style&gt;\n.gallery-image {\n  width: 200px;\n  height: 150px;\n  object-fit: cover;\n  opacity: 0;\n  transition: opacity 0.3s ease-in-out;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#modifiers","title":"Modifiers","text":""},{"location":"vue/fetcher-directive/guide/#lazy","title":"<code>.lazy</code>","text":"<p>Enables lazy loading using Intersection Observer:</p> <pre><code>&lt;template&gt;\n  &lt;!-- Will only load when the image enters the viewport --&gt;\n  &lt;img v-fetcher-src.lazy src=\"/large-image.jpg\" alt=\"Large Image\" /&gt;\n&lt;/template&gt;\n</code></pre> <p>The lazy modifier provides: - Intersection Observer: Efficient viewport detection - Threshold Control: Images load when 10% visible - Automatic Cleanup: Observer is disconnected after loading</p>"},{"location":"vue/fetcher-directive/guide/#user-avatar-example","title":"User Avatar Example","text":"<p>Common pattern for loading authenticated user avatars:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"user-profile\"&gt;\n    &lt;img\n      v-fetcher-src\n      :src=\"`/users/${user.id}/avatar`\"\n      :alt=\"`${user.name} avatar`\"\n      class=\"avatar\"\n      @error=\"handleAvatarError\"\n    /&gt;\n    &lt;h3&gt;{{ user.name }}&lt;/h3&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\n\nconst props = defineProps(['user'])\n\nconst handleAvatarError = () =&gt; {\n  // Handle case where user has no avatar\n  console.log('Avatar failed to load')\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.avatar {\n  width: 64px;\n  height: 64px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#document-gallery","title":"Document Gallery","text":"<p>Example for loading protected documents/files:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"document-gallery\"&gt;\n    &lt;div\n      v-for=\"document in documents\"\n      :key=\"document.id\"\n      class=\"document-item\"\n    &gt;\n      &lt;img\n        v-fetcher-src.lazy\n        :src=\"`/documents/${document.id}/thumbnail`\"\n        :alt=\"document.name\"\n        class=\"document-thumbnail\"\n      /&gt;\n      &lt;p&gt;{{ document.name }}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nconst documents = ref([\n  { id: 1, name: 'Report Q1.pdf' },\n  { id: 2, name: 'Invoice 2024.pdf' },\n  { id: 3, name: 'Contract.docx' }\n])\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#performance-patterns","title":"Performance Patterns","text":""},{"location":"vue/fetcher-directive/guide/#image-grid-with-lazy-loading","title":"Image Grid with Lazy Loading","text":"<pre><code>&lt;template&gt;\n  &lt;div class=\"image-grid\"&gt;\n    &lt;div\n      v-for=\"item in items\"\n      :key=\"item.id\"\n      class=\"grid-item\"\n    &gt;\n      &lt;div class=\"image-container\"&gt;\n        &lt;img\n          v-fetcher-src.lazy\n          :src=\"item.imageUrl\"\n          :alt=\"item.title\"\n          class=\"grid-image\"\n          loading=\"lazy\"\n        /&gt;\n        &lt;div class=\"image-overlay\"&gt;\n          &lt;h4&gt;{{ item.title }}&lt;/h4&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style&gt;\n.image-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.image-container {\n  position: relative;\n  aspect-ratio: 1;\n  overflow: hidden;\n  border-radius: 8px;\n}\n\n.grid-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: opacity 0.3s ease;\n}\n\n.image-overlay {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: linear-gradient(transparent, rgba(0,0,0,0.7));\n  color: white;\n  padding: 1rem;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#error-handling","title":"Error Handling","text":"<pre><code>&lt;template&gt;\n  &lt;div class=\"protected-image\"&gt;\n    &lt;img\n      v-fetcher-src\n      :src=\"imageUrl\"\n      :alt=\"imageAlt\"\n      class=\"image\"\n      @load=\"handleLoad\"\n      @error=\"handleError\"\n    /&gt;\n\n    &lt;div v-if=\"error\" class=\"error-state\"&gt;\n      &lt;p&gt;Failed to load image&lt;/p&gt;\n      &lt;button @click=\"retry\"&gt;Retry&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div v-if=\"loading\" class=\"loading-state\"&gt;\n      &lt;p&gt;Loading...&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\n\nconst props = defineProps(['imageUrl', 'imageAlt'])\n\nconst loading = ref(true)\nconst error = ref(false)\n\nconst handleLoad = () =&gt; {\n  loading.value = false\n  error.value = false\n}\n\nconst handleError = () =&gt; {\n  loading.value = false\n  error.value = true\n}\n\nconst retry = () =&gt; {\n  loading.value = true\n  error.value = false\n  // Force re-render by changing key or src\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#technical-details","title":"Technical Details","text":"<p>The directive: - Uses <code>useFetcher()</code> to make authenticated requests - Converts response to blob for proper image handling - Creates and manages blob URLs automatically - Handles component unmount cleanup - Supports lazy loading with intersection observer - Automatically aborts requests on component destroy</p>"},{"location":"vue/fetcher-directive/guide/#blob-url-management","title":"Blob URL Management","text":"<pre><code>// The directive automatically:\n// 1. Creates blob URL: URL.createObjectURL(blob)\n// 2. Assigns to img.src\n// 3. Revokes on load: URL.revokeObjectURL(url)\n// 4. Cleans up on unmount\n</code></pre>"},{"location":"vue/fetcher-directive/guide/#intersection-observer-configuration","title":"Intersection Observer Configuration","text":"<pre><code>// Default configuration:\nnew IntersectionObserver(callback, {\n  threshold: 0.1  // Trigger when 10% visible\n})\n</code></pre>"},{"location":"vue/fetcher-directive/overview/","title":"Fetcher Directive","text":"<p>Authenticated image loading with lazy loading support</p> <p>The <code>v-fetcher-src</code> directive enables secure image loading through the authenticated fetcher, with support for lazy loading and automatic cleanup. It's specifically designed for loading images that require authentication or need to go through the fetcher pipeline.</p>"},{"location":"vue/fetcher-directive/overview/#key-features","title":"Key Features","text":"<ul> <li>Authenticated Image Loading: Load images through the authenticated fetcher</li> <li>Lazy Loading: Load images only when they enter the viewport</li> <li>Automatic Cleanup: Properly clean up blob URLs and abort requests</li> <li>Intersection Observer: Efficient viewport detection for lazy loading</li> <li>Error Handling: Built-in error handling for failed image loads</li> </ul>"},{"location":"vue/fetcher-directive/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Protected Images: Load user avatars, private files, or authenticated content</li> <li>Performance Optimization: Lazy load images below the fold</li> <li>Blob URL Management: Automatic creation and cleanup of blob URLs</li> <li>Authenticated Assets: Load images through the same auth pipeline as API calls</li> </ul>"},{"location":"vue/fetcher-directive/overview/#basic-usage","title":"Basic Usage","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Basic authenticated image loading --&gt;\n    &lt;img v-fetcher-src src=\"/user/avatar/123.jpg\" alt=\"User Avatar\" /&gt;\n\n    &lt;!-- Lazy loading with v-fetcher-src.lazy --&gt;\n    &lt;img\n      v-fetcher-src.lazy\n      src=\"/user/documents/report.jpg\"\n      alt=\"Report Image\"\n      style=\"opacity: 0; transition: opacity 0.3s;\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"vue/fetcher-directive/overview/#how-it-works","title":"How It Works","text":"<p>The directive automatically:</p> <ol> <li>Authentication: Images are loaded through the authenticated fetcher</li> <li>Blob Creation: Response is converted to blob and creates object URL</li> <li>Image Assignment: Blob URL is assigned to the img src</li> <li>Cleanup: Blob URL is automatically revoked after loading or unmount</li> <li>Lazy Loading: Uses Intersection Observer when <code>.lazy</code> modifier is used</li> </ol>"},{"location":"vue/fetcher-directive/overview/#get-started","title":"Get Started","text":"<p>Ready to use authenticated image loading? Check out our detailed guide:</p> <p>User Guide</p>"},{"location":"vue/fetcher-plugin/overview/","title":"Fetcher Plugin","text":"<p>Authentication and configuration plugin for HTTP requests</p> <p>The Fetcher Plugin provides automatic authentication, token refresh, and global configuration for all HTTP requests made with <code>useFetcher()</code>. It handles JWT tokens, automatic retry on 401 errors, and sets up the base URL configuration.</p>"},{"location":"vue/fetcher-plugin/overview/#key-features","title":"Key Features","text":"<ul> <li>Automatic Authentication: Injects JWT tokens into all requests</li> <li>Token Refresh: Automatically refreshes expired tokens</li> <li>Request Retry: Retries failed requests after token refresh</li> <li>Base URL Configuration: Sets up global API base URL</li> <li>Auth Store Integration: Works seamlessly with the auth store</li> </ul>"},{"location":"vue/fetcher-plugin/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Global Authentication: Automatic JWT token handling for all requests</li> <li>API Configuration: Set base URL and default headers</li> <li>Token Management: Automatic refresh and logout on auth failures</li> <li>Request Middleware: Global request/response interceptors</li> </ul>"},{"location":"vue/fetcher-plugin/overview/#usage-in-components","title":"Usage in Components","text":"<p>Always use <code>useFetcher()</code> in components, never access plugin directly:</p> <pre><code>import { useFetcher } from 'vue-fastedgy'\n\nconst fetcher = useFetcher()\nconst users = await fetcher.get('/users') // Automatically authenticated\n</code></pre> <p>The plugin works behind the scenes to: - Add authentication headers automatically - Refresh tokens when they expire - Retry failed requests after token refresh - Handle base URL resolution</p>"},{"location":"vue/fetcher-plugin/overview/#get-started","title":"Get Started","text":"<p>Ready to install the plugin? Check out the setup guide:</p> <p>Setup Guide</p>"},{"location":"vue/fetcher-plugin/setup/","title":"Fetcher Plugin Setup","text":"<p>This guide shows how to install and configure the Fetcher Plugin in your Vue.js application.</p>"},{"location":"vue/fetcher-plugin/setup/#installation","title":"Installation","text":"<pre><code>// In main.js\nimport { createFetcher } from 'vue-fastedgy'\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\nconst fetcher = createFetcher()\n\napp.use(fetcher)\napp.mount('#app')\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#environment-configuration","title":"Environment Configuration","text":"<p>The plugin automatically reads environment variables:</p> <pre><code># .env\nVITE_API_URL=https://api.example.com\n</code></pre> <p>The plugin will automatically set this as the base URL for all requests.</p>"},{"location":"vue/fetcher-plugin/setup/#configuration-functions","title":"Configuration Functions","text":"<p>The plugin exports utility functions for global configuration:</p> <pre><code>import {\n  setDefaultBaseUrl,\n  setDefaultHeaders,\n  setDefaultAuthorization,\n  absoluteUrl\n} from 'vue-fastedgy'\n\n// Set base URL (usually set via environment variables)\nsetDefaultBaseUrl('https://api.example.com')\n\n// Set default headers\nsetDefaultHeaders({\n  'X-Custom-Header': 'value',\n  'X-App-Version': '1.0.0'\n})\n\n// Set authorization token\nsetDefaultAuthorization('your-jwt-token')\n\n// Convert relative URL to absolute\nconst fullUrl = absoluteUrl('/users')\n// Returns: 'https://api.example.com/users'\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"vue/fetcher-plugin/setup/#custom-headers-per-environment","title":"Custom Headers Per Environment","text":"<pre><code>import { setDefaultHeaders } from 'vue-fastedgy'\n\nconst headers = {\n  'X-App-Version': '1.0.0'\n}\n\n// Add environment-specific headers\nif (process.env.NODE_ENV === 'development') {\n  headers['X-Debug'] = 'true'\n}\n\nif (process.env.VITE_ENVIRONMENT === 'staging') {\n  headers['X-Staging'] = 'true'\n}\n\nsetDefaultHeaders(headers)\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#dynamic-base-url","title":"Dynamic Base URL","text":"<pre><code>import { setDefaultBaseUrl } from 'vue-fastedgy'\n\n// Set different base URLs based on environment\nconst getBaseUrl = () =&gt; {\n  switch (process.env.NODE_ENV) {\n    case 'development':\n      return 'http://localhost:8000'\n    case 'staging':\n      return 'https://staging-api.example.com'\n    case 'production':\n      return 'https://api.example.com'\n    default:\n      return 'http://localhost:8000'\n  }\n}\n\nsetDefaultBaseUrl(getBaseUrl())\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#integration-with-auth-store","title":"Integration with Auth Store","text":"<p>The plugin automatically integrates with the Auth Store:</p> <pre><code>// The plugin automatically:\n// 1. Reads tokens from localStorage on startup\n// 2. Updates headers when auth store login/logout occurs\n// 3. Handles token refresh automatically\n// 4. Redirects to login on auth failures\n\n// No manual configuration needed - it works automatically!\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"vue/fetcher-plugin/setup/#base-url-issues","title":"Base URL Issues","text":"<pre><code>import { absoluteUrl } from 'vue-fastedgy'\n\n// Check if base URL is configured correctly\nconsole.log('Base URL test:', absoluteUrl('/test'))\n// Should output: 'https://your-api.com/test'\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#headers-not-being-added","title":"Headers Not Being Added","text":"<pre><code>import { setDefaultHeaders } from 'vue-fastedgy'\n\n// Verify headers are set\nsetDefaultHeaders({ 'X-Test': 'value' })\n\n// Check in network tab that requests include the header\n</code></pre>"},{"location":"vue/fetcher-plugin/setup/#authentication-not-working","title":"Authentication Not Working","text":"<ol> <li>Verify the Auth Store is properly configured</li> <li>Check that tokens are stored in localStorage</li> <li>Ensure the plugin is installed before making any requests</li> </ol> <pre><code>// Debug auth headers\nimport { setDefaultAuthorization } from 'vue-fastedgy'\n\nconst token = localStorage.getItem('access_token')\nconsole.log('Token:', token)\n\nif (token) {\n  setDefaultAuthorization(token)\n}\n</code></pre>"},{"location":"vue/i18n-directive/guide/","title":"I18n Directive Basic Usage","text":"<p>This guide shows you how to use the <code>v-tc</code> directive responsibly as a complementary tool to vue-i18n for specific use cases involving multi-line content translations.</p> <p>Complementary Tool</p> <p>The <code>v-tc</code> directive is designed to complement, not replace, vue-i18n best practices. Use it judiciously for cases where it genuinely improves template readability, particularly with multi-line content.</p>"},{"location":"vue/i18n-directive/guide/#global-text-translation-examples","title":"Global Text Translation Examples","text":"<p>The <code>v-tc</code> directive is particularly useful for translating complete text content directly in your templates. Instead of using translation keys, you can write the full text content within the element:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"terms-and-conditions\"&gt;\n    &lt;!-- Complete text with parameters --&gt;\n    &lt;p v-tc=\"{ company: 'Acme Corporation', effectiveDate: '2024-01-01' }\"&gt;\n      By using our services, you agree to be bound by these Terms of Service.\n      These terms are effective as of {effectiveDate} and apply to all users of\n      {company}'s platform and services.\n    &lt;/p&gt;\n\n    &lt;!-- Long help instruction --&gt;\n    &lt;div class=\"setup-instructions\" v-tc=\"{ version: '2.1.0', supportEmail: 'support@example.com' }\"&gt;\n      To complete the setup process, please download version {version} of our application\n      and follow the installation wizard. If you encounter any issues during installation,\n      please contact our support team at {supportEmail} for assistance.\n    &lt;/div&gt;\n\n    &lt;!-- Multi-paragraph content --&gt;\n    &lt;section class=\"privacy-notice\"&gt;\n      &lt;div v-tc=\"{ dataRetention: '90 days', region: 'European Union' }\"&gt;\n        We collect and process your personal data in accordance with applicable privacy laws.\n        Your data is stored securely in the {region} and retained for a maximum of {dataRetention}\n        unless required by law to be kept longer. You have the right to request deletion of your\n        personal information at any time.\n      &lt;/div&gt;\n    &lt;/section&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\n\n// These values can be reactive and come from your application state\nconst company = ref('Acme Corporation')\nconst effectiveDate = ref('2024-01-01')\nconst version = ref('2.1.0')\nconst supportEmail = ref('support@example.com')\nconst dataRetention = ref('90 days')\nconst region = ref('European Union')\n&lt;/script&gt;\n</code></pre> <p>This approach is ideal when:</p> <ul> <li>You have long, descriptive text content</li> <li>The text must be splitted in multiple lines</li> <li>The text contains multiple sentences or paragraphs</li> <li>Using <code>{{ $t() }}</code> would make your template cluttered and hard to read</li> <li>You need to include dynamic parameters within flowing text</li> </ul>"},{"location":"vue/i18n-directive/guide/#summary","title":"Summary","text":"<p>The <code>v-tc</code> directive is a specialized tool for specific use cases:</p> <ul> <li>Use for: Multi-line content, complex paragraphs, detailed explanations</li> <li>Don't use for: Simple labels, titles, buttons, short text</li> <li>Remember: It complements vue-i18n, it doesn't replace it</li> </ul> <p>Golden Rule: If your translation content is more than one line or contains complex formatting, consider <code>v-tc</code>. For everything else, stick with <code>{{ $t() }}</code>.</p>"},{"location":"vue/i18n-directive/overview/","title":"I18n Directive","text":"<p>Complementary tool for multi-line text translations</p> <p>FastEdgy for Vue.js uses vue-i18n as its internationalization solution. The <code>v-tc</code> (translate content) directive is a complementary tool designed to facilitate the translation of multi-line text content in your Vue.js templates. This directive does not replace vue-i18n best practices but provides a convenient alternative for specific use cases where template readability is important.</p> <p>Best Practices First</p> <p>This directive is a convenience tool and should not replace standard vue-i18n practices. Use <code>{{ $t('key') }}</code> for most translations and reserve <code>v-tc</code> for cases where it genuinely improves template readability, particularly with multi-line content.</p>"},{"location":"vue/i18n-directive/overview/#key-features","title":"Key Features","text":"<ul> <li>Multi-line Content: Ideal for long text content and paragraphs</li> <li>Template Readability: Reduces template clutter for complex translation keys</li> <li>Parameter Support: Pass translation parameters as directive values</li> <li>Automatic Reactivity: Updates automatically when locale changes</li> </ul>"},{"location":"vue/i18n-directive/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Long Paragraphs: Multi-line text content that would clutter templates</li> <li>Complex Translation Keys: Deeply nested keys that are hard to read inline</li> <li>Content-Heavy Components: Components with multiple long text sections</li> <li>Template Clarity: When <code>{{ $t() }}</code> expressions would reduce readability</li> </ul>"},{"location":"vue/i18n-directive/overview/#installation","title":"Installation","text":"<p>Add the i18n extra plugin to your Vue application:</p> <pre><code>import { createI18nExtra } from 'vue-fastedgy'\nimport { createI18n } from 'vue-i18n'\n\nconst i18n = createI18n({\n  // your i18n configuration\n})\n\nconst app = createApp(App)\n\n// Install the i18n extra plugin\napp.use(createI18nExtra(i18n))\napp.use(i18n)\n</code></pre>"},{"location":"vue/i18n-directive/overview/#get-started","title":"Get Started","text":"<p>Ready to simplify your translations? Check out our detailed guide:</p> <p>Basic Usage</p>"},{"location":"vue/logger/overview/","title":"Logger","text":"<p>Simple console logging with configurable log levels</p> <p>The Logger provides basic console logging management with configurable log levels to control which messages are displayed during development and production.</p>"},{"location":"vue/logger/overview/#available-exports","title":"Available Exports","text":"<ul> <li><code>LOG_LEVELS</code>: Constants for log levels (NONE, ERROR, WARNING, INFO, DEBUG)</li> <li><code>initializeLogger(logLevel)</code>: Configure console log level filtering</li> <li><code>logger</code>: Simple wrapper object around console methods</li> </ul>"},{"location":"vue/logger/overview/#log-levels","title":"Log Levels","text":"<pre><code>import { LOG_LEVELS } from 'vue-fastedgy'\n\nconsole.log(LOG_LEVELS)\n// {\n//   NONE: 'none',\n//   ERROR: 'error',\n//   WARNING: 'warning',\n//   INFO: 'info',\n//   DEBUG: 'debug'\n// }\n</code></pre> <p>Level Hierarchy: - <code>NONE</code>: No console output at all - <code>ERROR</code>: Only console.error() works - <code>WARNING</code>: console.error() + console.warn() work - <code>INFO</code>: console.error() + console.warn() + console.info() + console.log() work - <code>DEBUG</code>: All console methods work (including console.debug())</p>"},{"location":"vue/logger/overview/#initialize-logger","title":"Initialize Logger","text":"<pre><code>import { initializeLogger, LOG_LEVELS } from 'vue-fastedgy'\n\n// Set log level (overwrites native console methods)\ninitializeLogger(LOG_LEVELS.INFO)\n\n// Now console methods are filtered based on level\nconsole.debug('This will not appear') // Filtered out\nconsole.info('This will appear')      // Allowed\nconsole.error('This will appear')     // Allowed\n\n// Production: disable all logging\ninitializeLogger(LOG_LEVELS.NONE)\nconsole.error('This will not appear') // All console output disabled\n</code></pre>"},{"location":"vue/logger/overview/#logger-object","title":"Logger Object","text":"<p>Simple wrapper that delegates to console methods:</p> <pre><code>import { logger } from 'vue-fastedgy'\n\n// These are just wrappers around console methods\nlogger.error('Error message')   // Same as console.error()\nlogger.warn('Warning message')  // Same as console.warn()\nlogger.info('Info message')     // Same as console.info()\nlogger.log('Log message')       // Same as console.log()\nlogger.debug('Debug message')   // Same as console.debug()\n</code></pre>"},{"location":"vue/logger/overview/#how-it-works","title":"How It Works","text":"<p>The logger works by overwriting the native <code>console</code> methods when <code>initializeLogger()</code> is called. It doesn't add complex features like formatting or transports - it simply enables/disables console output based on the configured level.</p> <p>Important: Once you call <code>initializeLogger()</code>, the native console methods are permanently modified for the session.</p>"},{"location":"vue/logger/overview/#get-started","title":"Get Started","text":"<p>Ready to configure logging in your application? Check out the setup guide:</p> <p>Setup Guide</p>"},{"location":"vue/logger/setup/","title":"Logger Setup Guide","text":"<p>This guide shows you how to configure and use the logger in your Vue.js application.</p>"},{"location":"vue/logger/setup/#vue-application-setup","title":"Vue Application Setup","text":"<pre><code>// main.js\nimport { createApp } from 'vue'\nimport { initializeLogger, LOG_LEVELS } from 'vue-fastedgy'\nimport App from './App.vue'\n\n// Configure logging based on environment\nconst logLevel = process.env.NODE_ENV === 'production'\n  ? LOG_LEVELS.ERROR  // Only errors in production\n  : LOG_LEVELS.DEBUG  // All logs in development\n\ninitializeLogger(logLevel)\n\nconst app = createApp(App)\napp.mount('#app')\n</code></pre>"},{"location":"vue/logger/setup/#environment-based-configuration","title":"Environment-Based Configuration","text":""},{"location":"vue/logger/setup/#development-vs-production","title":"Development vs Production","text":"<pre><code>// Recommended setup\nconst getLogLevel = () =&gt; {\n  switch (process.env.NODE_ENV) {\n    case 'production':\n      return LOG_LEVELS.NONE    // Disable all logs in production\n    case 'staging':\n      return LOG_LEVELS.ERROR   // Only errors in staging\n    case 'test':\n      return LOG_LEVELS.NONE    // Disable logs during testing\n    default:\n      return LOG_LEVELS.DEBUG   // Full logging in development\n  }\n}\n\ninitializeLogger(getLogLevel())\n</code></pre>"},{"location":"vue/logger/setup/#environment-variable-control","title":"Environment Variable Control","text":"<pre><code>// Allow runtime log level control via environment variable\nconst LOG_LEVEL_MAP = {\n  'none': LOG_LEVELS.NONE,\n  'error': LOG_LEVELS.ERROR,\n  'warning': LOG_LEVELS.WARNING,\n  'info': LOG_LEVELS.INFO,\n  'debug': LOG_LEVELS.DEBUG\n}\n\nconst envLogLevel = process.env.VITE_LOG_LEVEL || 'info'\nconst logLevel = LOG_LEVEL_MAP[envLogLevel.toLowerCase()] || LOG_LEVELS.INFO\n\ninitializeLogger(logLevel)\n</code></pre>"},{"location":"vue/logger/setup/#usage-in-components","title":"Usage in Components","text":"<p>Once initialized, use console methods normally throughout your application:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"handleClick\"&gt;Test Logging&lt;/button&gt;\n    &lt;div v-if=\"data\"&gt;{{ data }}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { useFetcher } from 'vue-fastedgy'\n\nconst fetcher = useFetcher()\nconst data = ref(null)\n\nconst handleClick = async () =&gt; {\n  console.debug('Button clicked, starting request...')\n\n  try {\n    console.info('Fetching data from users')\n    const response = await fetcher.get('/users')\n\n    data.value = response.data\n    console.info('Data loaded successfully:', data.value.length, 'users')\n  } catch (error) {\n    console.error('Failed to fetch users:', error)\n    console.warn('Using fallback data instead')\n    data.value = []\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/logger/setup/#service-classes","title":"Service Classes","text":"<p>Use logging in service classes:</p> <pre><code>// services/UserService.js\nimport { useFetcherService } from 'vue-fastedgy'\n\nexport class UserService {\n  constructor() {\n    this.fetcher = useFetcherService()\n  }\n\n  async getUsers(filters = {}) {\n    console.debug('UserService.getUsers called with filters:', filters)\n\n    try {\n      const response = await this.fetcher.get('/users', { params: filters })\n      console.info(`Loaded ${response.data.length} users`)\n      return response.data\n    } catch (error) {\n      console.error('UserService.getUsers failed:', error)\n      throw error\n    }\n  }\n\n  async createUser(userData) {\n    console.debug('UserService.createUser called with:', userData)\n\n    try {\n      const response = await this.fetcher.post('/users', userData)\n      console.info('User created successfully:', response.data.id)\n      return response.data\n    } catch (error) {\n      console.error('UserService.createUser failed:', error)\n      throw error\n    }\n  }\n}\n</code></pre>"},{"location":"vue/logger/setup/#debugging-patterns","title":"Debugging Patterns","text":""},{"location":"vue/logger/setup/#api-request-logging","title":"API Request Logging","text":"<pre><code>// Log API requests and responses\nconst apiCall = async (method, url, data = null) =&gt; {\n  console.debug(`API ${method.toUpperCase()} ${url}`, data)\n\n  try {\n    const response = await fetcher[method.toLowerCase()](url, data)\n    console.info(`API ${method.toUpperCase()} ${url} success:`, response.status)\n    return response\n  } catch (error) {\n    console.error(`API ${method.toUpperCase()} ${url} failed:`, error)\n    throw error\n  }\n}\n</code></pre>"},{"location":"vue/logger/setup/#component-lifecycle-logging","title":"Component Lifecycle Logging","text":"<pre><code>&lt;script setup&gt;\nimport { onMounted, onBeforeUnmount, watch } from 'vue'\n\nconst props = defineProps(['userId'])\n\nonMounted(() =&gt; {\n  console.debug('UserProfile component mounted, userId:', props.userId)\n  loadUserData()\n})\n\nonBeforeUnmount(() =&gt; {\n  console.debug('UserProfile component unmounting')\n})\n\nwatch(() =&gt; props.userId, (newId, oldId) =&gt; {\n  console.debug('UserProfile userId changed:', { from: oldId, to: newId })\n  if (newId) {\n    loadUserData()\n  }\n})\n\nconst loadUserData = async () =&gt; {\n  console.info('Loading user data for ID:', props.userId)\n  // ... fetch logic\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/logger/setup/#error-boundary-logging","title":"Error Boundary Logging","text":"<pre><code>// Global error handler\napp.config.errorHandler = (error, instance, info) =&gt; {\n  console.error('Vue error caught:', error)\n  console.error('Component instance:', instance)\n  console.error('Error info:', info)\n\n  // Also log to external service in production\n  if (process.env.NODE_ENV === 'production') {\n    // sendToErrorTracking(error, instance, info)\n  }\n}\n</code></pre>"},{"location":"vue/logger/setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"vue/logger/setup/#conditional-logging-by-module","title":"Conditional Logging by Module","text":"<pre><code>// Create module-specific loggers\nconst createModuleLogger = (moduleName) =&gt; {\n  const isEnabled = localStorage.getItem(`debug:${moduleName}`) === 'true'\n\n  return {\n    debug: (...args) =&gt; isEnabled &amp;&amp; console.debug(`[${moduleName}]`, ...args),\n    info: (...args) =&gt; isEnabled &amp;&amp; console.info(`[${moduleName}]`, ...args),\n    warn: (...args) =&gt; isEnabled &amp;&amp; console.warn(`[${moduleName}]`, ...args),\n    error: (...args) =&gt; console.error(`[${moduleName}]`, ...args) // Always log errors\n  }\n}\n\n// Usage\nconst authLogger = createModuleLogger('Auth')\nconst apiLogger = createModuleLogger('API')\n\n// Enable specific modules in browser console:\n// localStorage.setItem('debug:Auth', 'true')\n</code></pre>"},{"location":"vue/logger/setup/#performance-logging","title":"Performance Logging","text":"<pre><code>// Performance measurement utilities\nconst perfLogger = {\n  start(label) {\n    console.debug(`\u23f1\ufe0f Starting: ${label}`)\n    console.time(label)\n  },\n\n  end(label) {\n    console.timeEnd(label)\n    console.debug(`\u23f1\ufe0f Finished: ${label}`)\n  },\n\n  mark(label, ...data) {\n    console.debug(`\ud83d\udccd Mark: ${label}`, ...data)\n  }\n}\n\n// Usage in components\nconst loadData = async () =&gt; {\n  perfLogger.start('loadData')\n\n  try {\n    perfLogger.mark('starting API call')\n    const response = await fetcher.get('/data')\n\n    perfLogger.mark('processing data', response.data.length, 'items')\n    const processed = processData(response.data)\n\n    perfLogger.end('loadData')\n    return processed\n  } catch (error) {\n    perfLogger.end('loadData')\n    throw error\n  }\n}\n</code></pre>"},{"location":"vue/logger/setup/#testing-configuration","title":"Testing Configuration","text":"<pre><code>// In test setup files\nimport { initializeLogger, LOG_LEVELS } from 'vue-fastedgy'\n\n// Disable all logging during tests to keep output clean\nbeforeAll(() =&gt; {\n  initializeLogger(LOG_LEVELS.NONE)\n})\n\n// Or only allow errors for debugging test failures\nbeforeAll(() =&gt; {\n  initializeLogger(LOG_LEVELS.ERROR)\n})\n</code></pre>"},{"location":"vue/logger/setup/#browser-console-tips","title":"Browser Console Tips","text":"<p>Once the logger is initialized, you can still control it from browser console:</p> <pre><code>// In browser console during development:\n\n// Temporarily enable all logging\ninitializeLogger(LOG_LEVELS.DEBUG)\n\n// Disable all logging\ninitializeLogger(LOG_LEVELS.NONE)\n\n// Check current environment\nconsole.log('NODE_ENV:', process.env.NODE_ENV)\n</code></pre>"},{"location":"vue/metadata-store/examples/","title":"Metadata Store Examples","text":"<p>This guide shows concrete examples of what you can build using the Metadata Store to create dynamic, metadata-driven UIs.</p>"},{"location":"vue/metadata-store/examples/#dynamic-form-generation","title":"Dynamic Form Generation","text":"<p>Build form fields automatically from metadata:</p> <pre><code>import { useMetadataStore } from 'vue-fastedgy'\n\n// Build form fields from metadata\nconst metadataStore = useMetadataStore()\nconst userMetadata = await metadataStore.getMetadata('User')\n\nconst formFields = Object.entries(userMetadata.fields).map(([name, field]) =&gt; ({\n  name,\n  type: field.type,\n  required: field.required,\n  label: field.label || name,\n  placeholder: field.help_text\n}))\n</code></pre>"},{"location":"vue/metadata-store/examples/#client-side-validation","title":"Client-Side Validation","text":"<p>Create validation rules from backend constraints:</p> <pre><code>const validateField = (fieldName, value) =&gt; {\n  const fieldMeta = userMetadata.fields[fieldName]\n\n  if (fieldMeta.required &amp;&amp; !value) {\n    return `${fieldName} is required`\n  }\n\n  if (fieldMeta.max_length &amp;&amp; value.length &gt; fieldMeta.max_length) {\n    return `${fieldName} must be ${fieldMeta.max_length} characters or less`\n  }\n\n  return null\n}\n</code></pre>"},{"location":"vue/metadata-store/examples/#dynamic-ui-components","title":"Dynamic UI Components","text":"<p>Generate different input types based on metadata:</p> <pre><code>&lt;template&gt;\n  &lt;div v-for=\"(field, name) in userFields\" :key=\"name\"&gt;\n    &lt;label&gt;{{ field.label || name }}&lt;/label&gt;\n\n    &lt;!-- Different input types based on metadata --&gt;\n    &lt;input\n      v-if=\"field.type === 'string'\"\n      :type=\"field.format === 'email' ? 'email' : 'text'\"\n      :required=\"field.required\"\n      :maxlength=\"field.max_length\"\n    /&gt;\n\n    &lt;input\n      v-else-if=\"field.type === 'integer'\"\n      type=\"number\"\n      :min=\"field.minimum\"\n      :max=\"field.maximum\"\n      :required=\"field.required\"\n    /&gt;\n\n    &lt;select v-else-if=\"field.choices\" :required=\"field.required\"&gt;\n      &lt;option v-for=\"choice in field.choices\" :key=\"choice.value\" :value=\"choice.value\"&gt;\n        {{ choice.display_name }}\n      &lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"vue/metadata-store/examples/#admin-table-columns","title":"Admin Table Columns","text":"<p>Build table columns from metadata:</p> <pre><code>const buildTableColumns = (modelName) =&gt; {\n  const metadataStore = useMetadataStore()\n  const metadata = metadataStore.getMetadata(modelName)\n\n  return Object.entries(metadata.fields).map(([name, field]) =&gt; ({\n    key: name,\n    title: field.label || name,\n    sortable: field.type !== 'text',\n    filterable: field.choices ? 'select' : field.type === 'string' ? 'search' : 'range'\n  }))\n}\n</code></pre>"},{"location":"vue/metadata-store/examples/#api-documentation-generator","title":"API Documentation Generator","text":"<p>Generate interactive API docs from metadata:</p> <pre><code>const generateApiDocs = () =&gt; {\n  const metadataStore = useMetadataStore()\n  const allMetadata = metadataStore.getMetadatas()\n\n  return Object.entries(allMetadata).map(([model, metadata]) =&gt; ({\n    model,\n    fields: metadata.fields,\n    endpoints: [\n      { method: 'GET', url: `/${model.toLowerCase()}s/` },\n      { method: 'POST', url: `/${model.toLowerCase()}s/`, body: metadata.fields },\n      { method: 'GET', url: `/${model.toLowerCase()}s/{id}/` },\n      { method: 'PUT', url: `/${model.toLowerCase()}s/{id}/`, body: metadata.fields }\n    ]\n  }))\n}\n</code></pre>"},{"location":"vue/metadata-store/examples/#simple-dynamic-form-component","title":"Simple Dynamic Form Component","text":"<p>Here's a practical example of a dynamic form component:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"dynamic-form\"&gt;\n    &lt;h2&gt;{{ modelName }} Form&lt;/h2&gt;\n\n    &lt;form @submit.prevent=\"handleSubmit\"&gt;\n      &lt;div\n        v-for=\"(field, fieldName) in fields\"\n        :key=\"fieldName\"\n        class=\"form-group\"\n      &gt;\n        &lt;label :for=\"fieldName\"&gt;\n          {{ field.label || fieldName }}\n          &lt;span v-if=\"field.required\" class=\"required\"&gt;*&lt;/span&gt;\n        &lt;/label&gt;\n\n        &lt;!-- String fields --&gt;\n        &lt;input\n          v-if=\"field.type === 'string'\"\n          :id=\"fieldName\"\n          v-model=\"formData[fieldName]\"\n          :type=\"getInputType(field)\"\n          :required=\"field.required\"\n          :maxlength=\"field.max_length\"\n          :placeholder=\"field.help_text\"\n        /&gt;\n\n        &lt;!-- Number fields --&gt;\n        &lt;input\n          v-else-if=\"field.type === 'integer' || field.type === 'number'\"\n          :id=\"fieldName\"\n          v-model=\"formData[fieldName]\"\n          type=\"number\"\n          :required=\"field.required\"\n          :min=\"field.minimum\"\n          :max=\"field.maximum\"\n        /&gt;\n\n        &lt;!-- Boolean fields --&gt;\n        &lt;input\n          v-else-if=\"field.type === 'boolean'\"\n          :id=\"fieldName\"\n          v-model=\"formData[fieldName]\"\n          type=\"checkbox\"\n        /&gt;\n\n        &lt;!-- Choice fields --&gt;\n        &lt;select\n          v-else-if=\"field.choices\"\n          :id=\"fieldName\"\n          v-model=\"formData[fieldName]\"\n          :required=\"field.required\"\n        &gt;\n          &lt;option value=\"\"&gt;Choose {{ field.label || fieldName }}...&lt;/option&gt;\n          &lt;option\n            v-for=\"choice in field.choices\"\n            :key=\"choice.value\"\n            :value=\"choice.value\"\n          &gt;\n            {{ choice.display_name }}\n          &lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" :disabled=\"loading\"&gt;\n        {{ loading ? 'Saving...' : 'Save' }}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore, useFetcher } from 'vue-fastedgy'\nimport { ref, reactive, computed, onMounted } from 'vue'\n\nconst props = defineProps(['modelName'])\nconst emit = defineEmits(['saved'])\n\nconst metadataStore = useMetadataStore()\nconst fetcher = useFetcher()\n\nconst formData = reactive({})\nconst loading = ref(false)\n\nconst fields = computed(() =&gt; {\n  const metadata = metadataStore.getMetadata(props.modelName)\n  return metadata?.fields || {}\n})\n\nconst getInputType = (field) =&gt; {\n  switch (field.format) {\n    case 'email': return 'email'\n    case 'password': return 'password'\n    case 'url': return 'url'\n    case 'date': return 'date'\n    default: return 'text'\n  }\n}\n\nconst handleSubmit = async () =&gt; {\n  loading.value = true\n\n  try {\n    const response = await fetcher.post(`/${props.modelName.toLowerCase()}s/`, formData)\n    emit('saved', response.data)\n\n    // Reset form\n    Object.keys(formData).forEach(key =&gt; {\n      formData[key] = ''\n    })\n  } catch (error) {\n    console.error('Save error:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n\n  // Initialize form data\n  Object.entries(fields.value).forEach(([fieldName, field]) =&gt; {\n    if (field.type === 'boolean') {\n      formData[fieldName] = false\n    } else {\n      formData[fieldName] = ''\n    }\n  })\n})\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.dynamic-form {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.form-group {\n  margin-bottom: 1rem;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n}\n\n.required {\n  color: red;\n}\n\ninput, select {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nbutton {\n  background: #007bff;\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/metadata-store/examples/#model-field-inspector","title":"Model Field Inspector","text":"<p>A simple component to inspect model fields:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"field-inspector\"&gt;\n    &lt;h3&gt;{{ modelName }} Fields&lt;/h3&gt;\n\n    &lt;div v-if=\"loading\"&gt;Loading metadata...&lt;/div&gt;\n\n    &lt;div v-else-if=\"metadata\" class=\"fields-list\"&gt;\n      &lt;div\n        v-for=\"(field, name) in metadata.fields\"\n        :key=\"name\"\n        class=\"field-item\"\n      &gt;\n        &lt;strong&gt;{{ name }}&lt;/strong&gt;\n        &lt;span class=\"field-type\"&gt;{{ field.type }}&lt;/span&gt;\n        &lt;span v-if=\"field.required\" class=\"required\"&gt;required&lt;/span&gt;\n        &lt;span v-if=\"field.max_length\" class=\"constraint\"&gt;max: {{ field.max_length }}&lt;/span&gt;\n        &lt;div v-if=\"field.help_text\" class=\"help-text\"&gt;{{ field.help_text }}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { computed, onMounted } from 'vue'\n\nconst props = defineProps(['modelName'])\nconst metadataStore = useMetadataStore()\n\nconst metadata = computed(() =&gt; metadataStore.getMetadata(props.modelName))\nconst loading = computed(() =&gt; metadataStore.loading)\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.field-item {\n  padding: 0.5rem;\n  border-bottom: 1px solid #eee;\n}\n\n.field-type {\n  color: #666;\n  font-style: italic;\n  margin-left: 1rem;\n}\n\n.required {\n  color: red;\n  font-size: 0.8rem;\n  margin-left: 0.5rem;\n}\n\n.constraint {\n  color: #999;\n  font-size: 0.8rem;\n  margin-left: 0.5rem;\n}\n\n.help-text {\n  font-size: 0.9rem;\n  color: #666;\n  margin-top: 0.25rem;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/metadata-store/guide/","title":"Metadata Store User Guide","text":"<p>This guide shows you how to use the Metadata Store in your Vue.js components with practical patterns.</p>"},{"location":"vue/metadata-store/guide/#using-in-components","title":"Using in Components","text":"<pre><code>&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { onMounted, computed } from 'vue'\n\nconst metadataStore = useMetadataStore()\n\nconst userFields = computed(() =&gt; {\n  const metadata = metadataStore.getMetadata('User')\n  return metadata?.fields || {}\n})\n\nonMounted(async () =&gt; {\n  // Load metadata on component mount\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/metadata-store/guide/#form-field-discovery","title":"Form Field Discovery","text":"<p>Use metadata to understand what fields are available for a model:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h3&gt;User Fields:&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"(field, name) in userFields\" :key=\"name\"&gt;\n        &lt;strong&gt;{{ name }}&lt;/strong&gt;: {{ field.type }}\n        &lt;span v-if=\"field.required\"&gt;(required)&lt;/span&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { computed, onMounted } from 'vue'\n\nconst metadataStore = useMetadataStore()\n\nconst userFields = computed(() =&gt; {\n  const metadata = metadataStore.getMetadata('User')\n  return metadata?.fields || {}\n})\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/metadata-store/guide/#validation-helper","title":"Validation Helper","text":"<p>Build validation rules from metadata:</p> <pre><code>import { useMetadataStore } from 'vue-fastedgy'\n\nconst metadataStore = useMetadataStore()\n\nconst validateField = async (modelName, fieldName, value) =&gt; {\n  const metadata = await metadataStore.getMetadata(modelName)\n  const field = metadata?.fields?.[fieldName]\n\n  if (!field) return null\n\n  // Required validation\n  if (field.required &amp;&amp; (!value || value === '')) {\n    return `${fieldName} is required`\n  }\n\n  // String length validation\n  if (field.type === 'string' &amp;&amp; field.max_length &amp;&amp; value.length &gt; field.max_length) {\n    return `${fieldName} must be ${field.max_length} characters or less`\n  }\n\n  // Number range validation\n  if (field.type === 'integer' || field.type === 'number') {\n    const num = Number(value)\n    if (field.minimum !== undefined &amp;&amp; num &lt; field.minimum) {\n      return `${fieldName} must be at least ${field.minimum}`\n    }\n    if (field.maximum !== undefined &amp;&amp; num &gt; field.maximum) {\n      return `${fieldName} must be at most ${field.maximum}`\n    }\n  }\n\n  return null\n}\n\n// Usage in component\nconst errors = reactive({})\n\nconst validateUserForm = async (formData) =&gt; {\n  errors.email = await validateField('User', 'email', formData.email)\n  errors.age = await validateField('User', 'age', formData.age)\n\n  // Remove null errors\n  Object.keys(errors).forEach(key =&gt; {\n    if (errors[key] === null) {\n      delete errors[key]\n    }\n  })\n\n  return Object.keys(errors).length === 0\n}\n</code></pre>"},{"location":"vue/metadata-store/guide/#loading-states","title":"Loading States","text":"<p>Handle loading and error states properly:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=\"metadataStore.loading\"&gt;\n      Loading metadata...\n    &lt;/div&gt;\n\n    &lt;div v-else-if=\"metadataStore.error\"&gt;\n      Error loading metadata: {{ metadataStore.error.message }}\n      &lt;button @click=\"retry\"&gt;Retry&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div v-else-if=\"metadata\"&gt;\n      &lt;h3&gt;{{ modelName }} Fields&lt;/h3&gt;\n      &lt;div v-for=\"(field, name) in metadata.fields\" :key=\"name\"&gt;\n        {{ name }}: {{ field.type }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div v-else&gt;\n      No metadata available\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { computed, onMounted } from 'vue'\n\nconst props = defineProps(['modelName'])\nconst metadataStore = useMetadataStore()\n\nconst metadata = computed(() =&gt;\n  metadataStore.getMetadata(props.modelName)\n)\n\nconst retry = async () =&gt; {\n  await metadataStore.fetchMetadatas()\n}\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/metadata-store/guide/#model-discovery","title":"Model Discovery","text":"<p>List all available models:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h3&gt;Available Models&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"modelName in availableModels\" :key=\"modelName\"&gt;\n        &lt;router-link :to=\"`/models/${modelName}`\"&gt;\n          {{ modelName }}\n        &lt;/router-link&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { computed, onMounted } from 'vue'\n\nconst metadataStore = useMetadataStore()\n\nconst availableModels = computed(() =&gt; {\n  const metadata = metadataStore.getMetadatas()\n  return metadata ? Object.keys(metadata) : []\n})\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/metadata-store/guide/#conditional-field-display","title":"Conditional Field Display","text":"<p>Show/hide fields based on metadata:</p> <pre><code>&lt;template&gt;\n  &lt;form&gt;\n    &lt;div\n      v-for=\"(field, name) in visibleFields\"\n      :key=\"name\"\n      class=\"form-field\"\n    &gt;\n      &lt;label&gt;\n        {{ field.label || name }}\n        &lt;span v-if=\"field.required\"&gt;*&lt;/span&gt;\n      &lt;/label&gt;\n\n      &lt;input\n        v-if=\"field.type === 'string'\"\n        :type=\"getInputType(field)\"\n        :maxlength=\"field.max_length\"\n        :required=\"field.required\"\n      /&gt;\n\n      &lt;input\n        v-else-if=\"field.type === 'integer'\"\n        type=\"number\"\n        :min=\"field.minimum\"\n        :max=\"field.maximum\"\n        :required=\"field.required\"\n      /&gt;\n\n      &lt;select\n        v-else-if=\"field.choices\"\n        :required=\"field.required\"\n      &gt;\n        &lt;option value=\"\"&gt;Choose...&lt;/option&gt;\n        &lt;option\n          v-for=\"choice in field.choices\"\n          :key=\"choice.value\"\n          :value=\"choice.value\"\n        &gt;\n          {{ choice.display_name }}\n        &lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMetadataStore } from 'vue-fastedgy'\nimport { computed, onMounted } from 'vue'\n\nconst props = defineProps(['modelName', 'hideFields'])\n\nconst metadataStore = useMetadataStore()\n\nconst visibleFields = computed(() =&gt; {\n  const metadata = metadataStore.getMetadata(props.modelName)\n  if (!metadata?.fields) return {}\n\n  const fields = { ...metadata.fields }\n\n  // Hide specified fields\n  if (props.hideFields) {\n    props.hideFields.forEach(fieldName =&gt; {\n      delete fields[fieldName]\n    })\n  }\n\n  return fields\n})\n\nconst getInputType = (field) =&gt; {\n  if (field.format === 'email') return 'email'\n  if (field.format === 'password') return 'password'\n  if (field.format === 'url') return 'url'\n  return 'text'\n}\n\nonMounted(async () =&gt; {\n  await metadataStore.getMetadatas()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/metadata-store/overview/","title":"Metadata Store","text":"<p>Simple Pinia store for accessing FastEdgy dataset metadata</p> <p>The Metadata Store is a Pinia store that fetches and caches metadata from FastEdgy's <code>/dataset/metadatas</code> endpoint. It provides a centralized way to access model schemas and field definitions.</p>"},{"location":"vue/metadata-store/overview/#key-features","title":"Key Features","text":"<ul> <li>Centralized Store: Pinia store for metadata management</li> <li>Lazy Loading: Fetches metadata only when first accessed</li> <li>Caching: Stores metadata to avoid repeated API calls</li> <li>Authentication Aware: Only fetches when user is authenticated</li> </ul>"},{"location":"vue/metadata-store/overview/#api-methods","title":"API Methods","text":"<ul> <li><code>fetchMetadatas()</code>: Force fetch metadata from API</li> <li><code>getMetadatas()</code>: Get all metadata (fetches if not cached)</li> <li><code>getMetadata(modelName)</code>: Get metadata for specific model</li> <li><code>loading</code>: Loading state</li> <li><code>error</code>: Error state</li> </ul>"},{"location":"vue/metadata-store/overview/#quick-example","title":"Quick Example","text":"<pre><code>import { useMetadataStore } from 'vue-fastedgy'\n\nconst metadataStore = useMetadataStore()\n\n// Get all metadata\nconst allMetadata = await metadataStore.getMetadatas()\nconsole.log(allMetadata) // { User: {...}, Post: {...}, ... }\n\n// Get specific model metadata\nconst userMetadata = await metadataStore.getMetadata('User')\nconsole.log(userMetadata) // { fields: {...}, relations: {...}, ... }\n\n// Check loading state\nconsole.log(metadataStore.loading) // true/false\n\n// Handle errors\nif (metadataStore.error) {\n  console.error('Failed to load metadata:', metadataStore.error)\n}\n</code></pre>"},{"location":"vue/metadata-store/overview/#get-started","title":"Get Started","text":"<p>Ready to use metadata in your application? Check out our guides:</p> <p>User Guide Examples &amp; Ideas</p>"},{"location":"vue/routers/guide/","title":"Routers User Guide","text":"<p>This guide shows you how to use the router utilities in real Vue.js applications with practical examples and patterns.</p>"},{"location":"vue/routers/guide/#vue-component-usage","title":"Vue Component Usage","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Search form that updates URL --&gt;\n    &lt;form @submit.prevent=\"search\"&gt;\n      &lt;input v-model=\"searchQuery\" placeholder=\"Search users...\" /&gt;\n      &lt;button type=\"submit\"&gt;Search&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;!-- Filter controls --&gt;\n    &lt;div class=\"filters\"&gt;\n      &lt;select v-model=\"statusFilter\" @change=\"updateFilters\"&gt;\n        &lt;option value=\"\"&gt;All Status&lt;/option&gt;\n        &lt;option value=\"active\"&gt;Active&lt;/option&gt;\n        &lt;option value=\"inactive\"&gt;Inactive&lt;/option&gt;\n      &lt;/select&gt;\n\n      &lt;select v-model=\"roleFilter\" @change=\"updateFilters\"&gt;\n        &lt;option value=\"\"&gt;All Roles&lt;/option&gt;\n        &lt;option value=\"admin\"&gt;Admin&lt;/option&gt;\n        &lt;option value=\"user\"&gt;User&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { replaceRouteQuery, restoreRouteQuery } from 'vue-fastedgy'\nimport { ref, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst searchQuery = ref('')\nconst statusFilter = ref('')\nconst roleFilter = ref('')\n\n// Restore state from URL on component mount\nonMounted(() =&gt; {\n  searchQuery.value = restoreRouteQuery('q', route, 'search', '')\n  statusFilter.value = restoreRouteQuery('status', route, 'search', '')\n  roleFilter.value = restoreRouteQuery('role', route, 'search', '')\n})\n\nconst search = () =&gt; {\n  replaceRouteQuery(router, {\n    q: searchQuery.value || undefined,\n    page: undefined // Reset pagination on new search\n  }, route, 'search')\n}\n\nconst updateFilters = () =&gt; {\n  replaceRouteQuery(router, {\n    status: statusFilter.value || undefined,\n    role: roleFilter.value || undefined,\n    page: undefined // Reset pagination on filter change\n  }, route, 'search')\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/routers/guide/#login-redirect-flow","title":"Login Redirect Flow","text":"<p>Handle authentication redirects properly:</p> <pre><code>&lt;!-- LoginPage.vue --&gt;\n&lt;script setup&gt;\nimport { addRedirect, getRedirect, useAuthStore } from 'vue-fastedgy'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst authStore = useAuthStore()\nconst route = useRoute()\nconst router = useRouter()\n\nconst handleLogin = async (credentials) =&gt; {\n  const result = await authStore.login(credentials)\n\n  if (result.success) {\n    // Get intended destination or default to dashboard\n    const redirectTo = getRedirect(route, { name: 'Dashboard' })\n    router.push(redirectTo)\n  } else {\n    console.error(result.message)\n  }\n}\n&lt;/script&gt;\n</code></pre> <pre><code>// In router guards\nimport { addRedirect, useAuthStore } from 'vue-fastedgy'\n\nrouter.beforeEach((to, from, next) =&gt; {\n  const authStore = useAuthStore()\n\n  if (to.meta.requiresAuth &amp;&amp; !authStore.isAuthenticated) {\n    // Save intended destination\n    const loginRoute = addRedirect(from, { name: 'Login' })\n    next(loginRoute)\n  } else {\n    next()\n  }\n})\n</code></pre>"},{"location":"vue/routers/guide/#advanced-filter-management","title":"Advanced Filter Management","text":"<p>Handle complex filter state with URL synchronization:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"data-table\"&gt;\n    &lt;!-- Filter controls --&gt;\n    &lt;div class=\"filter-bar\"&gt;\n      &lt;div class=\"filter-group\"&gt;\n        &lt;label&gt;Search:&lt;/label&gt;\n        &lt;input v-model=\"filters.search\" @input=\"updateFiltersDebounced\" /&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"filter-group\"&gt;\n        &lt;label&gt;Date Range:&lt;/label&gt;\n        &lt;input v-model=\"filters.dateFrom\" type=\"date\" @change=\"updateFilters\" /&gt;\n        &lt;input v-model=\"filters.dateTo\" type=\"date\" @change=\"updateFilters\" /&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"filter-group\"&gt;\n        &lt;label&gt;Categories:&lt;/label&gt;\n        &lt;select v-model=\"filters.categories\" multiple @change=\"updateFilters\"&gt;\n          &lt;option v-for=\"cat in availableCategories\" :key=\"cat.id\" :value=\"cat.id\"&gt;\n            {{ cat.name }}\n          &lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/div&gt;\n\n      &lt;button @click=\"clearFilters\"&gt;Clear All&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Results --&gt;\n    &lt;div class=\"results\"&gt;\n      &lt;div v-for=\"item in filteredResults\" :key=\"item.id\"&gt;\n        {{ item.name }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { replaceRouteQuery, restoreRouteQuery } from 'vue-fastedgy'\nimport { reactive, watch, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { debounce } from 'lodash-es'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst filters = reactive({\n  search: '',\n  dateFrom: '',\n  dateTo: '',\n  categories: []\n})\n\nconst filteredResults = ref([])\nconst availableCategories = ref([])\n\n// Restore filters from URL on mount\nonMounted(() =&gt; {\n  filters.search = restoreRouteQuery('search', route, 'filters', '')\n  filters.dateFrom = restoreRouteQuery('dateFrom', route, 'filters', '')\n  filters.dateTo = restoreRouteQuery('dateTo', route, 'filters', '')\n  filters.categories = restoreRouteQuery('categories', route, 'filters', [], 'object')\n\n  // Initial data load\n  loadData()\n})\n\n// Update URL when filters change\nconst updateFilters = () =&gt; {\n  const filterData = {\n    search: filters.search || undefined,\n    dateFrom: filters.dateFrom || undefined,\n    dateTo: filters.dateTo || undefined,\n    categories: filters.categories.length &gt; 0 ? filters.categories : undefined\n  }\n\n  replaceRouteQuery(router, filterData, route, 'filters')\n  loadData()\n}\n\n// Debounced update for search input\nconst updateFiltersDebounced = debounce(updateFilters, 300)\n\nconst clearFilters = () =&gt; {\n  Object.keys(filters).forEach(key =&gt; {\n    if (Array.isArray(filters[key])) {\n      filters[key] = []\n    } else {\n      filters[key] = ''\n    }\n  })\n  updateFilters()\n}\n\nconst loadData = async () =&gt; {\n  // Load data based on current filters\n  const response = await fetch('/api/data?' + new URLSearchParams(filters))\n  filteredResults.value = await response.json()\n}\n\n// Watch for external URL changes (browser back/forward)\nwatch(() =&gt; route.query, () =&gt; {\n  // Re-sync filters from URL\n  filters.search = restoreRouteQuery('search', route, 'filters', '')\n  filters.dateFrom = restoreRouteQuery('dateFrom', route, 'filters', '')\n  filters.dateTo = restoreRouteQuery('dateTo', route, 'filters', '')\n  filters.categories = restoreRouteQuery('categories', route, 'filters', [], 'object')\n\n  loadData()\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/routers/guide/#pagination-with-url-state","title":"Pagination with URL State","text":"<p>Keep pagination state in the URL:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- Results --&gt;\n    &lt;div class=\"results\"&gt;\n      &lt;div v-for=\"item in currentPageItems\" :key=\"item.id\"&gt;\n        {{ item.name }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Pagination --&gt;\n    &lt;div class=\"pagination\"&gt;\n      &lt;button\n        @click=\"goToPage(currentPage - 1)\"\n        :disabled=\"currentPage &lt;= 1\"\n      &gt;\n        Previous\n      &lt;/button&gt;\n\n      &lt;span&gt;Page {{ currentPage }} of {{ totalPages }}&lt;/span&gt;\n\n      &lt;button\n        @click=\"goToPage(currentPage + 1)\"\n        :disabled=\"currentPage &gt;= totalPages\"\n      &gt;\n        Next\n      &lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { replaceRouteQuery, restoreRouteQuery } from 'vue-fastedgy'\nimport { ref, computed, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst items = ref([])\nconst currentPage = ref(1)\nconst itemsPerPage = 10\n\nconst totalPages = computed(() =&gt; Math.ceil(items.value.length / itemsPerPage))\n\nconst currentPageItems = computed(() =&gt; {\n  const start = (currentPage.value - 1) * itemsPerPage\n  const end = start + itemsPerPage\n  return items.value.slice(start, end)\n})\n\nonMounted(() =&gt; {\n  // Restore page from URL\n  currentPage.value = parseInt(restoreRouteQuery('page', route, 'pagination', '1')) || 1\n  loadData()\n})\n\nconst goToPage = (page) =&gt; {\n  if (page &lt; 1 || page &gt; totalPages.value) return\n\n  currentPage.value = page\n\n  // Update URL\n  replaceRouteQuery(router, {\n    page: page &gt; 1 ? page : undefined\n  }, route, 'pagination')\n}\n\nconst loadData = async () =&gt; {\n  // Load data for current page\n  const response = await fetch(`/api/items?page=${currentPage.value}&amp;limit=${itemsPerPage}`)\n  items.value = await response.json()\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/routers/guide/#multi-step-form-with-url-state","title":"Multi-Step Form with URL State","text":"<p>Save form progress in URL for multi-step forms:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"multi-step-form\"&gt;\n    &lt;!-- Step indicators --&gt;\n    &lt;div class=\"steps\"&gt;\n      &lt;div\n        v-for=\"(step, index) in steps\"\n        :key=\"index\"\n        :class=\"{ active: currentStep === index, completed: index &lt; currentStep }\"\n      &gt;\n        {{ step.title }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Step content --&gt;\n    &lt;component\n      :is=\"steps[currentStep].component\"\n      v-model=\"formData[steps[currentStep].key]\"\n      @next=\"nextStep\"\n      @previous=\"previousStep\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { replaceRouteQuery, restoreRouteQuery } from 'vue-fastedgy'\nimport { reactive, ref, watch, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst steps = [\n  { title: 'Basic Info', component: 'BasicInfoStep', key: 'basicInfo' },\n  { title: 'Contact', component: 'ContactStep', key: 'contact' },\n  { title: 'Preferences', component: 'PreferencesStep', key: 'preferences' },\n  { title: 'Review', component: 'ReviewStep', key: 'review' }\n]\n\nconst currentStep = ref(0)\nconst formData = reactive({\n  basicInfo: {},\n  contact: {},\n  preferences: {},\n  review: {}\n})\n\nonMounted(() =&gt; {\n  // Restore step and form data from URL\n  currentStep.value = parseInt(restoreRouteQuery('step', route, 'form', '0')) || 0\n\n  const savedData = restoreRouteQuery('data', route, 'form', {}, 'object')\n  if (savedData &amp;&amp; typeof savedData === 'object') {\n    Object.assign(formData, savedData)\n  }\n})\n\nconst nextStep = () =&gt; {\n  if (currentStep.value &lt; steps.length - 1) {\n    currentStep.value++\n    updateURL()\n  }\n}\n\nconst previousStep = () =&gt; {\n  if (currentStep.value &gt; 0) {\n    currentStep.value--\n    updateURL()\n  }\n}\n\nconst updateURL = () =&gt; {\n  replaceRouteQuery(router, {\n    step: currentStep.value &gt; 0 ? currentStep.value : undefined,\n    data: Object.keys(formData).some(key =&gt;\n      Object.keys(formData[key]).length &gt; 0\n    ) ? formData : undefined\n  }, route, 'form')\n}\n\n// Auto-save form data when it changes\nwatch(formData, () =&gt; {\n  updateURL()\n}, { deep: true })\n&lt;/script&gt;\n</code></pre>"},{"location":"vue/routers/overview/","title":"Routers","text":"<p>Utility functions for Vue Router query management and redirects</p> <p>The Router utilities provide helper functions for managing route query parameters, handling redirects, and manipulating route data in Vue applications.</p>"},{"location":"vue/routers/overview/#key-features","title":"Key Features","text":"<ul> <li>Query Management: Add, merge, and restore route query parameters</li> <li>Redirect Handling: Manage redirect flows between routes</li> <li>Parameter Encoding: Safely encode/decode complex query values</li> <li>Route Manipulation: Replace and update route queries</li> </ul>"},{"location":"vue/routers/overview/#available-functions","title":"Available Functions","text":"<ul> <li><code>addQueries()</code>: Add query parameters to a route</li> <li><code>addRedirect()</code>: Add redirect to route query parameters</li> <li><code>getRedirect()</code>: Get redirect URL from route query</li> <li><code>hasRedirect()</code>: Check if route has redirect parameter</li> <li><code>mergeRouteQueryValues()</code>: Merge query values into route/URLSearchParams</li> <li><code>replaceRouteQuery()</code>: Replace query values in current route</li> <li><code>restoreRouteQuery()</code>: Restore and decode query parameter value</li> <li><code>redirectIfExist()</code>: Redirect if redirect parameter exists</li> </ul>"},{"location":"vue/routers/overview/#quick-example","title":"Quick Example","text":"<pre><code>import {\n  addQueries,\n  addRedirect,\n  getRedirect,\n  mergeRouteQueryValues,\n  replaceRouteQuery,\n  restoreRouteQuery\n} from 'vue-fastedgy'\n\n// Add queries to a route\nconst routeWithQueries = addQueries(currentRoute, { name: 'users' }, {\n  status: 'active',\n  page: 1\n})\n\n// Add redirect parameter\nconst routeWithRedirect = addRedirect(currentRoute, { name: 'login' })\n\n// Get redirect URL\nconst redirectUrl = getRedirect(currentRoute, { name: 'home' })\n\n// Merge query values\nmergeRouteQueryValues({\n  filter: { status: 'active' },\n  sort: 'name'\n}, route, 'search')\n\n// Restore complex query parameter\nconst filters = restoreRouteQuery('filters', currentRoute, 'search', {}, 'object')\n</code></pre>"},{"location":"vue/routers/overview/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Login Redirects: Save intended destination before login</li> <li>Form State: Persist filter/search state in URL</li> <li>Navigation Flows: Handle multi-step processes with redirects</li> <li>URL Synchronization: Keep complex UI state in sync with URL</li> </ul>"},{"location":"vue/routers/overview/#get-started","title":"Get Started","text":"<p>Ready to use router utilities? Check out the practical guide:</p> <p>User Guide</p>"},{"location":"vue/validations/guide/","title":"Validations User Guide","text":"<p>This guide shows you how to use the <code>formatValidationErrors</code> function in real Vue.js applications.</p>"},{"location":"vue/validations/guide/#vue-component-usage","title":"Vue Component Usage","text":"<p>Use the function to display API validation errors in your components:</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;form @submit.prevent=\"handleSubmit\"&gt;\n      &lt;div&gt;\n        &lt;label&gt;Email:&lt;/label&gt;\n        &lt;input v-model=\"formData.email\" type=\"email\" required /&gt;\n      &lt;/div&gt;\n\n      &lt;div&gt;\n        &lt;label&gt;Password:&lt;/label&gt;\n        &lt;input v-model=\"formData.password\" type=\"password\" required /&gt;\n      &lt;/div&gt;\n\n      &lt;!-- Show formatted validation errors --&gt;\n      &lt;div v-if=\"validationError\" class=\"error-message\"&gt;\n        {{ validationError }}\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" :disabled=\"loading\"&gt;\n        {{ loading ? 'Submitting...' : 'Submit' }}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { formatValidationErrors, useFetcher } from 'vue-fastedgy'\nimport { ref, reactive } from 'vue'\n\nconst fetcher = useFetcher()\n\nconst formData = reactive({\n  email: '',\n  password: ''\n})\n\nconst loading = ref(false)\nconst validationError = ref('')\n\nconst handleSubmit = async () =&gt; {\n  loading.value = true\n  validationError.value = ''\n\n  try {\n    const response = await fetcher.post('/auth/login', formData)\n    console.log('Success:', response.data)\n  } catch (error) {\n    // Format and display validation errors\n    const errorMessage = formatValidationErrors(error, 'Login failed')\n    validationError.value = errorMessage\n    console.error('Validation errors:', errorMessage)\n  } finally {\n    loading.value = false\n  }\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.error-message {\n  color: red;\n  margin: 1rem 0;\n  white-space: pre-line; /* Preserve line breaks for multiple errors */\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/validations/guide/#advanced-error-handling","title":"Advanced Error Handling","text":"<p>Handle different types of API errors:</p> <pre><code>import { formatValidationErrors, HttpError } from 'vue-fastedgy'\n\nconst handleApiError = (error) =&gt; {\n  if (error instanceof HttpError) {\n    const status = error.response.status\n\n    switch (status) {\n      case 400:\n        // Bad Request - usually validation errors\n        return formatValidationErrors(error, 'Invalid form data')\n\n      case 401:\n        return 'Invalid credentials'\n\n      case 403:\n        return 'Access denied'\n\n      case 422:\n        // Unprocessable Entity - Pydantic validation errors\n        return formatValidationErrors(error, 'Please check your input')\n\n      case 500:\n        return 'Server error. Please try again later.'\n\n      default:\n        return formatValidationErrors(error, 'Something went wrong')\n    }\n  }\n\n  // Network or other errors\n  return 'Connection error. Please check your internet connection.'\n}\n\n// Usage in component\nconst submitForm = async () =&gt; {\n  try {\n    await fetcher.post('/api/users', userData)\n  } catch (error) {\n    const errorMessage = handleApiError(error)\n    showNotification('error', errorMessage)\n  }\n}\n</code></pre>"},{"location":"vue/validations/guide/#form-validation-component","title":"Form Validation Component","text":"<p>Create a reusable form component with validation error display:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"validated-form\"&gt;\n    &lt;slot :errors=\"fieldErrors\" :hasErrors=\"hasValidationErrors\" /&gt;\n\n    &lt;!-- Global error display --&gt;\n    &lt;div v-if=\"globalError\" class=\"global-error\"&gt;\n      {{ globalError }}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { formatValidationErrors } from 'vue-fastedgy'\nimport { ref, computed } from 'vue'\n\nconst emit = defineEmits(['submit', 'error'])\n\nconst globalError = ref('')\nconst fieldErrors = ref({})\n\nconst hasValidationErrors = computed(() =&gt; {\n  return Object.keys(fieldErrors.value).length &gt; 0 || !!globalError.value\n})\n\nconst handleSubmit = async (submitFunction) =&gt; {\n  clearErrors()\n\n  try {\n    const result = await submitFunction()\n    emit('submit', result)\n  } catch (error) {\n    handleError(error)\n    emit('error', error)\n  }\n}\n\nconst clearErrors = () =&gt; {\n  globalError.value = ''\n  fieldErrors.value = {}\n}\n\nconst handleError = (error) =&gt; {\n  const errorData = error?.data?.detail\n\n  if (!errorData) {\n    globalError.value = 'An unexpected error occurred'\n    return\n  }\n\n  if (typeof errorData === 'string') {\n    globalError.value = errorData\n    return\n  }\n\n  if (Array.isArray(errorData)) {\n    // Parse field-specific errors\n    errorData.forEach(err =&gt; {\n      if (err.loc &amp;&amp; err.loc.length &gt; 1) {\n        const fieldName = err.loc[err.loc.length - 1]\n        fieldErrors.value[fieldName] = err.msg\n      } else {\n        // Global error\n        globalError.value = formatValidationErrors(error, 'Validation failed')\n      }\n    })\n\n    // If no field-specific errors, show as global\n    if (Object.keys(fieldErrors.value).length === 0) {\n      globalError.value = formatValidationErrors(error, 'Validation failed')\n    }\n  }\n}\n\ndefineExpose({\n  handleSubmit,\n  clearErrors,\n  hasValidationErrors\n})\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.global-error {\n  color: red;\n  margin: 1rem 0;\n  padding: 1rem;\n  border: 1px solid #ffcdd2;\n  background-color: #ffebee;\n  border-radius: 4px;\n}\n&lt;/style&gt;\n</code></pre> <p>Usage of the validated form component:</p> <pre><code>&lt;template&gt;\n  &lt;ValidatedForm ref=\"form\" @submit=\"onSuccess\" @error=\"onError\"&gt;\n    &lt;template #default=\"{ errors }\"&gt;\n      &lt;div&gt;\n        &lt;label&gt;Name:&lt;/label&gt;\n        &lt;input v-model=\"userData.name\" type=\"text\" required /&gt;\n        &lt;span v-if=\"errors.name\" class=\"field-error\"&gt;{{ errors.name }}&lt;/span&gt;\n      &lt;/div&gt;\n\n      &lt;div&gt;\n        &lt;label&gt;Email:&lt;/label&gt;\n        &lt;input v-model=\"userData.email\" type=\"email\" required /&gt;\n        &lt;span v-if=\"errors.email\" class=\"field-error\"&gt;{{ errors.email }}&lt;/span&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"button\" @click=\"submitForm\"&gt;\n        Create User\n      &lt;/button&gt;\n    &lt;/template&gt;\n  &lt;/ValidatedForm&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useFetcher } from 'vue-fastedgy'\nimport { reactive, ref } from 'vue'\nimport ValidatedForm from './ValidatedForm.vue'\n\nconst fetcher = useFetcher()\nconst form = ref()\n\nconst userData = reactive({\n  name: '',\n  email: ''\n})\n\nconst submitForm = () =&gt; {\n  form.value.handleSubmit(() =&gt; {\n    return fetcher.post('/users', userData)\n  })\n}\n\nconst onSuccess = (result) =&gt; {\n  console.log('User created:', result)\n  // Reset form\n  userData.name = ''\n  userData.email = ''\n}\n\nconst onError = (error) =&gt; {\n  console.error('Form submission failed:', error)\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.field-error {\n  color: red;\n  font-size: 0.875rem;\n  display: block;\n  margin-top: 0.25rem;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"vue/validations/guide/#error-format-examples","title":"Error Format Examples","text":""},{"location":"vue/validations/guide/#pydantic-array-errors","title":"Pydantic Array Errors","text":"<pre><code>const arrayError = {\n  data: {\n    detail: [\n      {\n        loc: ['body', 'email'],\n        msg: 'field required',\n        type: 'value_error.missing'\n      },\n      {\n        loc: ['body', 'age'],\n        msg: 'ensure this value is greater than or equal to 0',\n        type: 'value_error.number.not_ge',\n        ctx: { limit_value: 0 }\n      }\n    ]\n  }\n}\n\nconst formatted = formatValidationErrors(arrayError)\nconsole.log(formatted)\n// Output:\n// \"\u2022 body \u2192 email: field required\n// \u2022 body \u2192 age: ensure this value is greater than or equal to 0\"\n</code></pre>"},{"location":"vue/validations/guide/#simple-string-errors","title":"Simple String Errors","text":"<pre><code>const stringError = {\n  data: {\n    detail: \"Username already exists\"\n  }\n}\n\nconst formatted = formatValidationErrors(stringError)\nconsole.log(formatted)\n// Output: \"Username already exists\"\n</code></pre>"},{"location":"vue/validations/guide/#nested-field-errors","title":"Nested Field Errors","text":"<pre><code>const nestedError = {\n  data: {\n    detail: [{\n      loc: ['body', 'address', 'zipcode'],\n      msg: 'invalid zip code format'\n    }]\n  }\n}\n\nconst formatted = formatValidationErrors(nestedError)\nconsole.log(formatted)\n// Output: \"body \u2192 address \u2192 zipcode: invalid zip code format\"\n</code></pre>"},{"location":"vue/validations/guide/#with-default-message","title":"With Default Message","text":"<pre><code>const unknownError = {\n  data: {} // No detail property\n}\n\nconst formatted = formatValidationErrors(unknownError, 'Something went wrong')\nconsole.log(formatted)\n// Output: \"Something went wrong\"\n\n// Without default message\nconst formatted2 = formatValidationErrors(unknownError)\nconsole.log(formatted2)\n// Output: \"Erreur inconnue\"\n</code></pre>"},{"location":"vue/validations/guide/#integration-with-toast-notifications","title":"Integration with Toast Notifications","text":"<pre><code>import { formatValidationErrors } from 'vue-fastedgy'\n\nconst showValidationToast = (error) =&gt; {\n  const message = formatValidationErrors(error, 'Please check your input')\n\n  // With a toast library like vue-toastification\n  toast.error(message, {\n    timeout: 5000,\n    closeOnClick: true,\n    pauseOnFocusLoss: false,\n    pauseOnHover: true\n  })\n}\n\n// Usage in form submission\nconst handleFormSubmit = async () =&gt; {\n  try {\n    await submitData()\n    toast.success('Form submitted successfully!')\n  } catch (error) {\n    showValidationToast(error)\n  }\n}\n</code></pre>"},{"location":"vue/validations/overview/","title":"Validations","text":"<p>Format Pydantic validation errors into readable text</p> <p>The Validations utility provides a single helper function to format validation errors from FastEdgy APIs (Pydantic) into user-friendly error messages.</p>"},{"location":"vue/validations/overview/#available-function","title":"Available Function","text":"<ul> <li><code>formatValidationErrors(error, defaultMessage)</code>: Format Pydantic validation errors to readable text</li> </ul>"},{"location":"vue/validations/overview/#key-features","title":"Key Features","text":"<ul> <li>Pydantic Error Formatting: Convert FastEdgy/Pydantic errors to readable messages</li> <li>Multiple Error Handling: Handle arrays of validation errors</li> <li>Field Location Mapping: Show field paths (e.g., \"body \u2192 email\")</li> <li>Fallback Messages: Use default message when error details unavailable</li> </ul>"},{"location":"vue/validations/overview/#function-signature","title":"Function Signature","text":"<pre><code>formatValidationErrors(error, defaultMessage = undefined)\n</code></pre> <p>Parameters: - <code>error</code>: Error object from API request with <code>data.detail</code> property - <code>defaultMessage</code>: Optional default message (defaults to \"Erreur inconnue\")</p> <p>Returns: - <code>string</code>: Formatted error message - <code>undefined</code>: If no error details found</p>"},{"location":"vue/validations/overview/#quick-example","title":"Quick Example","text":"<pre><code>import { formatValidationErrors } from 'vue-fastedgy'\n\n// Single error\nconst singleError = {\n  data: {\n    detail: [{\n      loc: ['body', 'email'],\n      msg: 'field required'\n    }]\n  }\n}\nconsole.log(formatValidationErrors(singleError))\n// Output: \"body \u2192 email: field required\"\n\n// Multiple errors\nconst multipleErrors = {\n  data: {\n    detail: [\n      {\n        loc: ['body', 'email'],\n        msg: 'field required'\n      },\n      {\n        loc: ['body', 'password'],\n        msg: 'ensure this value has at least 8 characters'\n      }\n    ]\n  }\n}\nconsole.log(formatValidationErrors(multipleErrors))\n// Output:\n// \"\u2022 body \u2192 email: field required\n// \u2022 body \u2192 password: ensure this value has at least 8 characters\"\n\n// String error\nconst stringError = {\n  data: {\n    detail: \"Invalid credentials\"\n  }\n}\nconsole.log(formatValidationErrors(stringError))\n// Output: \"Invalid credentials\"\n</code></pre>"},{"location":"vue/validations/overview/#get-started","title":"Get Started","text":"<p>Ready to use validation error formatting? Check out the practical guide:</p> <p>User Guide</p>"}]}